{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to BotCity's Plugins - Python. Each one of the plugins available here has its own set of install instructions, getting started and API documentation. Please refer to the menu on your left to know more about the available plugins.","title":"Home"},{"location":"#welcome","text":"Welcome to BotCity's Plugins - Python. Each one of the plugins available here has its own set of install instructions, getting started and API documentation. Please refer to the menu on your left to know more about the available plugins.","title":"Welcome"},{"location":"botcity-aws-lambda-plugin-python/","text":"Welcome Welcome to BotCity's AWS Lambda Plugin. Installation Latest release Using PyPI pip install botcity-aws-lambda-plugin","title":"Home"},{"location":"botcity-aws-lambda-plugin-python/#welcome","text":"Welcome to BotCity's AWS Lambda Plugin.","title":"Welcome"},{"location":"botcity-aws-lambda-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-aws-lambda-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-aws-lambda-plugin-python/#using-pypi","text":"pip install botcity-aws-lambda-plugin","title":"Using PyPI"},{"location":"botcity-aws-lambda-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Setting up connection Note There are two different ways to authenticate. 1. Creating the .aws folder in the home directory , you need to create two files. # ~/.aws/config [default] region = <region_code> # ~/.aws/credentials [default] aws_access_key_id = <your_aws_access_key_id> aws_secret_access_key = <your_aws_secret_access_key> aws = BotAWSLambdaPlugin () 2. Passing credentials in the class constructor. aws = BotAWSLambdaPlugin ( use_credentials_file = False , access_key_id = '<your_aws_access_key_id>' , secret_access_key = '<your_aws_secret_access_key>' , region_name = '<region_code>' # default-region='us-east-1' ) Lambda operations List all functions from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () print ( aws . list_functions ()) Get function info Info The function_name parameter can be name-only or name with alias. my-function (name-only), my-function:v1 (with alias). from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () print ( aws . get_function ( function_name = '<lambda_name>' )) Lambda invocation Synchronous invocation The function_name parameter value The function_name parameter can be name-only or name with alias. my-function (name-only), my-function:v1 (with alias). InvocationType You can use the InvocationType='Event' parameter to invoke lambda asynchronously, but you don't receive the response value from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () result = aws . invoke_function ( function_name = '<lambda_name>' , payload = { 'name' : 'Botcity' }) print ( result ) Asynchronous invocation Return type The future_invoke_function function returns a concurrent.futures.Future instance. import time from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () future_result = aws . future_invoke_function ( function_name = '<lambda_name>' , payload = { 'name' : 'Botcity' }) while not future_result . done (): print ( 'waiting...' ) time . sleep ( 1 ) print ( 'Invoke (result): ' , future_result . result ()) Alias operation List aliases Info The function_name parameter is name-only. from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () print ( aws . list_aliases ( function_name = '<lambda_name>' )) Get alias from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () print ( aws . get_alias ( function_name = '<lambda_name>' , alias_name = '<alias_name>' )) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-aws-lambda-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-aws-lambda-plugin-python/intro/#setting-up-connection","text":"Note There are two different ways to authenticate. 1. Creating the .aws folder in the home directory , you need to create two files. # ~/.aws/config [default] region = <region_code> # ~/.aws/credentials [default] aws_access_key_id = <your_aws_access_key_id> aws_secret_access_key = <your_aws_secret_access_key> aws = BotAWSLambdaPlugin () 2. Passing credentials in the class constructor. aws = BotAWSLambdaPlugin ( use_credentials_file = False , access_key_id = '<your_aws_access_key_id>' , secret_access_key = '<your_aws_secret_access_key>' , region_name = '<region_code>' # default-region='us-east-1' )","title":"Setting up connection"},{"location":"botcity-aws-lambda-plugin-python/intro/#lambda-operations","text":"","title":"Lambda operations"},{"location":"botcity-aws-lambda-plugin-python/intro/#list-all-functions","text":"from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () print ( aws . list_functions ())","title":"List all functions"},{"location":"botcity-aws-lambda-plugin-python/intro/#get-function-info","text":"Info The function_name parameter can be name-only or name with alias. my-function (name-only), my-function:v1 (with alias). from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () print ( aws . get_function ( function_name = '<lambda_name>' ))","title":"Get function info"},{"location":"botcity-aws-lambda-plugin-python/intro/#lambda-invocation","text":"","title":"Lambda invocation"},{"location":"botcity-aws-lambda-plugin-python/intro/#synchronous-invocation","text":"The function_name parameter value The function_name parameter can be name-only or name with alias. my-function (name-only), my-function:v1 (with alias). InvocationType You can use the InvocationType='Event' parameter to invoke lambda asynchronously, but you don't receive the response value from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () result = aws . invoke_function ( function_name = '<lambda_name>' , payload = { 'name' : 'Botcity' }) print ( result )","title":"Synchronous invocation"},{"location":"botcity-aws-lambda-plugin-python/intro/#asynchronous-invocation","text":"Return type The future_invoke_function function returns a concurrent.futures.Future instance. import time from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () future_result = aws . future_invoke_function ( function_name = '<lambda_name>' , payload = { 'name' : 'Botcity' }) while not future_result . done (): print ( 'waiting...' ) time . sleep ( 1 ) print ( 'Invoke (result): ' , future_result . result ())","title":"Asynchronous invocation"},{"location":"botcity-aws-lambda-plugin-python/intro/#alias-operation","text":"","title":"Alias operation"},{"location":"botcity-aws-lambda-plugin-python/intro/#list-aliases","text":"Info The function_name parameter is name-only. from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () print ( aws . list_aliases ( function_name = '<lambda_name>' ))","title":"List aliases"},{"location":"botcity-aws-lambda-plugin-python/intro/#get-alias","text":"from botcity.plugins.aws.lambda_functions import BotAWSLambdaPlugin aws = BotAWSLambdaPlugin () print ( aws . get_alias ( function_name = '<lambda_name>' , alias_name = '<alias_name>' ))","title":"Get alias"},{"location":"botcity-aws-lambda-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/","text":"botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin lambda_client property readonly Returns the aws client instance. Returns: Type Description boto3_instance The aws client instance. __init__ ( self , region_name = 'us-east-1' , use_credentials_file = True , access_key_id = None , secret_access_key = None ) special BotAWSLambdaPlugin Parameters: Name Type Description Default region_name str Default region when creating new connections. 'us-east-1' use_credentials_file bool If set to True will make authentication via AWS credentials file. True access_key_id str AWS access key ID. None secret_access_key str AWS secret access key. None future_invoke_function ( self , function_name , payload = None , ** kwargs ) Running lambda function and getting response in the future. See Documentation Parameters: Name Type Description Default function_name str The function name-only or name with alias. my-function (name-only), my-function:v1 (with alias). required payload Dict The JSON that you want to provide to your Lambda function as input. None Returns: Type Description future The future instance. get_alias ( self , function_name , alias_name , ** kwargs ) Get alias info. See Documentation Parameters: Name Type Description Default function_name str The function name-only. required alias_name str The name of the alias. required Returns: Type Description info The alias info. get_function ( self , function_name , ** kwargs ) Get function info. See Documentation Parameters: Name Type Description Default function_name str The function name-only or name with alias. my-function (name-only), my-function:v1 (with alias). required Returns: Type Description function_info The function info. invoke_function ( self , function_name , payload = None , ** kwargs ) Invoke lambda function. See Documentation Parameters: Name Type Description Default function_name str The function name-only or name with alias. my-function (name-only), my-function:v1 (with alias). required payload Dict The JSON that you want to provide to your Lambda function as input. None Returns: Type Description response The response of lambda execution. list_aliases ( self , function_name , ** kwargs ) Returns a list of aliases for a Lambda function. See Documentation Parameters: Name Type Description Default function_name str The function name-only. required Returns: Type Description aliases A list of aliases for a Lambda function. list_functions ( self , ** kwargs ) List all functions. See Documentation Returns: Type Description functions The list of functions.","title":"Plugin"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/#botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin","text":"","title":"BotAWSLambdaPlugin"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/#botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin.lambda_client","text":"Returns the aws client instance. Returns: Type Description boto3_instance The aws client instance.","title":"lambda_client"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/#botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin.__init__","text":"BotAWSLambdaPlugin Parameters: Name Type Description Default region_name str Default region when creating new connections. 'us-east-1' use_credentials_file bool If set to True will make authentication via AWS credentials file. True access_key_id str AWS access key ID. None secret_access_key str AWS secret access key. None","title":"__init__()"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/#botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin.future_invoke_function","text":"Running lambda function and getting response in the future. See Documentation Parameters: Name Type Description Default function_name str The function name-only or name with alias. my-function (name-only), my-function:v1 (with alias). required payload Dict The JSON that you want to provide to your Lambda function as input. None Returns: Type Description future The future instance.","title":"future_invoke_function()"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/#botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin.get_alias","text":"Get alias info. See Documentation Parameters: Name Type Description Default function_name str The function name-only. required alias_name str The name of the alias. required Returns: Type Description info The alias info.","title":"get_alias()"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/#botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin.get_function","text":"Get function info. See Documentation Parameters: Name Type Description Default function_name str The function name-only or name with alias. my-function (name-only), my-function:v1 (with alias). required Returns: Type Description function_info The function info.","title":"get_function()"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/#botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin.invoke_function","text":"Invoke lambda function. See Documentation Parameters: Name Type Description Default function_name str The function name-only or name with alias. my-function (name-only), my-function:v1 (with alias). required payload Dict The JSON that you want to provide to your Lambda function as input. None Returns: Type Description response The response of lambda execution.","title":"invoke_function()"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/#botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin.list_aliases","text":"Returns a list of aliases for a Lambda function. See Documentation Parameters: Name Type Description Default function_name str The function name-only. required Returns: Type Description aliases A list of aliases for a Lambda function.","title":"list_aliases()"},{"location":"botcity-aws-lambda-plugin-python/api/plugin/#botcity.plugins.aws.lambda_functions.plugin.BotAWSLambdaPlugin.list_functions","text":"List all functions. See Documentation Returns: Type Description functions The list of functions.","title":"list_functions()"},{"location":"botcity-aws-s3-plugin-python/","text":"Welcome Welcome to BotCity's AWS S3 Plugin. Installation Latest release Using PyPI pip install botcity-aws-s3-plugin","title":"Home"},{"location":"botcity-aws-s3-plugin-python/#welcome","text":"Welcome to BotCity's AWS S3 Plugin.","title":"Welcome"},{"location":"botcity-aws-s3-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-aws-s3-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-aws-s3-plugin-python/#using-pypi","text":"pip install botcity-aws-s3-plugin","title":"Using PyPI"},{"location":"botcity-aws-s3-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.aws.s3 import BotAWSS3Plugin As a demonstration of the library, let's build a simple example together that will do something cool. Setting up connection Caution S3 does work only POSIX-style paths use \"/\" (forward slash) . Relative paths are not allowed, if you are going to make any changes, put the absolute path of the file or folder. Note There are two different ways to authenticate. 1. Creating the .aws folder in the home directory , you need to create two files. # ~/.aws/config [default] region = <region_code> # ~/.aws/credentials [default] aws_access_key_id = <your_aws_access_key_id> aws_secret_access_key = <your_aws_secret_access_key> s3 = BotAWSS3Plugin () 2. Passing credentials in the class constructor. s3 = BotAWSS3Plugin ( use_credentials_file = False , access_key_id = '<your_aws_access_key_id>' , secret_access_key = '<your_aws_secret_access_key>' , region_name = '<region_code>' ) Bucket operations Listing buckets from botcity.plugins.aws.s3 import BotAWSS3Plugin , Filter s3 = BotAWSS3Plugin () print ( s3 . list_buckets ()) print ( s3 . filter_buckets ( text = 'test-' , filter_ = Filter . STARTS_WITH )) Creating bucket Tip All methods using bucket_name parameter are optional and they can be defined like this. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . bucket_name = '<your_bucket_name>' Attention Amazon S3 supports global buckets, which means that each bucket name must be unique across all AWS accounts in all the AWS Regions within a partition. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . create_bucket ( bucket_name = '<your_bucket_name>' ) # Or # s3.bucket_name = '<your_bucket_name>' # s3.create_bucket() Deleting bucket from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . delete_bucket ( bucket_name = '<your_bucket_name>' ) File operations Uploading file from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . upload_file ( bucket_name = '<your_bucket_name>' , file_path = '/<path_to_file>/example.txt' , bucket_filename = 'example.txt' ) Downloading file from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () filepath = s3 . download_file ( bucket_name = '<your_bucket_name>' , filename = 'example.txt' , path_to_save = '/<path_to_save>/' ) print ( filepath ) # Returns: /<path_to_save>/example.txt Copying file from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # copying the file to another bucket s3 . copy_file ( bucket_name = '<your_bucket_name>' , filename = 'example.txt' , target_bucket_name = 'another_bucket' , target_filename = 'copy_of_the_file_in_another_bucket.txt' ) # copying the file to another place in the same bucket s3 . copy_file ( bucket_name = '<your_bucket_name>' , filename = 'example.txt' , # target_bucket_name='another_bucket', ignore this argument target_filename = 'copy_of_the_file_in_the_same_bucket.txt' ) Listing files from botcity.plugins.aws.s3 import BotAWSS3Plugin , Filter s3 = BotAWSS3Plugin () print ( s3 . list_files ( bucket_name = '<your_bucket_name>' )) print ( s3 . filter_files ( bucket_name = '<your_bucket_name>' , text = '.txt' , filter_ = Filter . ENDS_WITH )) Deleting file from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . delete_file ( bucket_name = '<your_bucket_name>' , filename = 'example.txt' ) Moving file from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # moving the file to another bucket s3 . move_file ( bucket_name = '<your_bucket_name>' , filename = '/test/current-file.txt' , target_bucket_name = 'another_bucket' , target_filename = '/test/current-file.txt' ) # copying the file to another place in the same bucket s3 . move_file ( bucket_name = '<your_bucket_name>' , filename = '/test/current-file.txt' , # target_bucket_name='another_bucket', ignore this argument target_filename = '/another_folder/current-file.txt' ) Folder operations Uploading folder Attention For now, empty folders are ignored. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . upload_folder ( bucket_name = '<your_bucket_name>' , bucket_folder = '/docs' , folder_path = '/your_path_to/docs' ) Downloading folder from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . download_folder ( bucket_name = '<your_bucket_name>' , bucket_folder = '/docs' , path_to_save = '/path_to_downloads/docs' ) Copying folder from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # copying the folder to another bucket s3 . copy_folder ( bucket_name = '<your_bucket_name>' , folder_name = '/docs' , target_bucket_name = 'another_bucket' , target_folder_name = '/docs' ) # copying the folder to another place in the same bucket s3 . copy_folder ( bucket_name = '<your_bucket_name>' , folder_name = '/files/docs' , # target_bucket_name='another_bucket', ignore this argument target_folder_name = '/' # will copy folder to bucket root path. /files/docs -> /docs ) Deleting folder from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . delete_folder ( bucket_name = '<your_bucket_name>' , folder_name = '/docs' ) Moving folder Tip move_folder can be used to rename folder. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # moving the folder to another bucket s3 . move_folder ( bucket_name = '<your_bucket_name>' , folder_path = '/docs/tests' , target_bucket_name = 'another_bucket' , target_folder_name = '/' # move /docs/tests to / in another bucket ) # moving the folder to another place in the same bucket s3 . move_folder ( bucket_name = '<your_bucket_name>' , folder_path = '/docs' , # target_bucket_name='another_bucket', ignore this argument target_folder_name = '/copy-docs/' # move folder to inside /copy-docs/ ) # renaming folder s3 . move_folder ( bucket_name = '<your_bucket_name>' , folder_path = '/docs' , target_folder_name = '/docs-v2' # rename folder ) Renaming folder from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # moving the folder to another bucket s3 . rename_folder ( bucket_name = '<your_bucket_name>' , folder_path = '/docs/tests' , target_folder_name = 'tests-new-name' # rename /docs/tests to /docs/tests-new-name ) Other operations To use other boto3 methods use the s3_client property class. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () result = s3 . s3_client . get_bucket_acl ( Bucket = '<your_bucket_name>' ) print ( result ) Filter Enum The filter operations ( filter_buckets , filter_files ) receive a Filter enum with possible values: Filter.EQUALS , Filter.STARTS_WITH , Filter.ENDS_WITH , Filter.CONTAINS . Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-aws-s3-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.aws.s3 import BotAWSS3Plugin As a demonstration of the library, let's build a simple example together that will do something cool.","title":"Getting Started"},{"location":"botcity-aws-s3-plugin-python/intro/#setting-up-connection","text":"Caution S3 does work only POSIX-style paths use \"/\" (forward slash) . Relative paths are not allowed, if you are going to make any changes, put the absolute path of the file or folder. Note There are two different ways to authenticate. 1. Creating the .aws folder in the home directory , you need to create two files. # ~/.aws/config [default] region = <region_code> # ~/.aws/credentials [default] aws_access_key_id = <your_aws_access_key_id> aws_secret_access_key = <your_aws_secret_access_key> s3 = BotAWSS3Plugin () 2. Passing credentials in the class constructor. s3 = BotAWSS3Plugin ( use_credentials_file = False , access_key_id = '<your_aws_access_key_id>' , secret_access_key = '<your_aws_secret_access_key>' , region_name = '<region_code>' )","title":"Setting up connection"},{"location":"botcity-aws-s3-plugin-python/intro/#bucket-operations","text":"","title":"Bucket operations"},{"location":"botcity-aws-s3-plugin-python/intro/#listing-buckets","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin , Filter s3 = BotAWSS3Plugin () print ( s3 . list_buckets ()) print ( s3 . filter_buckets ( text = 'test-' , filter_ = Filter . STARTS_WITH ))","title":"Listing buckets"},{"location":"botcity-aws-s3-plugin-python/intro/#creating-bucket","text":"Tip All methods using bucket_name parameter are optional and they can be defined like this. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . bucket_name = '<your_bucket_name>' Attention Amazon S3 supports global buckets, which means that each bucket name must be unique across all AWS accounts in all the AWS Regions within a partition. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . create_bucket ( bucket_name = '<your_bucket_name>' ) # Or # s3.bucket_name = '<your_bucket_name>' # s3.create_bucket()","title":"Creating bucket"},{"location":"botcity-aws-s3-plugin-python/intro/#deleting-bucket","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . delete_bucket ( bucket_name = '<your_bucket_name>' )","title":"Deleting bucket"},{"location":"botcity-aws-s3-plugin-python/intro/#file-operations","text":"","title":"File operations"},{"location":"botcity-aws-s3-plugin-python/intro/#uploading-file","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . upload_file ( bucket_name = '<your_bucket_name>' , file_path = '/<path_to_file>/example.txt' , bucket_filename = 'example.txt' )","title":"Uploading file"},{"location":"botcity-aws-s3-plugin-python/intro/#downloading-file","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () filepath = s3 . download_file ( bucket_name = '<your_bucket_name>' , filename = 'example.txt' , path_to_save = '/<path_to_save>/' ) print ( filepath ) # Returns: /<path_to_save>/example.txt","title":"Downloading file"},{"location":"botcity-aws-s3-plugin-python/intro/#copying-file","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # copying the file to another bucket s3 . copy_file ( bucket_name = '<your_bucket_name>' , filename = 'example.txt' , target_bucket_name = 'another_bucket' , target_filename = 'copy_of_the_file_in_another_bucket.txt' ) # copying the file to another place in the same bucket s3 . copy_file ( bucket_name = '<your_bucket_name>' , filename = 'example.txt' , # target_bucket_name='another_bucket', ignore this argument target_filename = 'copy_of_the_file_in_the_same_bucket.txt' )","title":"Copying file"},{"location":"botcity-aws-s3-plugin-python/intro/#listing-files","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin , Filter s3 = BotAWSS3Plugin () print ( s3 . list_files ( bucket_name = '<your_bucket_name>' )) print ( s3 . filter_files ( bucket_name = '<your_bucket_name>' , text = '.txt' , filter_ = Filter . ENDS_WITH ))","title":"Listing files"},{"location":"botcity-aws-s3-plugin-python/intro/#deleting-file","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . delete_file ( bucket_name = '<your_bucket_name>' , filename = 'example.txt' )","title":"Deleting file"},{"location":"botcity-aws-s3-plugin-python/intro/#moving-file","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # moving the file to another bucket s3 . move_file ( bucket_name = '<your_bucket_name>' , filename = '/test/current-file.txt' , target_bucket_name = 'another_bucket' , target_filename = '/test/current-file.txt' ) # copying the file to another place in the same bucket s3 . move_file ( bucket_name = '<your_bucket_name>' , filename = '/test/current-file.txt' , # target_bucket_name='another_bucket', ignore this argument target_filename = '/another_folder/current-file.txt' )","title":"Moving file"},{"location":"botcity-aws-s3-plugin-python/intro/#folder-operations","text":"","title":"Folder operations"},{"location":"botcity-aws-s3-plugin-python/intro/#uploading-folder","text":"Attention For now, empty folders are ignored. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . upload_folder ( bucket_name = '<your_bucket_name>' , bucket_folder = '/docs' , folder_path = '/your_path_to/docs' )","title":"Uploading folder"},{"location":"botcity-aws-s3-plugin-python/intro/#downloading-folder","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . download_folder ( bucket_name = '<your_bucket_name>' , bucket_folder = '/docs' , path_to_save = '/path_to_downloads/docs' )","title":"Downloading folder"},{"location":"botcity-aws-s3-plugin-python/intro/#copying-folder","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # copying the folder to another bucket s3 . copy_folder ( bucket_name = '<your_bucket_name>' , folder_name = '/docs' , target_bucket_name = 'another_bucket' , target_folder_name = '/docs' ) # copying the folder to another place in the same bucket s3 . copy_folder ( bucket_name = '<your_bucket_name>' , folder_name = '/files/docs' , # target_bucket_name='another_bucket', ignore this argument target_folder_name = '/' # will copy folder to bucket root path. /files/docs -> /docs )","title":"Copying folder"},{"location":"botcity-aws-s3-plugin-python/intro/#deleting-folder","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () s3 . delete_folder ( bucket_name = '<your_bucket_name>' , folder_name = '/docs' )","title":"Deleting folder"},{"location":"botcity-aws-s3-plugin-python/intro/#moving-folder","text":"Tip move_folder can be used to rename folder. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # moving the folder to another bucket s3 . move_folder ( bucket_name = '<your_bucket_name>' , folder_path = '/docs/tests' , target_bucket_name = 'another_bucket' , target_folder_name = '/' # move /docs/tests to / in another bucket ) # moving the folder to another place in the same bucket s3 . move_folder ( bucket_name = '<your_bucket_name>' , folder_path = '/docs' , # target_bucket_name='another_bucket', ignore this argument target_folder_name = '/copy-docs/' # move folder to inside /copy-docs/ ) # renaming folder s3 . move_folder ( bucket_name = '<your_bucket_name>' , folder_path = '/docs' , target_folder_name = '/docs-v2' # rename folder )","title":"Moving folder"},{"location":"botcity-aws-s3-plugin-python/intro/#renaming-folder","text":"from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () # moving the folder to another bucket s3 . rename_folder ( bucket_name = '<your_bucket_name>' , folder_path = '/docs/tests' , target_folder_name = 'tests-new-name' # rename /docs/tests to /docs/tests-new-name )","title":"Renaming folder"},{"location":"botcity-aws-s3-plugin-python/intro/#other-operations","text":"To use other boto3 methods use the s3_client property class. from botcity.plugins.aws.s3 import BotAWSS3Plugin s3 = BotAWSS3Plugin () result = s3 . s3_client . get_bucket_acl ( Bucket = '<your_bucket_name>' ) print ( result ) Filter Enum The filter operations ( filter_buckets , filter_files ) receive a Filter enum with possible values: Filter.EQUALS , Filter.STARTS_WITH , Filter.ENDS_WITH , Filter.CONTAINS .","title":"Other operations"},{"location":"botcity-aws-s3-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-aws-s3-plugin-python/api/plugin/","text":"botcity.plugins.aws.s3.plugin.BotAWSS3Plugin bucket_name property writable Returns the bucket name. Returns: Type Description bucket_name The bucket name. s3_client property readonly Returns the aws client instance. Returns: Type Description boto3_instance The aws client instance. __init__ ( self , region_name = 'us-east-1' , use_credentials_file = True , access_key_id = None , secret_access_key = None ) special BotAWSS3Plugin Parameters: Name Type Description Default region_name str Default region when creating new connections. 'us-east-1' use_credentials_file bool If set to True will make authentication via AWS credentials file. True access_key_id str AWS access key ID. None secret_access_key str AWS secret access key. None copy_file ( self , filename , target_filename , bucket_name = None , target_bucket_name = None , extra_args = None ) Copy the file to another bucket or in the same bucket. See Documentation # noqa Parameters: Name Type Description Default filename str The original filename in the bucket. required target_filename str The new copy of the file. required bucket_name str The bucket name. None target_bucket_name str The another bucket to save this copy. None extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_DOWNLOAD_ARGS None copy_folder ( self , folder_path , target_folder_name , bucket_name = None , target_bucket_name = None , max_workers = 1 , extra_args = None ) Copy the folder to another bucket or in the same bucket. Parameters: Name Type Description Default folder_path str The original folder name in the bucket. required target_folder_name str The new copy of the folder. required bucket_name str The bucket name. None target_bucket_name str The another bucket to save this copy. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. None create_bucket ( self , bucket_name = None , ** kwargs ) Create new bucket. See Documentation # noqa Parameters: Name Type Description Default bucket_name str The new bucket name to be created. None kwargs dict The dict for bucket permissions. {} delete_bucket ( self , bucket_name = None , ** kwargs ) Delete the bucket. See Documentation # noqa Parameters: Name Type Description Default bucket_name str The new bucket name to be created. None delete_file ( self , filename , bucket_name = None , ** kwargs ) Delete file from the bucket. See Documentation # noqa Parameters: Name Type Description Default filename str The filename in the bucket. required bucket_name str The bucket name. None delete_folder ( self , folder_name , bucket_name = None , max_workers = 1 ) Delete folder from the bucket. Parameters: Name Type Description Default folder_name str The folder name to be deleted. required bucket_name str The bucket name. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 download_file ( self , filename , path_to_save , bucket_name = None , extra_args = None ) Download file from the bucket. See Documentation # noqa Parameters: Name Type Description Default filename str The filename in the bucket. required path_to_save str The local path to save. required bucket_name str The bucket name. None extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_DOWNLOAD_ARGS None Returns: Type Description file_path The downloaded file path download_folder ( self , bucket_folder , path_to_save , bucket_name = None , max_workers = 1 , extra_args = None ) Download all files from the folder. Parameters: Name Type Description Default bucket_folder str The folder name in the bucket. required path_to_save str The local path to save. required bucket_name str The bucket name. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_DOWNLOAD_ARGS # noqa None filter_buckets ( self , text , regex = False , filter_ =< Filter . EQUALS : 'equals' > ) Filter buckets. Parameters: Name Type Description Default text str The element to filter. required regex bool True to enable regex search. See for regex details False filter_ Filter Filter pattern without user using regex. <Filter.EQUALS: 'equals'> filter_files ( self , text , bucket_name = None , regex = False , filter_ =< Filter . EQUALS : 'equals' > , ** kwargs ) Filter files. Parameters: Name Type Description Default text str The element to filter. required bucket_name str The bucket name. None regex bool True to enable regex search. See for regex details False filter_ Filter Filter pattern without user using regex. <Filter.EQUALS: 'equals'> list_buckets ( self ) Returns the list of all buckets. See Documentation # noqa Returns: Type Description buckets The list of all buckets. list_files ( self , bucket_name = None , ** kwargs ) Returns the list of files. See Documentation # noqa Parameters: Name Type Description Default bucket_name str The bucket name. None Returns: Type Description buckets The list of buckets. move_file ( self , filename , target_filename , bucket_name = None , target_bucket_name = None , extra_args = None , ** kwargs ) Move the file to another bucket or in the same bucket. Parameters: Name Type Description Default filename str The filename in the bucket. required target_filename str The new copy of the file. required bucket_name str The bucket name. None target_bucket_name str The another bucket to save this copy. None extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_DOWNLOAD_ARGS # noqa None move_folder ( self , folder_path , target_folder_name , bucket_name = None , target_bucket_name = None , max_workers = 1 , extra_args = None , ** kwargs ) Move the folder to another bucket or in the same bucket. Parameters: Name Type Description Default folder_path str The original folder name in the bucket. required target_folder_name str The new copy of the folder. required bucket_name str The bucket name. None target_bucket_name str The another bucket to save this copy. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. None rename_folder ( self , folder_path , target_folder_name , bucket_name = None , max_workers = 1 , extra_args = None , ** kwargs ) Rename the folder. Parameters: Name Type Description Default folder_path str The original folder name in the bucket. required target_folder_name str The new copy of the folder. required bucket_name str The bucket name. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. None upload_file ( self , file_path , bucket_name = None , bucket_filename = None , extra_args = None ) Upload file to bucket. See Documentation # noqa Parameters: Name Type Description Default file_path str The local file path. required bucket_name str The bucket name. None bucket_filename str The new filename in the bucket. None extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_UPLOAD_ARGS None upload_folder ( self , bucket_folder , folder_path , bucket_name = None , max_workers = 1 , extra_args = None ) Upload folder to bucket. Empty directories are ignored. Parameters: Name Type Description Default bucket_folder str The new folder name in the bucket. required folder_path str The local folder path. required bucket_name str The bucket name. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_UPLOAD_ARGS # noqa None","title":"Plugin"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin","text":"","title":"BotAWSS3Plugin"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.bucket_name","text":"Returns the bucket name. Returns: Type Description bucket_name The bucket name.","title":"bucket_name"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.s3_client","text":"Returns the aws client instance. Returns: Type Description boto3_instance The aws client instance.","title":"s3_client"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.__init__","text":"BotAWSS3Plugin Parameters: Name Type Description Default region_name str Default region when creating new connections. 'us-east-1' use_credentials_file bool If set to True will make authentication via AWS credentials file. True access_key_id str AWS access key ID. None secret_access_key str AWS secret access key. None","title":"__init__()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.copy_file","text":"Copy the file to another bucket or in the same bucket. See Documentation # noqa Parameters: Name Type Description Default filename str The original filename in the bucket. required target_filename str The new copy of the file. required bucket_name str The bucket name. None target_bucket_name str The another bucket to save this copy. None extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_DOWNLOAD_ARGS None","title":"copy_file()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.copy_folder","text":"Copy the folder to another bucket or in the same bucket. Parameters: Name Type Description Default folder_path str The original folder name in the bucket. required target_folder_name str The new copy of the folder. required bucket_name str The bucket name. None target_bucket_name str The another bucket to save this copy. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. None","title":"copy_folder()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.create_bucket","text":"Create new bucket. See Documentation # noqa Parameters: Name Type Description Default bucket_name str The new bucket name to be created. None kwargs dict The dict for bucket permissions. {}","title":"create_bucket()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.delete_bucket","text":"Delete the bucket. See Documentation # noqa Parameters: Name Type Description Default bucket_name str The new bucket name to be created. None","title":"delete_bucket()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.delete_file","text":"Delete file from the bucket. See Documentation # noqa Parameters: Name Type Description Default filename str The filename in the bucket. required bucket_name str The bucket name. None","title":"delete_file()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.delete_folder","text":"Delete folder from the bucket. Parameters: Name Type Description Default folder_name str The folder name to be deleted. required bucket_name str The bucket name. None max_workers int The maximum number of threads that can be used to execute the given calls. 1","title":"delete_folder()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.download_file","text":"Download file from the bucket. See Documentation # noqa Parameters: Name Type Description Default filename str The filename in the bucket. required path_to_save str The local path to save. required bucket_name str The bucket name. None extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_DOWNLOAD_ARGS None Returns: Type Description file_path The downloaded file path","title":"download_file()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.download_folder","text":"Download all files from the folder. Parameters: Name Type Description Default bucket_folder str The folder name in the bucket. required path_to_save str The local path to save. required bucket_name str The bucket name. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_DOWNLOAD_ARGS # noqa None","title":"download_folder()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.filter_buckets","text":"Filter buckets. Parameters: Name Type Description Default text str The element to filter. required regex bool True to enable regex search. See for regex details False filter_ Filter Filter pattern without user using regex. <Filter.EQUALS: 'equals'>","title":"filter_buckets()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.filter_files","text":"Filter files. Parameters: Name Type Description Default text str The element to filter. required bucket_name str The bucket name. None regex bool True to enable regex search. See for regex details False filter_ Filter Filter pattern without user using regex. <Filter.EQUALS: 'equals'>","title":"filter_files()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.list_buckets","text":"Returns the list of all buckets. See Documentation # noqa Returns: Type Description buckets The list of all buckets.","title":"list_buckets()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.list_files","text":"Returns the list of files. See Documentation # noqa Parameters: Name Type Description Default bucket_name str The bucket name. None Returns: Type Description buckets The list of buckets.","title":"list_files()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.move_file","text":"Move the file to another bucket or in the same bucket. Parameters: Name Type Description Default filename str The filename in the bucket. required target_filename str The new copy of the file. required bucket_name str The bucket name. None target_bucket_name str The another bucket to save this copy. None extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_DOWNLOAD_ARGS # noqa None","title":"move_file()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.move_folder","text":"Move the folder to another bucket or in the same bucket. Parameters: Name Type Description Default folder_path str The original folder name in the bucket. required target_folder_name str The new copy of the folder. required bucket_name str The bucket name. None target_bucket_name str The another bucket to save this copy. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. None","title":"move_folder()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.rename_folder","text":"Rename the folder. Parameters: Name Type Description Default folder_path str The original folder name in the bucket. required target_folder_name str The new copy of the folder. required bucket_name str The bucket name. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. None","title":"rename_folder()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.upload_file","text":"Upload file to bucket. See Documentation # noqa Parameters: Name Type Description Default file_path str The local file path. required bucket_name str The bucket name. None bucket_filename str The new filename in the bucket. None extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_UPLOAD_ARGS None","title":"upload_file()"},{"location":"botcity-aws-s3-plugin-python/api/plugin/#botcity.plugins.aws.s3.plugin.BotAWSS3Plugin.upload_folder","text":"Upload folder to bucket. Empty directories are ignored. Parameters: Name Type Description Default bucket_folder str The new folder name in the bucket. required folder_path str The local folder path. required bucket_name str The bucket name. None max_workers int The maximum number of threads that can be used to execute the given calls. 1 extra_args Dict Extra arguments that may be passed to the client operation. Learn more about ALLOWED_UPLOAD_ARGS # noqa None","title":"upload_folder()"},{"location":"botcity-captcha-plugin-python/","text":"Welcome Welcome to BotCity's Captcha Plugin. Installation Latest release Using PyPI pip install botcity-captcha-plugin","title":"Home"},{"location":"botcity-captcha-plugin-python/#welcome","text":"Welcome to BotCity's Captcha Plugin.","title":"Welcome"},{"location":"botcity-captcha-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-captcha-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-captcha-plugin-python/#using-pypi","text":"pip install botcity-captcha-plugin","title":"Using PyPI"},{"location":"botcity-captcha-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. # For Anti Captcha, use: from botcity.plugins.captcha import BotAntiCaptchaPlugin # For Death By Captcha, use: from botcity.plugins.captcha import BotDeathByCaptchaPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin (AntiCaptcha) antiCaptcha = BotAntiCaptchaPlugin ( API_KEY ) # Death By Captcha version deathByCaptcha = BotDeathByCaptchaPlugin ( USERNAME , PASSWORD ) ... Step 2 of Example # AntiCaptcha antiCaptcha . solve_text ( \"captcha_ms.jpeg\" ) # Death By Captcha deathByCaptcha . solve ( \"captcha_ms.jpeg\" ) ... Complete code Let's take a look into the complete code: # Imports from botcity.plugins.captcha import BotAntiCaptchaPlugin from botcity.plugins.captcha import BotDeathByCaptchaPlugin # AntiCaptcha Text anti_captcha = BotAntiCaptchaPlugin ( \"API_KEY\" ) print ( anti_captcha . solve_text ( \"captcha_ms.jpeg\" )) # AntiCaptcha ReCaptcha url = 'https://www.google.com/recaptcha/api2/demo' captcha_id = '6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-' print ( anti_captcha . solve_re ( url , captcha_id )) # Death By Captcha death_by_captcha = BotDeathByCaptchaPlugin ( \"USERNAME\" , \"PASSWORD\" ) print ( death_by_captcha . solve ( \"captcha.jpg\" )) Pro Tip This plugin allows you to use method chaining where applicable (methods auth and report): # Let's suppose the API solves the captcha incorrectly dbc . solve ( \"captcha.jpg\" ) incorrect_captcha = True # Tries again if incorrect_captcha : dbc . report () . solve ( \"captcha.jpg\" ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-captcha-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. # For Anti Captcha, use: from botcity.plugins.captcha import BotAntiCaptchaPlugin # For Death By Captcha, use: from botcity.plugins.captcha import BotDeathByCaptchaPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-captcha-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin (AntiCaptcha) antiCaptcha = BotAntiCaptchaPlugin ( API_KEY ) # Death By Captcha version deathByCaptcha = BotDeathByCaptchaPlugin ( USERNAME , PASSWORD ) ...","title":"Step 1 of Example"},{"location":"botcity-captcha-plugin-python/intro/#step-2-of-example","text":"# AntiCaptcha antiCaptcha . solve_text ( \"captcha_ms.jpeg\" ) # Death By Captcha deathByCaptcha . solve ( \"captcha_ms.jpeg\" ) ...","title":"Step 2 of Example"},{"location":"botcity-captcha-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Imports from botcity.plugins.captcha import BotAntiCaptchaPlugin from botcity.plugins.captcha import BotDeathByCaptchaPlugin # AntiCaptcha Text anti_captcha = BotAntiCaptchaPlugin ( \"API_KEY\" ) print ( anti_captcha . solve_text ( \"captcha_ms.jpeg\" )) # AntiCaptcha ReCaptcha url = 'https://www.google.com/recaptcha/api2/demo' captcha_id = '6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-' print ( anti_captcha . solve_re ( url , captcha_id )) # Death By Captcha death_by_captcha = BotDeathByCaptchaPlugin ( \"USERNAME\" , \"PASSWORD\" ) print ( death_by_captcha . solve ( \"captcha.jpg\" ))","title":"Complete code"},{"location":"botcity-captcha-plugin-python/intro/#pro-tip","text":"This plugin allows you to use method chaining where applicable (methods auth and report): # Let's suppose the API solves the captcha incorrectly dbc . solve ( \"captcha.jpg\" ) incorrect_captcha = True # Tries again if incorrect_captcha : dbc . report () . solve ( \"captcha.jpg\" )","title":"Pro Tip"},{"location":"botcity-captcha-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-captcha-plugin-python/api/plugin/","text":"botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin __init__ ( self , api_key ) special BotAntiCaptchaPlugin. Parameters: Name Type Description Default api_key str Api_key found in your AntiCaptcha account. required auth ( self , api_key ) Updates the api_key for this object. This method does NOT need to be used if you have provided the correct key in this class' constructor. Parameters: Name Type Description Default api_key str AntiCaptcha's key that allow you to use it's API Service. required Returns: Type Description BotAntiCaptchaPlugin self (allows method chaining). report ( self ) Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotAntiCaptchaPlugin self, allowing method chaining solve_fun ( self , url , site_key , timeout = 120 ) Solves a FunCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution. solve_re ( self , url , site_key , timeout = 120 ) Solves a ReCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution. solve_text ( self , img_or_path , timeout = 120 ) Solves a Text Captcha. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image or a path to an image file required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters. botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin __init__ ( self , username , password ) special Provides an easy way to solve captcha's using Death By Captcha's API. Parameters: Name Type Description Default username str Your Death By Captcha login. required password str Your Death By Captcha password. required auth ( self , username , password ) Updates the username and password for this object. This method does NOT need to be used if you have provided the correct login/password in this class' constructor. Parameters: Name Type Description Default username str Your Death By Captcha username. required password str Your Death By Captcha password. required Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining) report ( self ) Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining) solve ( self , img_or_path , timeout = 120 ) Solves a captcha of any supported type. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image object or a path to an image file. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters.","title":"Plugin"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin","text":"","title":"BotAntiCaptchaPlugin"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.__init__","text":"BotAntiCaptchaPlugin. Parameters: Name Type Description Default api_key str Api_key found in your AntiCaptcha account. required","title":"__init__()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.auth","text":"Updates the api_key for this object. This method does NOT need to be used if you have provided the correct key in this class' constructor. Parameters: Name Type Description Default api_key str AntiCaptcha's key that allow you to use it's API Service. required Returns: Type Description BotAntiCaptchaPlugin self (allows method chaining).","title":"auth()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.report","text":"Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotAntiCaptchaPlugin self, allowing method chaining","title":"report()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.solve_fun","text":"Solves a FunCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution.","title":"solve_fun()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.solve_re","text":"Solves a ReCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution.","title":"solve_re()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.solve_text","text":"Solves a Text Captcha. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image or a path to an image file required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters.","title":"solve_text()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin","text":"","title":"BotDeathByCaptchaPlugin"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.__init__","text":"Provides an easy way to solve captcha's using Death By Captcha's API. Parameters: Name Type Description Default username str Your Death By Captcha login. required password str Your Death By Captcha password. required","title":"__init__()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.auth","text":"Updates the username and password for this object. This method does NOT need to be used if you have provided the correct login/password in this class' constructor. Parameters: Name Type Description Default username str Your Death By Captcha username. required password str Your Death By Captcha password. required Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining)","title":"auth()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.report","text":"Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining)","title":"report()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.solve","text":"Solves a captcha of any supported type. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image object or a path to an image file. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters.","title":"solve()"},{"location":"botcity-cloudvision-plugin-python/","text":"Welcome Welcome to BotCity's CloudVision Plugin. Installation Latest release Using PyPI pip install botcity-cloudvision-plugin Attention: This package also depends on a non-Python dependency, Poppler . You can find instructions on how to install Poppler for your favorite OS below. Installing Poppler Poppler is a PDF rendering library based on the xpdf. Here is how to install Poppler for Windows, Linux and MacOS. Windows Download the latest library from this website . After downloading Poppler, we need to extract to the convenient location generally under C drive. In my case, the Poppler library bin directory is C:\\poppler-21.11.0\\Library\\bin . Now you need to add this directory ( C:\\poppler-21.11.0\\Library\\bin ) to your environment variable Path. If you have questions on how to add a directory to your Path environment variable click here . You are now all set! Linux apt install poppler-utils MacOS For MacOS please follow the instructions on how to install Poppler available here . Alternatively, if you are using Anaconda you can install from your favorite channel with: conda install poppler","title":"Home"},{"location":"botcity-cloudvision-plugin-python/#welcome","text":"Welcome to BotCity's CloudVision Plugin.","title":"Welcome"},{"location":"botcity-cloudvision-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-cloudvision-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-cloudvision-plugin-python/#using-pypi","text":"pip install botcity-cloudvision-plugin Attention: This package also depends on a non-Python dependency, Poppler . You can find instructions on how to install Poppler for your favorite OS below.","title":"Using PyPI"},{"location":"botcity-cloudvision-plugin-python/#installing-poppler","text":"Poppler is a PDF rendering library based on the xpdf. Here is how to install Poppler for Windows, Linux and MacOS.","title":"Installing Poppler"},{"location":"botcity-cloudvision-plugin-python/#windows","text":"Download the latest library from this website . After downloading Poppler, we need to extract to the convenient location generally under C drive. In my case, the Poppler library bin directory is C:\\poppler-21.11.0\\Library\\bin . Now you need to add this directory ( C:\\poppler-21.11.0\\Library\\bin ) to your environment variable Path. If you have questions on how to add a directory to your Path environment variable click here . You are now all set!","title":"Windows"},{"location":"botcity-cloudvision-plugin-python/#linux","text":"apt install poppler-utils","title":"Linux"},{"location":"botcity-cloudvision-plugin-python/#macos","text":"For MacOS please follow the instructions on how to install Poppler available here . Alternatively, if you are using Anaconda you can install from your favorite channel with: conda install poppler","title":"MacOS"},{"location":"botcity-cloudvision-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.cloudvision import BotCloudVisionPlugin As a demonstration of the library, let's build a simple example together that will parse the text from the following image: Click here to Download Step 1 of Example To make the example we will instantiate the plugin and setup our Google Cloud Vision service account key. If you don't have one yet, please refer to the Google Cloud website on how to setup the Vision API and create your key. # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" ) Step 2 of Example Now let's read the text from the image. # Read the text from the image cloudvision . read ( \"otter_crossing.jpg\" ) # Print the text from the image print ( cloudvision . full_text ()) The output should look like this: CAUTION Otters crossing for next 6 miles Complete code Let's take a look into the complete code: # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" ) # Read the text from the image cloudvision . read ( \"otter_crossing.jpg\" ) # Print the text from the image print ( cloudvision . full_text ()) Pro Tip This plugin allow you to use method chaining so the code above could be written as: text = BotCloudVisionPlugin () \\ . credentials ( \"<path_to_my>/credentials.json\" ) \\ . read ( \"otter_crossing.jpg\" ) \\ . full_text () # Print the text from the image print ( text ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-cloudvision-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.cloudvision import BotCloudVisionPlugin As a demonstration of the library, let's build a simple example together that will parse the text from the following image: Click here to Download","title":"Getting Started"},{"location":"botcity-cloudvision-plugin-python/intro/#step-1-of-example","text":"To make the example we will instantiate the plugin and setup our Google Cloud Vision service account key. If you don't have one yet, please refer to the Google Cloud website on how to setup the Vision API and create your key. # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" )","title":"Step 1 of Example"},{"location":"botcity-cloudvision-plugin-python/intro/#step-2-of-example","text":"Now let's read the text from the image. # Read the text from the image cloudvision . read ( \"otter_crossing.jpg\" ) # Print the text from the image print ( cloudvision . full_text ()) The output should look like this: CAUTION Otters crossing for next 6 miles","title":"Step 2 of Example"},{"location":"botcity-cloudvision-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" ) # Read the text from the image cloudvision . read ( \"otter_crossing.jpg\" ) # Print the text from the image print ( cloudvision . full_text ())","title":"Complete code"},{"location":"botcity-cloudvision-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: text = BotCloudVisionPlugin () \\ . credentials ( \"<path_to_my>/credentials.json\" ) \\ . read ( \"otter_crossing.jpg\" ) \\ . full_text () # Print the text from the image print ( text )","title":"Pro Tip"},{"location":"botcity-cloudvision-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-cloudvision-plugin-python/api/plugin/","text":"botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin __init__ ( self ) special BotCloudVisionPlugin credentials ( self , credentials ) The Google Cloud Vision JSON credential file path. Parameters: Name Type Description Default credentials str Path to the JSON file. required entries ( self ) Get the list of entries after reading the file. Each element contains a list of values in which are: text , x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 and page . Returns: Type Description List[List] List of entries. full_text ( self ) Get the full text from the image. Returns: Type Description str The full text. read ( self , filepath , raise_on_error = False ) Read the file and set the entries list. Parameters: Name Type Description Default filepath str The file path for the image or PDF to be read. required raise_on_error bool Whether or not to raise an exception if it fails. False Exceptions: Type Description ValueError If file is not an image or PDF. render_rate ( self ) The render resolution rate Returns: Type Description int resolution rate reset_case ( self ) Reset the configuration for upper/lower case. set_render_rate ( self , rate ) Sets the render resolution rate. Parameters: Name Type Description Default rate int resolution rate required set_threshold ( self , threshold ) Set the threshold level to be applied to the image before parsing. Parameters: Name Type Description Default threshold int Threshold value. Use None for no threshold. required threshold ( self ) The threshold to be applied before parsing the image. Returns: Type Description int Threshold value. By default it is None which means no threshold. to_lower_case ( self ) Convert the text to lower case when processing the file. to_upper_case ( self ) Convert the text to upper case when processing the file.","title":"Plugin"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin","text":"","title":"BotCloudVisionPlugin"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.__init__","text":"BotCloudVisionPlugin","title":"__init__()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.credentials","text":"The Google Cloud Vision JSON credential file path. Parameters: Name Type Description Default credentials str Path to the JSON file. required","title":"credentials()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.entries","text":"Get the list of entries after reading the file. Each element contains a list of values in which are: text , x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 and page . Returns: Type Description List[List] List of entries.","title":"entries()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.full_text","text":"Get the full text from the image. Returns: Type Description str The full text.","title":"full_text()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.read","text":"Read the file and set the entries list. Parameters: Name Type Description Default filepath str The file path for the image or PDF to be read. required raise_on_error bool Whether or not to raise an exception if it fails. False Exceptions: Type Description ValueError If file is not an image or PDF.","title":"read()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.render_rate","text":"The render resolution rate Returns: Type Description int resolution rate","title":"render_rate()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.reset_case","text":"Reset the configuration for upper/lower case.","title":"reset_case()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.set_render_rate","text":"Sets the render resolution rate. Parameters: Name Type Description Default rate int resolution rate required","title":"set_render_rate()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.set_threshold","text":"Set the threshold level to be applied to the image before parsing. Parameters: Name Type Description Default threshold int Threshold value. Use None for no threshold. required","title":"set_threshold()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.threshold","text":"The threshold to be applied before parsing the image. Returns: Type Description int Threshold value. By default it is None which means no threshold.","title":"threshold()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.to_lower_case","text":"Convert the text to lower case when processing the file.","title":"to_lower_case()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.to_upper_case","text":"Convert the text to upper case when processing the file.","title":"to_upper_case()"},{"location":"botcity-crawler-plugin-python/","text":"Welcome Welcome to BotCity's Crawler Plugin. Installation Latest release Using PyPI pip install botcity-crawler-plugin Linux System Dependencies If you intend to use this package with Linux and JavaScript there are system dependencies that are required to be installed. For Debian/Ubuntu please run the following command: apt install libxcomposite1 libxcursor1 libxdamage1 \\ libxfixes3 libxi6 libxtst6 libnss3 libnspr4 libcups2 \\ libdbus-1-3 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 \\ libgtk-3-0 libx11-xcb1 --no-install-recommends Please make sure to install the equivalent libraries for your Linux distribution.","title":"Home"},{"location":"botcity-crawler-plugin-python/#welcome","text":"Welcome to BotCity's Crawler Plugin.","title":"Welcome"},{"location":"botcity-crawler-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-crawler-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-crawler-plugin-python/#using-pypi","text":"pip install botcity-crawler-plugin","title":"Using PyPI"},{"location":"botcity-crawler-plugin-python/#linux-system-dependencies","text":"If you intend to use this package with Linux and JavaScript there are system dependencies that are required to be installed. For Debian/Ubuntu please run the following command: apt install libxcomposite1 libxcursor1 libxdamage1 \\ libxfixes3 libxi6 libxtst6 libnss3 libnspr4 libcups2 \\ libdbus-1-3 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 \\ libgtk-3-0 libx11-xcb1 --no-install-recommends Please make sure to install the equivalent libraries for your Linux distribution.","title":"Linux System Dependencies"},{"location":"botcity-crawler-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.crawler import BotCrawlerPlugin As a demonstration of the library, let's build a simple example together that will make a request to BotCity's Youtube channel and fetch the number of subscribers. Making the request To make the request you must use the request method which takes as an argument a URL. # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url ) Locating the element Looking into the page source we can notice that the element holding the subscribers information has the attribute id as subscriber-count . Based on that we can use the get_element_by_id from the HTML object and finally read its value. Here is how we do it: # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value () Complete code Let's take a look into the complete code: # Import the plugin from botcity.plugins.crawler import BotCrawlerPlugin # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url ) # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value () Pro Tip This plugin allow you to use method chaining so the code above could be written as: from botcity.plugins.crawler import BotCrawlerPlugin url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" id = \"subscriber-count\" subscribers = BotCrawlerPlugin ( True ) . request ( url ) . get_element_by_id ( id ) . value () Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-crawler-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.crawler import BotCrawlerPlugin As a demonstration of the library, let's build a simple example together that will make a request to BotCity's Youtube channel and fetch the number of subscribers.","title":"Getting Started"},{"location":"botcity-crawler-plugin-python/intro/#making-the-request","text":"To make the request you must use the request method which takes as an argument a URL. # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url )","title":"Making the request"},{"location":"botcity-crawler-plugin-python/intro/#locating-the-element","text":"Looking into the page source we can notice that the element holding the subscribers information has the attribute id as subscriber-count . Based on that we can use the get_element_by_id from the HTML object and finally read its value. Here is how we do it: # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value ()","title":"Locating the element"},{"location":"botcity-crawler-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Import the plugin from botcity.plugins.crawler import BotCrawlerPlugin # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url ) # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value ()","title":"Complete code"},{"location":"botcity-crawler-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: from botcity.plugins.crawler import BotCrawlerPlugin url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" id = \"subscriber-count\" subscribers = BotCrawlerPlugin ( True ) . request ( url ) . get_element_by_id ( id ) . value ()","title":"Pro Tip"},{"location":"botcity-crawler-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-crawler-plugin-python/api/html/","text":"botcity.plugins.crawler.html.HTML __init__ ( self , html , javascript_enabled = False ) special HTML representation of a page. Parameters: Name Type Description Default html requests_html.HTML the page html object from requests_html . required javascript_enabled bool Whether or not JavaScript was enabled for this request. Defaults to False. False elements ( self ) Returns all child elements. Returns: Type Description List List of elements. execute_javascript ( self , code ) Executes the specified JavaScript code within the page. The usage would be similar to what can be achieved when executing JavaScript in the current page by entering \"javascript:...some JS code...\" in the URL field of a browser. If JavaScript was not enabled on the Plugin before the request, calls to this method will be ignored. Parameters: Name Type Description Default code str the JavaScript code to be executed. required get_attribute ( self , attribute ) Returns the value of the attribute in an element. Parameters: Name Type Description Default attribute str The attribute name of element. required Exceptions: Type Description RuntimeError If the element has no attributes. KeyError [description] Returns: Type Description object The attribute value. get_element_by_id ( self , id ) Searches the element within the document which matches the id. Parameters: Name Type Description Default id str Unique identifier of the element. required query_selector ( self , selectors , reset = False ) Searches the first element within the document which matches the specified group of selectors. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object query_selector_all ( self , selectors , index , reset = False ) Searches all elements within the document which matches the specified group of selectors and returns the specified index. Parameters: Name Type Description Default selectors str One or more selectors required index int The index of the element of the list required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object query_selector_all_size ( self , selectors , reset = False ) Searches all elements within the document which matches the specified group of selectors and return the number of elements. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description int number of elements query_selector_iter_all ( self , selectors , reset = False ) Searches all elements within the document which matches the specified group of selectors and iterate over the results setting the current element. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object reset ( self ) Reset the current element to the top of the page. value ( self ) Returns the value of an element. Returns: Type Description str The element value.","title":"HTML"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML","text":"","title":"HTML"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.__init__","text":"HTML representation of a page. Parameters: Name Type Description Default html requests_html.HTML the page html object from requests_html . required javascript_enabled bool Whether or not JavaScript was enabled for this request. Defaults to False. False","title":"__init__()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.elements","text":"Returns all child elements. Returns: Type Description List List of elements.","title":"elements()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.execute_javascript","text":"Executes the specified JavaScript code within the page. The usage would be similar to what can be achieved when executing JavaScript in the current page by entering \"javascript:...some JS code...\" in the URL field of a browser. If JavaScript was not enabled on the Plugin before the request, calls to this method will be ignored. Parameters: Name Type Description Default code str the JavaScript code to be executed. required","title":"execute_javascript()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.get_attribute","text":"Returns the value of the attribute in an element. Parameters: Name Type Description Default attribute str The attribute name of element. required Exceptions: Type Description RuntimeError If the element has no attributes. KeyError [description] Returns: Type Description object The attribute value.","title":"get_attribute()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.get_element_by_id","text":"Searches the element within the document which matches the id. Parameters: Name Type Description Default id str Unique identifier of the element. required","title":"get_element_by_id()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector","text":"Searches the first element within the document which matches the specified group of selectors. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object","title":"query_selector()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector_all","text":"Searches all elements within the document which matches the specified group of selectors and returns the specified index. Parameters: Name Type Description Default selectors str One or more selectors required index int The index of the element of the list required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object","title":"query_selector_all()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector_all_size","text":"Searches all elements within the document which matches the specified group of selectors and return the number of elements. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description int number of elements","title":"query_selector_all_size()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector_iter_all","text":"Searches all elements within the document which matches the specified group of selectors and iterate over the results setting the current element. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object","title":"query_selector_iter_all()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.reset","text":"Reset the current element to the top of the page.","title":"reset()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.value","text":"Returns the value of an element. Returns: Type Description str The element value.","title":"value()"},{"location":"botcity-crawler-plugin-python/api/plugin/","text":"botcity.plugins.crawler.plugin.BotCrawlerPlugin javascript_enabled : bool property writable Whether or not JavaScript should be enabled when making the request. __init__ ( self , javascript_enabled = False ) special BotCrawlerPlugin Parameters: Name Type Description Default javascript_enabled bool Whether or not JavaScript should be enabled when making requests. Defaults to False. False request ( self , url , wait_time = 0 ) Executes a request to the given URL Parameters: Name Type Description Default url str The desired URL. required wait_time int The number of milliseconds to wait after initial render. 0 Returns: Type Description HTML an HTML object which can be used to parse elements. See HTML","title":"Plugin"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin","text":"","title":"BotCrawlerPlugin"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin.javascript_enabled","text":"Whether or not JavaScript should be enabled when making the request.","title":"javascript_enabled"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin.__init__","text":"BotCrawlerPlugin Parameters: Name Type Description Default javascript_enabled bool Whether or not JavaScript should be enabled when making requests. Defaults to False. False","title":"__init__()"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin.request","text":"Executes a request to the given URL Parameters: Name Type Description Default url str The desired URL. required wait_time int The number of milliseconds to wait after initial render. 0 Returns: Type Description HTML an HTML object which can be used to parse elements. See HTML","title":"request()"},{"location":"botcity-csv-plugin-python/","text":"Welcome Welcome to BotCity's CSV Plugin. Installation Latest release Using PyPI pip install botcity-csv-plugin","title":"Home"},{"location":"botcity-csv-plugin-python/#welcome","text":"Welcome to BotCity's CSV Plugin.","title":"Welcome"},{"location":"botcity-csv-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-csv-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-csv-plugin-python/#using-pypi","text":"pip install botcity-csv-plugin","title":"Using PyPI"},{"location":"botcity-csv-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.csv import BotCSVPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin bot_csv = BotCSVPlugin () ... Step 2 of Example # Read from a CSV File, add a row, then sort it bot_csv . read ( 'read.csv' ) bot_csv . add_row ([ 0 , 22 ]) bot_csv . sort ([ 'H1' , 'H2' ], False ) # Print the result and save it to a CSV file print ( bot_csv . as_dict ) bot_csv . write ( 'write.csv' ) ... Complete code Let's take a look into the complete code: from botcity.plugins.csv import BotCSVPlugin # Reads from a CSV File, adds a row, then sorts it bot_csv = BotCSVPlugin () bot_csv . read ( 'read.csv' ) bot_csv . add_row ([ 0 , 22 ]) bot_csv . sort ([ 'H1' , 'H2' ], False ) # Prints the result and saves it to a CSV file print ( bot_csv . as_dict ) bot_csv . write ( 'write.csv' ) Pro Tip This plugin allow you to use method chaining so the code above could be written as: BotCSVPlugin () . read ( 'read.csv' ) . add_row ([ 0 , 22 ]) . sort ([ 'H1' , 'H2' ], False ) . write ( 'write.csv' ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-csv-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.csv import BotCSVPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-csv-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin bot_csv = BotCSVPlugin () ...","title":"Step 1 of Example"},{"location":"botcity-csv-plugin-python/intro/#step-2-of-example","text":"# Read from a CSV File, add a row, then sort it bot_csv . read ( 'read.csv' ) bot_csv . add_row ([ 0 , 22 ]) bot_csv . sort ([ 'H1' , 'H2' ], False ) # Print the result and save it to a CSV file print ( bot_csv . as_dict ) bot_csv . write ( 'write.csv' ) ...","title":"Step 2 of Example"},{"location":"botcity-csv-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.plugins.csv import BotCSVPlugin # Reads from a CSV File, adds a row, then sorts it bot_csv = BotCSVPlugin () bot_csv . read ( 'read.csv' ) bot_csv . add_row ([ 0 , 22 ]) bot_csv . sort ([ 'H1' , 'H2' ], False ) # Prints the result and saves it to a CSV file print ( bot_csv . as_dict ) bot_csv . write ( 'write.csv' )","title":"Complete code"},{"location":"botcity-csv-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: BotCSVPlugin () . read ( 'read.csv' ) . add_row ([ 0 , 22 ]) . sort ([ 'H1' , 'H2' ], False ) . write ( 'write.csv' )","title":"Pro Tip"},{"location":"botcity-csv-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-csv-plugin-python/api/plugin/","text":"botcity.plugins.csv.plugin.BotCSVPlugin header : List [ str ] property writable Returns this CSV's header. Returns: Type Description List[str] The header elements in str format. __init__ ( self , has_header = True , separator = ',' ) special This class stores the data in a CSV-like format. Parameters: Name Type Description Default has_header bool True if the CSV's first row is supposed to be the header. Defaults to True. True separator str The expected separator between each field. ',' Attributes: Name Type Description has_header bool, Optional A list representing the header of the CSV, if it has one. Defaults to True. separator str, Optional The expected separator between each field. Defaults to ','. add_column ( self , column_name = None , column = None ) Adds a new column to the CSV. Parameters: Name Type Description Default column_name str, Optional The new column's name. If None is provided, the new name will be the numeric index of the new column. None column List[object] A list of csv elements. The number of elements must match the number of rows already in the list. None Returns: Type Description BotCSVPlugin self (allows Method Chaining). add_columns ( self , columns ) Adds new columns to the CSV. Parameters: Name Type Description Default columns List[List[object]] Either a dict of columns, whose keys are the new column names and the values are lists of CSV elements, or just a list of CSV elements, in which case the column name will be it's numeric index. The number of elements of each column must match the number of rows already in the list. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). add_row ( self , row ) Adds a new row to the bottom of the CSV. If the input contains a new column, then a new column will be created in the CSV as well, with blank fields for the previously inserted lines. Parameters: Name Type Description Default row Union(List[object] or Dict[str, object] A list of CSV elements in string format, or a dict that has the column names as its keys. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). add_rows ( self , rows ) Adds new rows to the CSV. If the input contains a new column, then a new column will be created in the CSV as well, with blank fields for the previously inserted lines. Parameters: Name Type Description Default rows List[Union[List[object], Dict[str, object]]] A list of rows. Each row is either a list of csv elements, or a dict whose keys are the header, and the values are the new CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). as_dataframe ( self ) Returns the contents of this CSV in a Pandas DataFrame format. Returns: Type Description pandas.DataFrame A Pandas DataFrame object. as_dict ( self ) Returns the contents of this CSV in a list of dicts format. Returns: Type Description List[Dict[str, object]] A list of rows. Each row is a dict. as_list ( self , include_header = False ) Returns the contents of this CSV in a list of lists format. Nan values will be replaced with empty strings. Parameters: Name Type Description Default include_header bool, Optional If True, the first inner-list will receive the CSV's header. Defaults to False. False Returns: Type Description List[List[object]] A list of rows. Each is a list of row elements. clear ( self ) Clears all the rows of the CSV, but the header remains. Returns: Type Description BotCSVPlugin self (allows Method Chaining) get_column ( self , column ) Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original CSV. Parameters: Name Type Description Default column Union[str, int] Either the column's name or it's 0-indexed number. required Returns: Type Description List[object] The values of all entries within the column. get_entry ( self , column , row ) Returns the value of a single entry of a column. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required row int The 0-indexed row number. required Returns: Type Description object The entry's value. get_row ( self , row ) Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original CSV. Parameters: Name Type Description Default row int The 0-indexed row number. required Returns: Type Description List[object] The values of all entries within the row. read ( self , file_or_path ) Reads a CSV file using the delimiter and the has_header attributes of this class. Parameters: Name Type Description Default file_or_path Either a buffered CSV file or a path to it. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). remove_column ( self , column ) Removes single column from the CSV. If the CSV has a header, this column will be removed from there as well. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). remove_columns ( self , columns ) Removes a list of columns from the CSV. If the CSV has a header, this column will be removed from there as well. Parameters: Name Type Description Default columns List[Union[str, int]] A list of column names or their 0-indexed numbers. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). remove_row ( self , row ) Removes a single row from the CSV. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 0-indexed number of the row to be removed. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). remove_rows ( self , rows ) Removes rows from the CSV. Keep in mind that each row removed will cause the rows below it to be moved up after they are all removed. Parameters: Name Type Description Default rows List[int] A list of the 0-indexed numbers of the rows to be removed. required Returns: Type Description BotCSVPlugin self (allows Method Chaining) set_column ( self , column , values ) Replaces the values of an entire column of the CSV. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required values List[object] A list of CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining) set_entry ( self , column , row , value ) Replaces the value of a single entry of a given column. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-index number. required row int The entry's 0-indexed row number. required value object The new value of the entry. required Returns: Type Description BotCSVPlugin self (allows Method Chaining) set_row ( self , row , values ) Replaces the values of an entire row of the CSV. Parameters: Name Type Description Default row int The row's 0-indexed number. required values Union[List[object], Dict[str, object]] Either a list of CSV elements, or a dict whose keys are the header, and the values are the new CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining) sort ( self , by_columns , ascending = True ) Sorts the CSV rows using the first column of the by_columns parameter as a reference. In case of a tie, the second column provided is used, and so on. Parameters: Name Type Description Default by_columns Union[int, str, List[Union[int, str]]] Either a column name or its 0-indexed number; or a list of those. required ascending bool, Optional Set to False if you want to use descending order. Defaults to True. True Returns: Type Description BotCSVPlugin self (allows Method Chaining) write ( self , file_or_path ) Writes this class's CSV content to a file using it's delimiter and has_header attributes. Parameters: Name Type Description Default file_or_path Either a buffered CSV file or a path to it. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"Plugin"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin","text":"","title":"BotCSVPlugin"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.header","text":"Returns this CSV's header. Returns: Type Description List[str] The header elements in str format.","title":"header"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.__init__","text":"This class stores the data in a CSV-like format. Parameters: Name Type Description Default has_header bool True if the CSV's first row is supposed to be the header. Defaults to True. True separator str The expected separator between each field. ',' Attributes: Name Type Description has_header bool, Optional A list representing the header of the CSV, if it has one. Defaults to True. separator str, Optional The expected separator between each field. Defaults to ','.","title":"__init__()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.add_column","text":"Adds a new column to the CSV. Parameters: Name Type Description Default column_name str, Optional The new column's name. If None is provided, the new name will be the numeric index of the new column. None column List[object] A list of csv elements. The number of elements must match the number of rows already in the list. None Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"add_column()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.add_columns","text":"Adds new columns to the CSV. Parameters: Name Type Description Default columns List[List[object]] Either a dict of columns, whose keys are the new column names and the values are lists of CSV elements, or just a list of CSV elements, in which case the column name will be it's numeric index. The number of elements of each column must match the number of rows already in the list. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"add_columns()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.add_row","text":"Adds a new row to the bottom of the CSV. If the input contains a new column, then a new column will be created in the CSV as well, with blank fields for the previously inserted lines. Parameters: Name Type Description Default row Union(List[object] or Dict[str, object] A list of CSV elements in string format, or a dict that has the column names as its keys. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"add_row()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.add_rows","text":"Adds new rows to the CSV. If the input contains a new column, then a new column will be created in the CSV as well, with blank fields for the previously inserted lines. Parameters: Name Type Description Default rows List[Union[List[object], Dict[str, object]]] A list of rows. Each row is either a list of csv elements, or a dict whose keys are the header, and the values are the new CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"add_rows()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.as_dataframe","text":"Returns the contents of this CSV in a Pandas DataFrame format. Returns: Type Description pandas.DataFrame A Pandas DataFrame object.","title":"as_dataframe()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.as_dict","text":"Returns the contents of this CSV in a list of dicts format. Returns: Type Description List[Dict[str, object]] A list of rows. Each row is a dict.","title":"as_dict()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.as_list","text":"Returns the contents of this CSV in a list of lists format. Nan values will be replaced with empty strings. Parameters: Name Type Description Default include_header bool, Optional If True, the first inner-list will receive the CSV's header. Defaults to False. False Returns: Type Description List[List[object]] A list of rows. Each is a list of row elements.","title":"as_list()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.clear","text":"Clears all the rows of the CSV, but the header remains. Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"clear()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.get_column","text":"Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original CSV. Parameters: Name Type Description Default column Union[str, int] Either the column's name or it's 0-indexed number. required Returns: Type Description List[object] The values of all entries within the column.","title":"get_column()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.get_entry","text":"Returns the value of a single entry of a column. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required row int The 0-indexed row number. required Returns: Type Description object The entry's value.","title":"get_entry()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.get_row","text":"Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original CSV. Parameters: Name Type Description Default row int The 0-indexed row number. required Returns: Type Description List[object] The values of all entries within the row.","title":"get_row()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.read","text":"Reads a CSV file using the delimiter and the has_header attributes of this class. Parameters: Name Type Description Default file_or_path Either a buffered CSV file or a path to it. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"read()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.remove_column","text":"Removes single column from the CSV. If the CSV has a header, this column will be removed from there as well. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"remove_column()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.remove_columns","text":"Removes a list of columns from the CSV. If the CSV has a header, this column will be removed from there as well. Parameters: Name Type Description Default columns List[Union[str, int]] A list of column names or their 0-indexed numbers. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"remove_columns()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.remove_row","text":"Removes a single row from the CSV. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 0-indexed number of the row to be removed. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"remove_row()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.remove_rows","text":"Removes rows from the CSV. Keep in mind that each row removed will cause the rows below it to be moved up after they are all removed. Parameters: Name Type Description Default rows List[int] A list of the 0-indexed numbers of the rows to be removed. required Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"remove_rows()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.set_column","text":"Replaces the values of an entire column of the CSV. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required values List[object] A list of CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"set_column()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.set_entry","text":"Replaces the value of a single entry of a given column. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-index number. required row int The entry's 0-indexed row number. required value object The new value of the entry. required Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"set_entry()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.set_row","text":"Replaces the values of an entire row of the CSV. Parameters: Name Type Description Default row int The row's 0-indexed number. required values Union[List[object], Dict[str, object]] Either a list of CSV elements, or a dict whose keys are the header, and the values are the new CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"set_row()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.sort","text":"Sorts the CSV rows using the first column of the by_columns parameter as a reference. In case of a tie, the second column provided is used, and so on. Parameters: Name Type Description Default by_columns Union[int, str, List[Union[int, str]]] Either a column name or its 0-indexed number; or a list of those. required ascending bool, Optional Set to False if you want to use descending order. Defaults to True. True Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"sort()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.write","text":"Writes this class's CSV content to a file using it's delimiter and has_header attributes. Parameters: Name Type Description Default file_or_path Either a buffered CSV file or a path to it. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"write()"},{"location":"botcity-discord-plugin-python/","text":"Welcome Welcome to BotCity's Discord Plugin. Installation Latest release Using PyPI pip install botcity-discord-plugin","title":"Home"},{"location":"botcity-discord-plugin-python/#welcome","text":"Welcome to BotCity's Discord Plugin.","title":"Welcome"},{"location":"botcity-discord-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-discord-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-discord-plugin-python/#using-pypi","text":"pip install botcity-discord-plugin","title":"Using PyPI"},{"location":"botcity-discord-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.discord import BotDiscordPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Setting up To use this pugin you have to create a webhook. Look this article to learn how to create a new webhook. Send message from botcity.plugins.discord import BotDiscordPlugin url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) res = ds . send_message ( content = 'Hello!' ) print ( res ) Result Send embedded content from botcity.plugins.discord import BotDiscordPlugin , EmbeddedMessage , Author , Footer , Field , Color msg = EmbeddedMessage ( title = 'Title Embedded' , description = 'Long Description.' , color = Color . ORANGE ) msg . author = Author ( name = 'Botcity' , url = 'https://github.com/botcity-dev' , icon_url = 'https://avatars.githubusercontent.com/u/72993825?s=200&v=4' ) msg . footer = Footer ( text = 'Footer text example' , icon_url = 'https://cdn3.iconfinder.com/data/icons/logos-and-brands-adobe/512/267_Python-512.png' # python icon ) msg . fields = [ Field ( name = 'Field 1' , value = 'Value 1' ), Field ( name = 'Field 2' , value = 'Value 2' )] msg . thumbnail = 'https://pbs.twimg.com/profile_images/1374747222353575944/7kS6IhZb_400x400.jpg' # botcity icon msg . image = 'https://cdn-icons-png.flaticon.com/512/2111/2111370.png' # discord logo url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) res = ds . send_embedded_message ( msg ) Result Edit message from botcity.plugins.discord import BotDiscordPlugin url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) first_message_response = ds . send_message ( content = 'Hello!' ) updated_message_response = ds . edit_message ( first_message_response , 'New content.' ) print ( updated_message_response ) Result File upload from botcity.plugins.discord import BotDiscordPlugin url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) res = ds . send_file ( files = [ '<path-to-image>' ]) print ( res ) Result Delete message/file Info The delete_message() method takes the response from an action. import time from botcity.plugins.discord import BotDiscordPlugin url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) res = ds . send_message ( content = '...' ) # res = ds.send_message(...) # res = ds.edit_message(...) # res = ds.send_embedded_message(...) time . sleep ( 5 ) ds . delete_message ( res ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-discord-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.discord import BotDiscordPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-discord-plugin-python/intro/#setting-up","text":"To use this pugin you have to create a webhook. Look this article to learn how to create a new webhook.","title":"Setting up"},{"location":"botcity-discord-plugin-python/intro/#send-message","text":"from botcity.plugins.discord import BotDiscordPlugin url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) res = ds . send_message ( content = 'Hello!' ) print ( res )","title":"Send message"},{"location":"botcity-discord-plugin-python/intro/#result","text":"","title":"Result"},{"location":"botcity-discord-plugin-python/intro/#send-embedded-content","text":"from botcity.plugins.discord import BotDiscordPlugin , EmbeddedMessage , Author , Footer , Field , Color msg = EmbeddedMessage ( title = 'Title Embedded' , description = 'Long Description.' , color = Color . ORANGE ) msg . author = Author ( name = 'Botcity' , url = 'https://github.com/botcity-dev' , icon_url = 'https://avatars.githubusercontent.com/u/72993825?s=200&v=4' ) msg . footer = Footer ( text = 'Footer text example' , icon_url = 'https://cdn3.iconfinder.com/data/icons/logos-and-brands-adobe/512/267_Python-512.png' # python icon ) msg . fields = [ Field ( name = 'Field 1' , value = 'Value 1' ), Field ( name = 'Field 2' , value = 'Value 2' )] msg . thumbnail = 'https://pbs.twimg.com/profile_images/1374747222353575944/7kS6IhZb_400x400.jpg' # botcity icon msg . image = 'https://cdn-icons-png.flaticon.com/512/2111/2111370.png' # discord logo url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) res = ds . send_embedded_message ( msg )","title":"Send embedded content"},{"location":"botcity-discord-plugin-python/intro/#result_1","text":"","title":"Result"},{"location":"botcity-discord-plugin-python/intro/#edit-message","text":"from botcity.plugins.discord import BotDiscordPlugin url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) first_message_response = ds . send_message ( content = 'Hello!' ) updated_message_response = ds . edit_message ( first_message_response , 'New content.' ) print ( updated_message_response )","title":"Edit message"},{"location":"botcity-discord-plugin-python/intro/#result_2","text":"","title":"Result"},{"location":"botcity-discord-plugin-python/intro/#file-upload","text":"from botcity.plugins.discord import BotDiscordPlugin url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) res = ds . send_file ( files = [ '<path-to-image>' ]) print ( res )","title":"File upload"},{"location":"botcity-discord-plugin-python/intro/#result_3","text":"","title":"Result"},{"location":"botcity-discord-plugin-python/intro/#delete-messagefile","text":"Info The delete_message() method takes the response from an action. import time from botcity.plugins.discord import BotDiscordPlugin url = 'https://discord.com/api/webhooks/95811659/Y6uu4DOUH' ds = BotDiscordPlugin ( urls = url , username = \"Bot Discord Name\" ) res = ds . send_message ( content = '...' ) # res = ds.send_message(...) # res = ds.edit_message(...) # res = ds.send_embedded_message(...) time . sleep ( 5 ) ds . delete_message ( res )","title":"Delete message/file"},{"location":"botcity-discord-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-discord-plugin-python/api/models/","text":"botcity.plugins.discord.models.Color ( Enum ) The color type. Attributes: Name Type Description RED str The red color in hexadecimal. GRAY str The gray color in hexadecimal. BLUE str The blue color in hexadecimal. GREEN str The green color in hexadecimal. WHITE str The white color in hexadecimal. BLACK str The black color in hexadecimal. BROWN str The brown color in hexadecimal. YELLOW str The yellow color in hexadecimal. PURPLE str The purple color in hexadecimal. ORANGE str The orange color in hexadecimal. botcity.plugins.discord.models.Author dataclass Author info. Attributes: Name Type Description url str Profile url. name str Author name. icon_url str URL to author profile picture. botcity.plugins.discord.models.Footer dataclass Footer info. Attributes: Name Type Description text str Footer text. icon_url str URL to footer icon. botcity.plugins.discord.models.Field dataclass Field info. Attributes: Name Type Description name str Name of field. value str Value of field. inline bool True if the embed fields are placed side by side, False the field are placed in new line. botcity.plugins.discord.models.EmbeddedMessage dataclass The embedded message. Attributes: Name Type Description title str Title of embed. description str Description body of embed. color Union[str, botcity.plugins.discord.models.Color] Color code of the embed as hexadecimal string or Color enum. image str Your image url here. author Author Author information. footer Footer Footer texts. thumbnail str Your thumbnail url here. fields List[botcity.plugins.discord.models.Field] List of Field information. timestamp float Timestamp of embed content.","title":"Models"},{"location":"botcity-discord-plugin-python/api/models/#botcity.plugins.discord.models.Color","text":"The color type. Attributes: Name Type Description RED str The red color in hexadecimal. GRAY str The gray color in hexadecimal. BLUE str The blue color in hexadecimal. GREEN str The green color in hexadecimal. WHITE str The white color in hexadecimal. BLACK str The black color in hexadecimal. BROWN str The brown color in hexadecimal. YELLOW str The yellow color in hexadecimal. PURPLE str The purple color in hexadecimal. ORANGE str The orange color in hexadecimal.","title":"Color"},{"location":"botcity-discord-plugin-python/api/models/#botcity.plugins.discord.models.Author","text":"Author info. Attributes: Name Type Description url str Profile url. name str Author name. icon_url str URL to author profile picture.","title":"Author"},{"location":"botcity-discord-plugin-python/api/models/#botcity.plugins.discord.models.Footer","text":"Footer info. Attributes: Name Type Description text str Footer text. icon_url str URL to footer icon.","title":"Footer"},{"location":"botcity-discord-plugin-python/api/models/#botcity.plugins.discord.models.Field","text":"Field info. Attributes: Name Type Description name str Name of field. value str Value of field. inline bool True if the embed fields are placed side by side, False the field are placed in new line.","title":"Field"},{"location":"botcity-discord-plugin-python/api/models/#botcity.plugins.discord.models.EmbeddedMessage","text":"The embedded message. Attributes: Name Type Description title str Title of embed. description str Description body of embed. color Union[str, botcity.plugins.discord.models.Color] Color code of the embed as hexadecimal string or Color enum. image str Your image url here. author Author Author information. footer Footer Footer texts. thumbnail str Your thumbnail url here. fields List[botcity.plugins.discord.models.Field] List of Field information. timestamp float Timestamp of embed content.","title":"EmbeddedMessage"},{"location":"botcity-discord-plugin-python/api/plugin/","text":"botcity.plugins.discord.plugin.BotDiscordPlugin webhook : DiscordWebhook property readonly Returns the discord-webhook instance. Returns: Type Description discord-webhook The discord-webhook instance. __init__ ( self , urls , username = None , ** kwargs ) special BotDiscordPlugin Parameters: Name Type Description Default urls list or str Webhook urls. required username str The bot username None delete_message ( self , message_response , ** kwargs ) Deletes the message based on the response passed as argument. Parameters: Name Type Description Default message_response requests.Response or list webhook.execute() response required Returns: Type Description response Webhook response. edit_message ( self , message_response , new_content_message , ** kwargs ) Edits the message based on the response passed as argument. Parameters: Name Type Description Default message_response requests.Response or list webhook.execute() response required new_content_message str The new message content. required Returns: Type Description response Webhook response. send_embedded_message ( self , message , ** kwargs ) Discord Embed Message. Parameters: Name Type Description Default message EmbeddedMessage The message content. See EmbeddedMessage required Returns: Type Description response Webhook response. send_file ( self , files , ** kwargs ) Upload file to the webhook. Parameters: Name Type Description Default files list The file paths. required Returns: Type Description response Webhook response. send_message ( self , content , rate_limit_retry = False , allowed_mentions = None , ** kwargs ) Sends a simple message. Parameters: Name Type Description Default content str The message content. required rate_limit_retry bool if rate_limit_retry is True then in the event that you are being rate limited by Discord your webhook will automatically be sent once the rate limit has been lifted False allowed_mentions list The list of users to ping. None Returns: Type Description response Webhook response.","title":"Plugin"},{"location":"botcity-discord-plugin-python/api/plugin/#botcity.plugins.discord.plugin.BotDiscordPlugin","text":"","title":"BotDiscordPlugin"},{"location":"botcity-discord-plugin-python/api/plugin/#botcity.plugins.discord.plugin.BotDiscordPlugin.webhook","text":"Returns the discord-webhook instance. Returns: Type Description discord-webhook The discord-webhook instance.","title":"webhook"},{"location":"botcity-discord-plugin-python/api/plugin/#botcity.plugins.discord.plugin.BotDiscordPlugin.__init__","text":"BotDiscordPlugin Parameters: Name Type Description Default urls list or str Webhook urls. required username str The bot username None","title":"__init__()"},{"location":"botcity-discord-plugin-python/api/plugin/#botcity.plugins.discord.plugin.BotDiscordPlugin.delete_message","text":"Deletes the message based on the response passed as argument. Parameters: Name Type Description Default message_response requests.Response or list webhook.execute() response required Returns: Type Description response Webhook response.","title":"delete_message()"},{"location":"botcity-discord-plugin-python/api/plugin/#botcity.plugins.discord.plugin.BotDiscordPlugin.edit_message","text":"Edits the message based on the response passed as argument. Parameters: Name Type Description Default message_response requests.Response or list webhook.execute() response required new_content_message str The new message content. required Returns: Type Description response Webhook response.","title":"edit_message()"},{"location":"botcity-discord-plugin-python/api/plugin/#botcity.plugins.discord.plugin.BotDiscordPlugin.send_embedded_message","text":"Discord Embed Message. Parameters: Name Type Description Default message EmbeddedMessage The message content. See EmbeddedMessage required Returns: Type Description response Webhook response.","title":"send_embedded_message()"},{"location":"botcity-discord-plugin-python/api/plugin/#botcity.plugins.discord.plugin.BotDiscordPlugin.send_file","text":"Upload file to the webhook. Parameters: Name Type Description Default files list The file paths. required Returns: Type Description response Webhook response.","title":"send_file()"},{"location":"botcity-discord-plugin-python/api/plugin/#botcity.plugins.discord.plugin.BotDiscordPlugin.send_message","text":"Sends a simple message. Parameters: Name Type Description Default content str The message content. required rate_limit_retry bool if rate_limit_retry is True then in the event that you are being rate limited by Discord your webhook will automatically be sent once the rate limit has been lifted False allowed_mentions list The list of users to ping. None Returns: Type Description response Webhook response.","title":"send_message()"},{"location":"botcity-email-plugin-python/","text":"Welcome Welcome to BotCity's Email Plugin. Installation Latest release Using PyPI pip install botcity-email-plugin","title":"Home"},{"location":"botcity-email-plugin-python/#welcome","text":"Welcome to BotCity's Email Plugin.","title":"Welcome"},{"location":"botcity-email-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-email-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-email-plugin-python/#using-pypi","text":"pip install botcity-email-plugin","title":"Using PyPI"},{"location":"botcity-email-plugin-python/filters/","text":"Using email attributes and filters As shown earlier in the Getting Started section, we can use different attributes in a filter when retrieving some emails. The search method A way to search for emails using filters is through the search method, in this case a complete string referring to the criterion to be used must be passed. This way makes it the user's responsibility to use the attributes and syntax correctly. ... # Searches for all emails sending by the address: joao@email.com messages = email . search ( 'FROM \"joao@email.com\"' ) ... The filter_by method In some cases, the way above can get a little confusing or generate doubts when building the filter string. Therefore, it is possible to use the filter_by method as a \"shortcut\" to make the filters. from botcity.plugins.email import MailFilters from datetime import datetime ... # You can view and select an attribute using: MailFilters.<ATTRIBUTE_NAME> # Searches for all emails sending by the address: joao@email.com messages = email . filter_by ( MailFilters . FROM , \"joao@email.com\" ) # Searches for all emails that have not yet been read messages = email . filter_by ( MailFilters . SEEN , False ) # Searches for all emails that were received on the date: 15/02/2022 messages = email . filter_by ( MailFilters . ON_DATE , datetime ( 2022 , 2 , 15 ) . date ()) ... In this case, it is not necessary to worry about the syntax of the filter string, just pass the desired attribute in the filter and the value that this attribute should have. The attributes that can be used are defined in the MailFilters class as a Enum, the following table shows the attributes that are defined and what types of values they can receive: Attribute Description Type of value SEEN with/without the Seen flag bool FROM address from email sender str TO address receiver as TO str CC address receiver as CC str BCC address receiver as BCC str SUBJECT the email subject str TEXT_CONTENT contains the text in the email body str ON_DATE email date is within specified date datetime.date DATE_GREATER_THAN email date is within or later than the specified date datetime.date DATE_LESS_THAN email date is earlier than the specified date datetime.date","title":"Filters"},{"location":"botcity-email-plugin-python/filters/#using-email-attributes-and-filters","text":"As shown earlier in the Getting Started section, we can use different attributes in a filter when retrieving some emails.","title":"Using email attributes and filters"},{"location":"botcity-email-plugin-python/filters/#the-search-method","text":"A way to search for emails using filters is through the search method, in this case a complete string referring to the criterion to be used must be passed. This way makes it the user's responsibility to use the attributes and syntax correctly. ... # Searches for all emails sending by the address: joao@email.com messages = email . search ( 'FROM \"joao@email.com\"' ) ...","title":"The search method"},{"location":"botcity-email-plugin-python/filters/#the-filter_by-method","text":"In some cases, the way above can get a little confusing or generate doubts when building the filter string. Therefore, it is possible to use the filter_by method as a \"shortcut\" to make the filters. from botcity.plugins.email import MailFilters from datetime import datetime ... # You can view and select an attribute using: MailFilters.<ATTRIBUTE_NAME> # Searches for all emails sending by the address: joao@email.com messages = email . filter_by ( MailFilters . FROM , \"joao@email.com\" ) # Searches for all emails that have not yet been read messages = email . filter_by ( MailFilters . SEEN , False ) # Searches for all emails that were received on the date: 15/02/2022 messages = email . filter_by ( MailFilters . ON_DATE , datetime ( 2022 , 2 , 15 ) . date ()) ... In this case, it is not necessary to worry about the syntax of the filter string, just pass the desired attribute in the filter and the value that this attribute should have. The attributes that can be used are defined in the MailFilters class as a Enum, the following table shows the attributes that are defined and what types of values they can receive: Attribute Description Type of value SEEN with/without the Seen flag bool FROM address from email sender str TO address receiver as TO str CC address receiver as CC str BCC address receiver as BCC str SUBJECT the email subject str TEXT_CONTENT contains the text in the email body str ON_DATE email date is within specified date datetime.date DATE_GREATER_THAN email date is within or later than the specified date datetime.date DATE_LESS_THAN email date is earlier than the specified date datetime.date","title":"The filter_by method"},{"location":"botcity-email-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.email import BotEmailPlugin As a demonstration of the library, let's build a simple example together that will do something cool. Warning In some cases, in order to be able to use the email functionalities through the IMAP and SMTP protocols, it is necessary to activate the permission to use both protocols in the account settings. In addition, it may also be necessary to enable the option for less secure applications. ( details here ) Note Please, avoid using words that contain accents or special characters when using the methods to filter and search for messages. This is a issue from the email servers, causing an exception when trying to search for emails using special characters in the filter. Setting up email account First, let's configure our email account and login with the credentials. # Instantiate the plugin email = BotEmailPlugin () # Configure IMAP with the gmail server email . configure_imap ( \"imap.gmail.com\" , 993 ) # Configure SMTP with the gmail server email . configure_smtp ( \"imap.gmail.com\" , 587 ) # Login with a valid email account email . login ( \"<USER_EMAIL>\" , \"<USER_PASSWORD>\" ) Info You can use different mail servers, the information about some servers can be seen on this page . Alternative setup You have the option to configure the servers that will be used the way you want. However, in some cases you can simply use the default settings of a known server and connect your account quickly. The configuration above could also look like this: from botcity.plugins.email import BotEmailPlugin , MailServers # Configure and log in on the same method, using the default Gmail server settings email = BotEmailPlugin . config_email ( MailServers . GMAIL , \"<USER_EMAIL>\" , \"<USER_PASSWORD>\" ) ... Fetching some email messages With the configured plugin instance, we will retrieve some email messages. # Search for all emails with subject: Test Message messages = email . search ( 'SUBJECT \"Test Message\"' ) # For each email found: prints the date, sender address and text content of the email for msg in messages : print ( \" \\n ---------------------------\" ) print ( \"Date => \" + msg . date_str ) print ( \"From => \" + msg . from_ ) print ( \"Msg => \" + msg . text ) Info In this example, the SUBJECT attribute was used as a filter, you can have an idea of the attributes that can be used in this link . Another way for fetching some email messages In the search method used above it is necessary to pass a string containing the filter that will be used. However, in some cases it can be confusing and it is difficult to build the filter correctly. Therefore, through the filter_by method it is possible to select the attribute that will be used in the filter and pass the value of this attribute. Making it much easier to build filters when retrieving messages. from botcity.plugins.email import MailFilters # Search for all emails with subject: Test Message messages = email . filter_by ( MailFilters . SUBJECT , \"Test Message\" ) ... Sending a new message from scratch After retrieving some emails, we will send a new message. # Defining the attributes that will compose the message to = [ \"<RECEIVER_ADDRESS_1>\" , \"<RECEIVER_ADDRESS_2>\" ] subject = \"Hello World\" body = \"Hello! This is a test message!\" files = [ \"my_file.txt\" ] # Sending the email message email . send_message ( subject , body , to , attachments = files ) # Close the conection with the IMAP and SMTP servers email . disconnect () Complete code Let's take a look into the complete code: # Import the plugin from botcity.plugins.email import BotEmailPlugin # Instantiate the plugin email = BotEmailPlugin () # Configure IMAP with the gmail server email . configure_imap ( \"imap.gmail.com\" , 993 ) # Configure SMTP with the gmail server email . configure_smtp ( \"imap.gmail.com\" , 587 ) # Login with a valid email account email . login ( \"<USER_EMAIL>\" , \"<USER_PASSWORD>\" ) # Search for all emails with subject: Test Message messages = email . search ( 'SUBJECT \"Test Message\"' ) # For each email found: prints the date, sender address and text content of the email for msg in messages : print ( \" \\n ---------------------------\" ) print ( \"Date => \" + msg . date_str ) print ( \"From => \" + msg . from_ ) print ( \"Msg => \" + msg . text ) # Defining the attributes that will compose the message to = [ \"<RECEIVER_ADDRESS_1>\" , \"<RECEIVER_ADDRESS_2>\" ] subject = \"Hello World\" body = \"Hello! This is a test message!\" files = [ \"my_file.txt\" ] # Sending the email message email . send_message ( subject , body , to , attachments = files ) # Close the conection with the IMAP and SMTP servers email . disconnect () Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-email-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.email import BotEmailPlugin As a demonstration of the library, let's build a simple example together that will do something cool. Warning In some cases, in order to be able to use the email functionalities through the IMAP and SMTP protocols, it is necessary to activate the permission to use both protocols in the account settings. In addition, it may also be necessary to enable the option for less secure applications. ( details here ) Note Please, avoid using words that contain accents or special characters when using the methods to filter and search for messages. This is a issue from the email servers, causing an exception when trying to search for emails using special characters in the filter.","title":"Getting Started"},{"location":"botcity-email-plugin-python/intro/#setting-up-email-account","text":"First, let's configure our email account and login with the credentials. # Instantiate the plugin email = BotEmailPlugin () # Configure IMAP with the gmail server email . configure_imap ( \"imap.gmail.com\" , 993 ) # Configure SMTP with the gmail server email . configure_smtp ( \"imap.gmail.com\" , 587 ) # Login with a valid email account email . login ( \"<USER_EMAIL>\" , \"<USER_PASSWORD>\" ) Info You can use different mail servers, the information about some servers can be seen on this page .","title":"Setting up email account"},{"location":"botcity-email-plugin-python/intro/#alternative-setup","text":"You have the option to configure the servers that will be used the way you want. However, in some cases you can simply use the default settings of a known server and connect your account quickly. The configuration above could also look like this: from botcity.plugins.email import BotEmailPlugin , MailServers # Configure and log in on the same method, using the default Gmail server settings email = BotEmailPlugin . config_email ( MailServers . GMAIL , \"<USER_EMAIL>\" , \"<USER_PASSWORD>\" ) ...","title":"Alternative setup"},{"location":"botcity-email-plugin-python/intro/#fetching-some-email-messages","text":"With the configured plugin instance, we will retrieve some email messages. # Search for all emails with subject: Test Message messages = email . search ( 'SUBJECT \"Test Message\"' ) # For each email found: prints the date, sender address and text content of the email for msg in messages : print ( \" \\n ---------------------------\" ) print ( \"Date => \" + msg . date_str ) print ( \"From => \" + msg . from_ ) print ( \"Msg => \" + msg . text ) Info In this example, the SUBJECT attribute was used as a filter, you can have an idea of the attributes that can be used in this link .","title":"Fetching some email messages"},{"location":"botcity-email-plugin-python/intro/#another-way-for-fetching-some-email-messages","text":"In the search method used above it is necessary to pass a string containing the filter that will be used. However, in some cases it can be confusing and it is difficult to build the filter correctly. Therefore, through the filter_by method it is possible to select the attribute that will be used in the filter and pass the value of this attribute. Making it much easier to build filters when retrieving messages. from botcity.plugins.email import MailFilters # Search for all emails with subject: Test Message messages = email . filter_by ( MailFilters . SUBJECT , \"Test Message\" ) ...","title":"Another way for fetching some email messages"},{"location":"botcity-email-plugin-python/intro/#sending-a-new-message-from-scratch","text":"After retrieving some emails, we will send a new message. # Defining the attributes that will compose the message to = [ \"<RECEIVER_ADDRESS_1>\" , \"<RECEIVER_ADDRESS_2>\" ] subject = \"Hello World\" body = \"Hello! This is a test message!\" files = [ \"my_file.txt\" ] # Sending the email message email . send_message ( subject , body , to , attachments = files ) # Close the conection with the IMAP and SMTP servers email . disconnect ()","title":"Sending a new message from scratch"},{"location":"botcity-email-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Import the plugin from botcity.plugins.email import BotEmailPlugin # Instantiate the plugin email = BotEmailPlugin () # Configure IMAP with the gmail server email . configure_imap ( \"imap.gmail.com\" , 993 ) # Configure SMTP with the gmail server email . configure_smtp ( \"imap.gmail.com\" , 587 ) # Login with a valid email account email . login ( \"<USER_EMAIL>\" , \"<USER_PASSWORD>\" ) # Search for all emails with subject: Test Message messages = email . search ( 'SUBJECT \"Test Message\"' ) # For each email found: prints the date, sender address and text content of the email for msg in messages : print ( \" \\n ---------------------------\" ) print ( \"Date => \" + msg . date_str ) print ( \"From => \" + msg . from_ ) print ( \"Msg => \" + msg . text ) # Defining the attributes that will compose the message to = [ \"<RECEIVER_ADDRESS_1>\" , \"<RECEIVER_ADDRESS_2>\" ] subject = \"Hello World\" body = \"Hello! This is a test message!\" files = [ \"my_file.txt\" ] # Sending the email message email . send_message ( subject , body , to , attachments = files ) # Close the conection with the IMAP and SMTP servers email . disconnect ()","title":"Complete code"},{"location":"botcity-email-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-email-plugin-python/api/plugin/","text":"botcity.plugins.email.plugin.BotEmailPlugin __init__ ( self ) special BotEmailPlugin config_email ( server , email , password ) classmethod Configures the IMAP and SMTP with the default configuration from the server and login with an email account. Parameters: Name Type Description Default server BotMailServers The server defined in the BotMailServers class that will be used in the configuration. required email str The user email. required password str The user password. required Returns: Type Description BotEmailPlugin A configured email instance. configure_imap ( self , host_address = 'imap.gmail.com' , port = 993 , tls_ssl = False ) Configures the IMAP server. Parameters: Name Type Description Default host_address str The email host address to use. Defaults to Gmail server. 'imap.gmail.com' port int The port that will be used by the IMAP server. Defaults to 993. 993 tls_ssl boolean Whether tls/ssl protocols will be used. False configure_smtp ( self , host_address = 'smtp.gmail.com' , port = 587 , tls_ssl = True ) Configures the SMTP server. Parameters: Name Type Description Default host_address str The email host address to use. Defaults to Gmail server. 'smtp.gmail.com' port int The port that will be used by the SMTP server. Defaults to 587. 587 tls_ssl boolean Whether tls/ssl protocols will be used. True copy ( self , message , folder ) Copy a email message from current folder to a destination folder. Parameters: Name Type Description Default message MailMessage The message to be copied. required folder str The name of the destination folder. required Note This method can only be used with an IMAP server configured. delete ( self , message ) Delete a email message from current folder. Parameters: Name Type Description Default message MailMessage The message to be deleted. required Note This method can only be used with an IMAP server configured. disconnect ( self ) Close the connection with de IMAP and SMTP server. download_attachments ( self , message , download_folder_path ) Download attachments from a given email message. Parameters: Name Type Description Default message MailMessage The message that contains the attachments. required download_folder_path str The path of the folder where the files will be saved. required filter_by ( self , filter , value , timeout = 0 ) Searches for all emails based on a specific filter. Parameters: Name Type Description Default filter BotMailFilters The attribute defined in the BotMailFilters class that will be used in the filter. required value The value of the selected filter. required timeout int Wait for a new message until this timeout. Defaults to 0 seconds (don't wait for new messages). 0 Returns: Type Description List[MailMessage] The list of emails found. Note This method can only be used with an IMAP server configured. forward ( self , msg , to_addrs , cc_addrs = None , bcc_addrs = None , include_attachments = True ) Forward a received email message. Parameters: Name Type Description Default msg Message The message to forward. required to_addrs List[str] The list of email addresses that will receive the message. required cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None include_attachments boolean Include attachments from the original message. True Note This method can only be used with an SMTP server configured. get_folders ( self ) Get a list of available email folders. Returns: Type Description List[str] The list containing the name of the folders. Note This method can only be used with an IMAP server configured. login ( self , email , password ) Log in with a valid email account. Parameters: Name Type Description Default email str The user email. required password str The user password. required mark_as_read ( self , msg ) Mark a received email message as read. Parameters: Name Type Description Default msg MailMessage The message to mark. required Note This method can only be used with an IMAP server configured. mark_as_unread ( self , msg ) Mark a received email message as unread. Parameters: Name Type Description Default msg MailMessage The message to mark. required Note This method can only be used with an IMAP server configured. move ( self , message , folder ) Move a email message from current folder to a destination folder. Parameters: Name Type Description Default message MailMessage The message to be moved. required folder str The name of the destination folder. required Note This method can only be used with an IMAP server configured. reply ( self , msg , text_content , attachments = None , to_addrs = None , cc_addrs = None , bcc_addrs = None ) Reply a received email message. Parameters: Name Type Description Default msg MailMessage The message to reply. required text_content str The content of the email body. required attachments List[str] The list with the paths of the files that will be sent as attachments. None to_addrs List[str] The list of email addresses that will receive the message. None cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None Note This method can only be used with an SMTP server configured. reply_to_all ( self , msg , text_content , attachments = None ) Replies to all email addresses included in the original message. Parameters: Name Type Description Default msg Message The message to reply. required text_content str The content of the email body. required attachments List[str] The list with the paths of the files that will be sent as attachments. None Note This method can only be used with an SMTP server configured. search ( self , criteria = 'ALL' , mark_read = False , timeout = 0 ) Searches for all emails based on criteria. See about search strings here: https://www.marshallsoft.com/ImapSearch.htm Parameters: Name Type Description Default criteria str The criteria to be used in the search. Defaults to 'ALL', in this case all emails in the folder will be returned. 'ALL' mark_read boolean Whether the email should be marked as read. Defaults to False. False timeout int Wait for a new message until this timeout. Defaults to 0 seconds (don't wait for new messages). 0 Returns: Type Description List[MailMessage] The list of emails found. Note This method can only be used with an IMAP server configured. select_folder ( self , folder = 'INBOX' ) Select the folder that will be used as a reference. Parameters: Name Type Description Default folder str The folder name. Defaults to INBOX, to see the available folders use get_folders(). 'INBOX' Note This method can only be used with an IMAP server configured. send_message ( self , subject , text_content , to_addrs , cc_addrs = None , bcc_addrs = None , attachments = None ) Send an email message through the SMTP protocol. Parameters: Name Type Description Default subject str The subject of the email. required text_content str The content of the email body. required to_addrs List[str] The list of email addresses that will receive the message. required cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None attachments List[str] The list with the paths of the files that will be sent as attachments. None Note This method can only be used with an SMTP server configured.","title":"Plugin"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin","text":"","title":"BotEmailPlugin"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.__init__","text":"BotEmailPlugin","title":"__init__()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.config_email","text":"Configures the IMAP and SMTP with the default configuration from the server and login with an email account. Parameters: Name Type Description Default server BotMailServers The server defined in the BotMailServers class that will be used in the configuration. required email str The user email. required password str The user password. required Returns: Type Description BotEmailPlugin A configured email instance.","title":"config_email()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.configure_imap","text":"Configures the IMAP server. Parameters: Name Type Description Default host_address str The email host address to use. Defaults to Gmail server. 'imap.gmail.com' port int The port that will be used by the IMAP server. Defaults to 993. 993 tls_ssl boolean Whether tls/ssl protocols will be used. False","title":"configure_imap()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.configure_smtp","text":"Configures the SMTP server. Parameters: Name Type Description Default host_address str The email host address to use. Defaults to Gmail server. 'smtp.gmail.com' port int The port that will be used by the SMTP server. Defaults to 587. 587 tls_ssl boolean Whether tls/ssl protocols will be used. True","title":"configure_smtp()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.copy","text":"Copy a email message from current folder to a destination folder. Parameters: Name Type Description Default message MailMessage The message to be copied. required folder str The name of the destination folder. required Note This method can only be used with an IMAP server configured.","title":"copy()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.delete","text":"Delete a email message from current folder. Parameters: Name Type Description Default message MailMessage The message to be deleted. required Note This method can only be used with an IMAP server configured.","title":"delete()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.disconnect","text":"Close the connection with de IMAP and SMTP server.","title":"disconnect()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.download_attachments","text":"Download attachments from a given email message. Parameters: Name Type Description Default message MailMessage The message that contains the attachments. required download_folder_path str The path of the folder where the files will be saved. required","title":"download_attachments()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.filter_by","text":"Searches for all emails based on a specific filter. Parameters: Name Type Description Default filter BotMailFilters The attribute defined in the BotMailFilters class that will be used in the filter. required value The value of the selected filter. required timeout int Wait for a new message until this timeout. Defaults to 0 seconds (don't wait for new messages). 0 Returns: Type Description List[MailMessage] The list of emails found. Note This method can only be used with an IMAP server configured.","title":"filter_by()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.forward","text":"Forward a received email message. Parameters: Name Type Description Default msg Message The message to forward. required to_addrs List[str] The list of email addresses that will receive the message. required cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None include_attachments boolean Include attachments from the original message. True Note This method can only be used with an SMTP server configured.","title":"forward()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.get_folders","text":"Get a list of available email folders. Returns: Type Description List[str] The list containing the name of the folders. Note This method can only be used with an IMAP server configured.","title":"get_folders()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.login","text":"Log in with a valid email account. Parameters: Name Type Description Default email str The user email. required password str The user password. required","title":"login()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.mark_as_read","text":"Mark a received email message as read. Parameters: Name Type Description Default msg MailMessage The message to mark. required Note This method can only be used with an IMAP server configured.","title":"mark_as_read()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.mark_as_unread","text":"Mark a received email message as unread. Parameters: Name Type Description Default msg MailMessage The message to mark. required Note This method can only be used with an IMAP server configured.","title":"mark_as_unread()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.move","text":"Move a email message from current folder to a destination folder. Parameters: Name Type Description Default message MailMessage The message to be moved. required folder str The name of the destination folder. required Note This method can only be used with an IMAP server configured.","title":"move()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.reply","text":"Reply a received email message. Parameters: Name Type Description Default msg MailMessage The message to reply. required text_content str The content of the email body. required attachments List[str] The list with the paths of the files that will be sent as attachments. None to_addrs List[str] The list of email addresses that will receive the message. None cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None Note This method can only be used with an SMTP server configured.","title":"reply()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.reply_to_all","text":"Replies to all email addresses included in the original message. Parameters: Name Type Description Default msg Message The message to reply. required text_content str The content of the email body. required attachments List[str] The list with the paths of the files that will be sent as attachments. None Note This method can only be used with an SMTP server configured.","title":"reply_to_all()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.search","text":"Searches for all emails based on criteria. See about search strings here: https://www.marshallsoft.com/ImapSearch.htm Parameters: Name Type Description Default criteria str The criteria to be used in the search. Defaults to 'ALL', in this case all emails in the folder will be returned. 'ALL' mark_read boolean Whether the email should be marked as read. Defaults to False. False timeout int Wait for a new message until this timeout. Defaults to 0 seconds (don't wait for new messages). 0 Returns: Type Description List[MailMessage] The list of emails found. Note This method can only be used with an IMAP server configured.","title":"search()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.select_folder","text":"Select the folder that will be used as a reference. Parameters: Name Type Description Default folder str The folder name. Defaults to INBOX, to see the available folders use get_folders(). 'INBOX' Note This method can only be used with an IMAP server configured.","title":"select_folder()"},{"location":"botcity-email-plugin-python/api/plugin/#botcity.plugins.email.plugin.BotEmailPlugin.send_message","text":"Send an email message through the SMTP protocol. Parameters: Name Type Description Default subject str The subject of the email. required text_content str The content of the email body. required to_addrs List[str] The list of email addresses that will receive the message. required cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None attachments List[str] The list with the paths of the files that will be sent as attachments. None Note This method can only be used with an SMTP server configured.","title":"send_message()"},{"location":"botcity-excel-plugin-python/","text":"Welcome Welcome to BotCity's Excel Plugin. Installation Latest release Using PyPI pip install botcity-excel-plugin","title":"Home"},{"location":"botcity-excel-plugin-python/#welcome","text":"Welcome to BotCity's Excel Plugin.","title":"Welcome"},{"location":"botcity-excel-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-excel-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-excel-plugin-python/#using-pypi","text":"pip install botcity-excel-plugin","title":"Using PyPI"},{"location":"botcity-excel-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.excel import BotExcelPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin bot_excel = BotExcelPlugin () ... Step 2 of Example # Read from a CSV File, add a row, then sort it bot_excel . read ( 'read.xlsx' ) bot_excel . add_row ([ 0 , 22 ]) bot_excel . sort ([ 'A' , 'B' ], False ) # Print the result and save it to a CSV file print ( bot_excel . as_list ()) bot_excel . write ( 'write.xlsx' ) ... Complete code Let's take a look into the complete code: from botcity.plugins.excel import BotExcelPlugin # Instantiate the plugin bot_excel = BotExcelPlugin () # Read from a CSV File, add a row, then sort it bot_excel . read ( 'read.xlsx' ) bot_excel . add_row ([ 0 , 22 ]) bot_excel . sort ([ 'A' , 'B' ]) # Print the result and save it to a CSV file print ( bot_excel . as_list ()) bot_excel . write ( 'write.xlsx' ) ... Pro Tip This plugin allow you to use method chaining so the code above could be written as: print ( BotExcelPlugin () . read ( 'read.xlsx' ) . add_row ([ 0 , 22 ]) . sort ([ 'A' , 'B' ]) . as_list ()) ... Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-excel-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.excel import BotExcelPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-excel-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin bot_excel = BotExcelPlugin () ...","title":"Step 1 of Example"},{"location":"botcity-excel-plugin-python/intro/#step-2-of-example","text":"# Read from a CSV File, add a row, then sort it bot_excel . read ( 'read.xlsx' ) bot_excel . add_row ([ 0 , 22 ]) bot_excel . sort ([ 'A' , 'B' ], False ) # Print the result and save it to a CSV file print ( bot_excel . as_list ()) bot_excel . write ( 'write.xlsx' ) ...","title":"Step 2 of Example"},{"location":"botcity-excel-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.plugins.excel import BotExcelPlugin # Instantiate the plugin bot_excel = BotExcelPlugin () # Read from a CSV File, add a row, then sort it bot_excel . read ( 'read.xlsx' ) bot_excel . add_row ([ 0 , 22 ]) bot_excel . sort ([ 'A' , 'B' ]) # Print the result and save it to a CSV file print ( bot_excel . as_list ()) bot_excel . write ( 'write.xlsx' ) ...","title":"Complete code"},{"location":"botcity-excel-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: print ( BotExcelPlugin () . read ( 'read.xlsx' ) . add_row ([ 0 , 22 ]) . sort ([ 'A' , 'B' ]) . as_list ()) ...","title":"Pro Tip"},{"location":"botcity-excel-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-excel-plugin-python/api/plugin/","text":"botcity.plugins.excel.plugin.BotExcelPlugin __init__ ( self , active_sheet = 'sheet1' ) special This class stores the data in a Excel-like (sheets) format. This plugin supports multiple sheets into a object of this class. To access sheets other than the first, either pass the sheet index or name, or change the default sheet this class will point to with the set_active_sheet() method. Parameters: Name Type Description Default active_sheet str, Optional The name of the sheet this class will be created with. Defaults to 'sheet1'. 'sheet1' Attributes: Name Type Description active_sheet str, Optional The default sheet this class's methods will work with. Defaults to 'sheet1'. add_column ( self , column , sheet = None ) Adds a new column to the sheet. Parameters: Name Type Description Default column List[object] A list of cells. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining). add_columns ( self , columns , sheet = None ) Adds new columns to the sheet. Parameters: Name Type Description Default columns List[List[object]] A list of columns. Each column is a list of cells. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining). add_row ( self , row , sheet = None ) Adds a new row to the bottom of the sheet. Parameters: Name Type Description Default row List[object] A list of cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining). add_rows ( self , rows , sheet = None ) Adds new rows to the sheet. Parameters: Name Type Description Default rows List[List[object]] A list of rows. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining). as_dataframe ( self , sheet = None ) Returns the contents of an entire sheet in a Pandas DataFrame format. Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description DataFrame A Pandas DataFrame object. as_list ( self , sheet = None ) Returns the contents of an entire sheet in a list of lists format. This is equivalent to get_range(\"\", sheet). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list of rows. Each row is a list of cell values. clear ( self , sheet = None ) Deletes the entire content of the sheet. Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining). clear_range ( self , range_ = None , sheet = None ) Clears the provided area of the sheet. Keep in mind that this method will not remove any rows or columns, only erase their values. Parameters: Name Type Description Default range_ str, Optional The range to be cleared, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) create_sheet ( self , sheet ) Creates a new sheet. Parameters: Name Type Description Default sheet str The new sheet's name. required Returns: Type Description BotExcelPlugin self (allows Method Chaining) get_cell ( self , column , row , sheet = None ) Returns the value of a single cell. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required row int The 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description object The cell's value. get_column ( self , column , sheet = None ) Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the column. get_range ( self , range_ , sheet = None ) Returns the values of all cells within an area of the sheet in a list of list format. Parameters: Name Type Description Default range_ str The range (minus the sheet) to be retrieved, in a A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list with the recovered rows. Each row is a list of objects. get_row ( self , row , sheet = None ) Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the row. list_sheets ( self ) Returns a list with the name of all the sheets in this spreadsheet. Returns: Type Description List[str] A list of sheet names. read ( self , file_or_path ) Reads an Excel file. Parameters: Name Type Description Default file_or_path Either a buffered Excel file or a path to it. required Returns: Type Description BotExcelPlugin self (allows Method Chaining). remove_column ( self , column , sheet = None ) Removes single column from the sheet. Keep in mind that the columns to its right will be moved to the left. Parameters: Name Type Description Default column str The letter-indexed name ('a', 'A', 'AA') of the column to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining). remove_columns ( self , columns , sheet = None ) Removes a list of columns from the sheet. Keep in mind that each column removed will cause the columns to their right to be moved left after they are all removed. Parameters: Name Type Description Default columns List[str] A list of the letter-indexed names of the columns to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining). remove_row ( self , row , sheet = None ) Removes a single row from the sheet. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining). remove_rows ( self , rows , sheet = None ) Removes rows from the sheet. Keep in mind that each row removed will cause the rows below it to be moved up after they are all removed. Parameters: Name Type Description Default rows List[int] A list of the 1-indexed numbers of the rows to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) remove_sheet ( self , sheet ) Removes a sheet. Keep in mind that if you remove the active_sheet, you must set another sheet as active before using trying to modify it! Parameters: Name Type Description Default sheet str The sheet's name. required Returns: Type Description BotExcelPlugin self (allows Method Chaining) rename_sheet ( self , new_name , sheet ) Renames a sheet. Keep in mind that in doing so the new sheet will be reordered to the last position. Parameters: Name Type Description Default new_name str The sheet will be renamed to this. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. required Returns: Type Description BotExcelPlugin self (allows Method Chaining) set_cell ( self , column , row , value , sheet = None ) Replaces the value of a single cell. Parameters: Name Type Description Default column str The cell's letter-indexed column name ('a', 'A', 'AA'). required row int The cell's 1-indexed row number. required value object The new value of the cell. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) set_range ( self , values , range_ = None , sheet = None ) Replace the values within an area of the sheet by the values supplied. Parameters: Name Type Description Default values List[List[object]] A list of rows. Each row is list of cell values. required range_ str, Optional The range (minus the sheet) to have its values replaced, in A1 format. Ex: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str (str, Optional): If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) sort ( self , by_columns , ascending = True , start_row = 2 , end_row = None , sheet = None ) Sorts the sheet's rows according to the columns provided. Unless the start and end point are provided, all rows minus the first one will be sorted! Parameters: Name Type Description Default by_columns Union[str, List[str]] Either a letter-indexed column name to sort the rows by, or a list of them. In case of a tie, the second column is used, and so on. required ascending bool, Optional Set to False to sort by descending order. Defaults to True. True start_row str, Optional The 1-indexed row number where the sort will start from. Defaults to 2. 2 end_row str, Optional The 1-indexed row number where the sort will end at (inclusive). Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) write ( self , file_or_path ) Writes this class's content to a file. Parameters: Name Type Description Default file_or_path Either a buffered Excel file or a path to it. required Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"Plugin"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin","text":"","title":"BotExcelPlugin"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.__init__","text":"This class stores the data in a Excel-like (sheets) format. This plugin supports multiple sheets into a object of this class. To access sheets other than the first, either pass the sheet index or name, or change the default sheet this class will point to with the set_active_sheet() method. Parameters: Name Type Description Default active_sheet str, Optional The name of the sheet this class will be created with. Defaults to 'sheet1'. 'sheet1' Attributes: Name Type Description active_sheet str, Optional The default sheet this class's methods will work with. Defaults to 'sheet1'.","title":"__init__()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.add_column","text":"Adds a new column to the sheet. Parameters: Name Type Description Default column List[object] A list of cells. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"add_column()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.add_columns","text":"Adds new columns to the sheet. Parameters: Name Type Description Default columns List[List[object]] A list of columns. Each column is a list of cells. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"add_columns()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.add_row","text":"Adds a new row to the bottom of the sheet. Parameters: Name Type Description Default row List[object] A list of cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"add_row()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.add_rows","text":"Adds new rows to the sheet. Parameters: Name Type Description Default rows List[List[object]] A list of rows. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"add_rows()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.as_dataframe","text":"Returns the contents of an entire sheet in a Pandas DataFrame format. Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description DataFrame A Pandas DataFrame object.","title":"as_dataframe()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.as_list","text":"Returns the contents of an entire sheet in a list of lists format. This is equivalent to get_range(\"\", sheet). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list of rows. Each row is a list of cell values.","title":"as_list()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.clear","text":"Deletes the entire content of the sheet. Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"clear()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.clear_range","text":"Clears the provided area of the sheet. Keep in mind that this method will not remove any rows or columns, only erase their values. Parameters: Name Type Description Default range_ str, Optional The range to be cleared, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"clear_range()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.create_sheet","text":"Creates a new sheet. Parameters: Name Type Description Default sheet str The new sheet's name. required Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"create_sheet()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.get_cell","text":"Returns the value of a single cell. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required row int The 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description object The cell's value.","title":"get_cell()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.get_column","text":"Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the column.","title":"get_column()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.get_range","text":"Returns the values of all cells within an area of the sheet in a list of list format. Parameters: Name Type Description Default range_ str The range (minus the sheet) to be retrieved, in a A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list with the recovered rows. Each row is a list of objects.","title":"get_range()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.get_row","text":"Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the row.","title":"get_row()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.list_sheets","text":"Returns a list with the name of all the sheets in this spreadsheet. Returns: Type Description List[str] A list of sheet names.","title":"list_sheets()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.read","text":"Reads an Excel file. Parameters: Name Type Description Default file_or_path Either a buffered Excel file or a path to it. required Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"read()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_column","text":"Removes single column from the sheet. Keep in mind that the columns to its right will be moved to the left. Parameters: Name Type Description Default column str The letter-indexed name ('a', 'A', 'AA') of the column to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"remove_column()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_columns","text":"Removes a list of columns from the sheet. Keep in mind that each column removed will cause the columns to their right to be moved left after they are all removed. Parameters: Name Type Description Default columns List[str] A list of the letter-indexed names of the columns to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"remove_columns()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_row","text":"Removes a single row from the sheet. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"remove_row()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_rows","text":"Removes rows from the sheet. Keep in mind that each row removed will cause the rows below it to be moved up after they are all removed. Parameters: Name Type Description Default rows List[int] A list of the 1-indexed numbers of the rows to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"remove_rows()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_sheet","text":"Removes a sheet. Keep in mind that if you remove the active_sheet, you must set another sheet as active before using trying to modify it! Parameters: Name Type Description Default sheet str The sheet's name. required Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"remove_sheet()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.rename_sheet","text":"Renames a sheet. Keep in mind that in doing so the new sheet will be reordered to the last position. Parameters: Name Type Description Default new_name str The sheet will be renamed to this. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. required Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"rename_sheet()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.set_cell","text":"Replaces the value of a single cell. Parameters: Name Type Description Default column str The cell's letter-indexed column name ('a', 'A', 'AA'). required row int The cell's 1-indexed row number. required value object The new value of the cell. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"set_cell()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.set_range","text":"Replace the values within an area of the sheet by the values supplied. Parameters: Name Type Description Default values List[List[object]] A list of rows. Each row is list of cell values. required range_ str, Optional The range (minus the sheet) to have its values replaced, in A1 format. Ex: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str (str, Optional): If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"set_range()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.sort","text":"Sorts the sheet's rows according to the columns provided. Unless the start and end point are provided, all rows minus the first one will be sorted! Parameters: Name Type Description Default by_columns Union[str, List[str]] Either a letter-indexed column name to sort the rows by, or a list of them. In case of a tie, the second column is used, and so on. required ascending bool, Optional Set to False to sort by descending order. Defaults to True. True start_row str, Optional The 1-indexed row number where the sort will start from. Defaults to 2. 2 end_row str, Optional The 1-indexed row number where the sort will end at (inclusive). Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"sort()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.write","text":"Writes this class's content to a file. Parameters: Name Type Description Default file_or_path Either a buffered Excel file or a path to it. required Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"write()"},{"location":"botcity-ftp-plugin-python/","text":"Welcome Welcome to BotCity's FTP Plugin. Installation Latest release Using PyPI pip install botcity-ftp-plugin","title":"Home"},{"location":"botcity-ftp-plugin-python/#welcome","text":"Welcome to BotCity's FTP Plugin.","title":"Welcome"},{"location":"botcity-ftp-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-ftp-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-ftp-plugin-python/#using-pypi","text":"pip install botcity-ftp-plugin","title":"Using PyPI"},{"location":"botcity-ftp-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.ftp import BotFTPPlugin As a demonstration of the library, let's build a simple example together that will do something cool. Instantiating the plugin First, let's instantiate the plugin passing the information that we will use to connect to the ftp server. hostname = \"<SERVER_NAME>\" username = \"<USER_LOGIN>\" password = \"<USER_PASSWORD>\" # Instantiate the plugin ftp = BotFTPPlugin ( hostname , username , password ) Note If no username and password are passed, the login attempt to the server will be done using an anonymous user by default. Some servers do not allow anonymous login, so pay attention to this. File operations With this plugin we can do the most basic operations with files and easily manage local files and files that are on the server. Uploading and downloading # Connecting to server ftp = BotFTPPlugin ( \"<FTP_SERVER>\" , \"<USER>\" , \"<PASSWORD>\" ) # Uploading a local file named example.txt to the server ftp . upload_file ( 'my_files/example.txt' ) # Downloading a file named README stored on the server and saving in the local path: ftp_files/Downloads ftp . download_file ( 'README' , 'ftp_files/Downloads' ) # Closes the connection with the server ftp . disconnect () Renaming and deleting # Renaming the file named \"my_file.txt\" stored on the server. ftp . rename_file ( 'my_file.txt' , 'my_updated_file.txt' ) # Deleting a file from the server by name ftp . delete_file ( 'my_updated_file.txt' ) Tip When renaming a file you can also pass a full path instead of just the file name. In this case, the file in addition to being renamed will be moved to the path that was passed. Folder operations It is also possible to do basic operations with the directories present on the server. ftp = BotFTPPlugin ( \"<FTP_SERVER>\" , \"<USER>\" , \"<PASSWORD>\" ) # Prints the path of the current working directory. current_folder = ftp . get_current_directory () print ( current_folder ) # Prints the list of all files and folders contained in the current working directory ftp . list_files () # Remove the specified directory from the server ftp . remove_directory ( 'tests/files/directory_1' ) # Create a new directory on the server. The full path of the created directory will be returned. dir_path = ftp . create_directory ( 'my_directory' ) # Changes the current working directory to the new created directory ftp . set_current_directory ( dir_path ) Complete code Let's take a look into the complete code: from botcity.plugins.ftp import BotFTPPlugin # Connecting to server ftp = BotFTPPlugin ( \"<FTP_SERVER>\" , \"<USER>\" , \"<PASSWORD>\" ) # Creating a new directory and setting it to the current working directory dir_path = ftp . create_directory ( 'tests/my_directory' ) ftp . set_current_directory ( dir_path ) # For each file in the local folder, upload it to the folder created on the server local_folder = 'downloads/files' for file in os . listdir ( local_folder ): ftp . upload_file ( os . path . join ( local_folder , file )) ftp . list_files () # Closes the connection with the server ftp . disconnect () Working with SFTP servers In addition to managing files on an FTP server, with this plugin it is also possible to perform the same operations shown above on SFTP servers through an SSH connection. To use these same operations on an SFTP server, just instantiate an object of the BotSFTPPlugin class. from botcity.plugins.ftp import BotSFTPPlugin # Connecting to server sftp = BotSFTPPlugin ( \"<SFTP_SERVER>\" , 22 , \"<USER>\" , \"<PASSWORD>\" ) # Prints the name of each file in the current working directory for file in sftp . get_files_list (): print ( file ) # Creating a new directory on the server sftp . create_directory ( \"folders/my_folder\" ) # Upload a file to the folder created on the server sftp . upload_file ( \"image.png\" , \"folders/my_folder\" ) # Closes the connection with the server sftp . disconnect () Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-ftp-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.ftp import BotFTPPlugin As a demonstration of the library, let's build a simple example together that will do something cool.","title":"Getting Started"},{"location":"botcity-ftp-plugin-python/intro/#instantiating-the-plugin","text":"First, let's instantiate the plugin passing the information that we will use to connect to the ftp server. hostname = \"<SERVER_NAME>\" username = \"<USER_LOGIN>\" password = \"<USER_PASSWORD>\" # Instantiate the plugin ftp = BotFTPPlugin ( hostname , username , password ) Note If no username and password are passed, the login attempt to the server will be done using an anonymous user by default. Some servers do not allow anonymous login, so pay attention to this.","title":"Instantiating the plugin"},{"location":"botcity-ftp-plugin-python/intro/#file-operations","text":"With this plugin we can do the most basic operations with files and easily manage local files and files that are on the server.","title":"File operations"},{"location":"botcity-ftp-plugin-python/intro/#uploading-and-downloading","text":"# Connecting to server ftp = BotFTPPlugin ( \"<FTP_SERVER>\" , \"<USER>\" , \"<PASSWORD>\" ) # Uploading a local file named example.txt to the server ftp . upload_file ( 'my_files/example.txt' ) # Downloading a file named README stored on the server and saving in the local path: ftp_files/Downloads ftp . download_file ( 'README' , 'ftp_files/Downloads' ) # Closes the connection with the server ftp . disconnect ()","title":"Uploading and downloading"},{"location":"botcity-ftp-plugin-python/intro/#renaming-and-deleting","text":"# Renaming the file named \"my_file.txt\" stored on the server. ftp . rename_file ( 'my_file.txt' , 'my_updated_file.txt' ) # Deleting a file from the server by name ftp . delete_file ( 'my_updated_file.txt' ) Tip When renaming a file you can also pass a full path instead of just the file name. In this case, the file in addition to being renamed will be moved to the path that was passed.","title":"Renaming and deleting"},{"location":"botcity-ftp-plugin-python/intro/#folder-operations","text":"It is also possible to do basic operations with the directories present on the server. ftp = BotFTPPlugin ( \"<FTP_SERVER>\" , \"<USER>\" , \"<PASSWORD>\" ) # Prints the path of the current working directory. current_folder = ftp . get_current_directory () print ( current_folder ) # Prints the list of all files and folders contained in the current working directory ftp . list_files () # Remove the specified directory from the server ftp . remove_directory ( 'tests/files/directory_1' ) # Create a new directory on the server. The full path of the created directory will be returned. dir_path = ftp . create_directory ( 'my_directory' ) # Changes the current working directory to the new created directory ftp . set_current_directory ( dir_path )","title":"Folder operations"},{"location":"botcity-ftp-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.plugins.ftp import BotFTPPlugin # Connecting to server ftp = BotFTPPlugin ( \"<FTP_SERVER>\" , \"<USER>\" , \"<PASSWORD>\" ) # Creating a new directory and setting it to the current working directory dir_path = ftp . create_directory ( 'tests/my_directory' ) ftp . set_current_directory ( dir_path ) # For each file in the local folder, upload it to the folder created on the server local_folder = 'downloads/files' for file in os . listdir ( local_folder ): ftp . upload_file ( os . path . join ( local_folder , file )) ftp . list_files () # Closes the connection with the server ftp . disconnect ()","title":"Complete code"},{"location":"botcity-ftp-plugin-python/intro/#working-with-sftp-servers","text":"In addition to managing files on an FTP server, with this plugin it is also possible to perform the same operations shown above on SFTP servers through an SSH connection. To use these same operations on an SFTP server, just instantiate an object of the BotSFTPPlugin class. from botcity.plugins.ftp import BotSFTPPlugin # Connecting to server sftp = BotSFTPPlugin ( \"<SFTP_SERVER>\" , 22 , \"<USER>\" , \"<PASSWORD>\" ) # Prints the name of each file in the current working directory for file in sftp . get_files_list (): print ( file ) # Creating a new directory on the server sftp . create_directory ( \"folders/my_folder\" ) # Upload a file to the folder created on the server sftp . upload_file ( \"image.png\" , \"folders/my_folder\" ) # Closes the connection with the server sftp . disconnect ()","title":"Working with SFTP servers"},{"location":"botcity-ftp-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-ftp-plugin-python/release_notes/","text":"Release Notes v0.1.0 (2022-04-22) Initial version released.","title":"Release Notes"},{"location":"botcity-ftp-plugin-python/release_notes/#release-notes","text":"","title":"Release Notes"},{"location":"botcity-ftp-plugin-python/release_notes/#v010-2022-04-22","text":"Initial version released.","title":"v0.1.0 (2022-04-22)"},{"location":"botcity-ftp-plugin-python/api/plugin/","text":"botcity.plugins.ftp.plugin.BotFTPPlugin __init__ ( self , hostname , username = None , password = None ) special Connect to an FTP server. If no username and password are passed, anonymous will be used by default. Parameters: Name Type Description Default hostname str The host used in the connection. required username str The username to login. None password str The password to login. None create_directory ( self , dir_path ) Create a new directory on the server. Parameters: Name Type Description Default dir_path str The name/path of the directory to be created. required Returns: Type Description str The full path of the created directory. delete_file ( self , file_name ) Delete a file on the server. Parameters: Name Type Description Default file_name str The name/path of the file to be deleted. required disconnect ( self ) Close the connection with the server. download_file ( self , file_name , destination_folder ) Download a file from the current folder using the file name. Parameters: Name Type Description Default file_name str The name of the file to be downloaded. required destination_folder str The path of the folder where the file will be saved. required get_current_directory ( self ) Get the current working directory. Returns: Type Description str The path of the current directory. get_files_list ( self ) Get the list of all file and folder names in the current working directory. Returns: Type Description List[str] The list with the name of the files. list_files ( self ) Prints the files and folders presents in the current folder. remove_directory ( self , dir_path ) Remove a directory on the server. Parameters: Name Type Description Default dir_path str The name/path of the directory to be removed. required rename_file ( self , from_name , to_name ) Rename a file on the server. Parameters: Name Type Description Default from_name str The current file name/path. required to_name str The new file name/path. required set_current_directory ( self , dir_path ) Change to the specified directory. Parameters: Name Type Description Default dir_path str The name/path of the directory. required upload_file ( self , file_path ) Upload a file to the current folder. Parameters: Name Type Description Default file_path str The path of the file to be uploaded. required botcity.plugins.ftp.plugin.BotSFTPPlugin __init__ ( self , hostname , port = 22 , username = None , password = None ) special Connect to an SFTP server over a SSH session. Parameters: Name Type Description Default hostname str The host used in the connection. required port int The port to use in the connection. Defaults to 22. 22 username str The username to login. None password str The password to login. None create_directory ( self , dir_path ) Create a new directory on the server. Parameters: Name Type Description Default dir_path str The name/path of the directory to be created. required delete_file ( self , file_name ) Delete a file on the server. Parameters: Name Type Description Default file_name str The name/path of the file to be deleted. required disconnect ( self ) Close the connection with the server. download_file ( self , file_name , destination_folder ) Download a file from the server. Parameters: Name Type Description Default file_name str The name/path of the file to be downloaded. required destination_folder str The path of the folder where the file will be saved. required get_current_directory ( self ) Get the current working directory. Returns: Type Description str The path of the current directory. get_files_list ( self ) Get the list of all file and folder names in the current working directory. Returns: Type Description List[str] The list with the name of the files. remove_directory ( self , dir_path ) Remove a directory on the server. Parameters: Name Type Description Default dir_path str The name/path of the directory to be removed. required rename_file ( self , from_name , to_name ) Rename a file on the server. Parameters: Name Type Description Default from_name str The current file name/path. required to_name str The new file name/path. required set_current_directory ( self , dir_path ) Change to the specified directory. Parameters: Name Type Description Default dir_path str The name/path of the directory. required upload_file ( self , file_name , destination_path = None ) Upload a file to a destination folder in the server. Parameters: Name Type Description Default file_name str The local file to be uploaded. required destination_path str The path of the folder where the file will be saved. Defaults to the current working directory. None","title":"Plugin"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin","text":"","title":"BotFTPPlugin"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.__init__","text":"Connect to an FTP server. If no username and password are passed, anonymous will be used by default. Parameters: Name Type Description Default hostname str The host used in the connection. required username str The username to login. None password str The password to login. None","title":"__init__()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.create_directory","text":"Create a new directory on the server. Parameters: Name Type Description Default dir_path str The name/path of the directory to be created. required Returns: Type Description str The full path of the created directory.","title":"create_directory()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.delete_file","text":"Delete a file on the server. Parameters: Name Type Description Default file_name str The name/path of the file to be deleted. required","title":"delete_file()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.disconnect","text":"Close the connection with the server.","title":"disconnect()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.download_file","text":"Download a file from the current folder using the file name. Parameters: Name Type Description Default file_name str The name of the file to be downloaded. required destination_folder str The path of the folder where the file will be saved. required","title":"download_file()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.get_current_directory","text":"Get the current working directory. Returns: Type Description str The path of the current directory.","title":"get_current_directory()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.get_files_list","text":"Get the list of all file and folder names in the current working directory. Returns: Type Description List[str] The list with the name of the files.","title":"get_files_list()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.list_files","text":"Prints the files and folders presents in the current folder.","title":"list_files()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.remove_directory","text":"Remove a directory on the server. Parameters: Name Type Description Default dir_path str The name/path of the directory to be removed. required","title":"remove_directory()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.rename_file","text":"Rename a file on the server. Parameters: Name Type Description Default from_name str The current file name/path. required to_name str The new file name/path. required","title":"rename_file()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.set_current_directory","text":"Change to the specified directory. Parameters: Name Type Description Default dir_path str The name/path of the directory. required","title":"set_current_directory()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotFTPPlugin.upload_file","text":"Upload a file to the current folder. Parameters: Name Type Description Default file_path str The path of the file to be uploaded. required","title":"upload_file()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin","text":"","title":"BotSFTPPlugin"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.__init__","text":"Connect to an SFTP server over a SSH session. Parameters: Name Type Description Default hostname str The host used in the connection. required port int The port to use in the connection. Defaults to 22. 22 username str The username to login. None password str The password to login. None","title":"__init__()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.create_directory","text":"Create a new directory on the server. Parameters: Name Type Description Default dir_path str The name/path of the directory to be created. required","title":"create_directory()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.delete_file","text":"Delete a file on the server. Parameters: Name Type Description Default file_name str The name/path of the file to be deleted. required","title":"delete_file()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.disconnect","text":"Close the connection with the server.","title":"disconnect()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.download_file","text":"Download a file from the server. Parameters: Name Type Description Default file_name str The name/path of the file to be downloaded. required destination_folder str The path of the folder where the file will be saved. required","title":"download_file()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.get_current_directory","text":"Get the current working directory. Returns: Type Description str The path of the current directory.","title":"get_current_directory()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.get_files_list","text":"Get the list of all file and folder names in the current working directory. Returns: Type Description List[str] The list with the name of the files.","title":"get_files_list()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.remove_directory","text":"Remove a directory on the server. Parameters: Name Type Description Default dir_path str The name/path of the directory to be removed. required","title":"remove_directory()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.rename_file","text":"Rename a file on the server. Parameters: Name Type Description Default from_name str The current file name/path. required to_name str The new file name/path. required","title":"rename_file()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.set_current_directory","text":"Change to the specified directory. Parameters: Name Type Description Default dir_path str The name/path of the directory. required","title":"set_current_directory()"},{"location":"botcity-ftp-plugin-python/api/plugin/#botcity.plugins.ftp.plugin.BotSFTPPlugin.upload_file","text":"Upload a file to a destination folder in the server. Parameters: Name Type Description Default file_name str The local file to be uploaded. required destination_path str The path of the folder where the file will be saved. Defaults to the current working directory. None","title":"upload_file()"},{"location":"botcity-gmail-plugin-python/","text":"Welcome Welcome to BotCity's Gmail Plugin. Installation Latest release Using PyPI pip install botcity-gmail-plugin Google Credentials See how to create and configure your credentials file in this section .","title":"Home"},{"location":"botcity-gmail-plugin-python/#welcome","text":"Welcome to BotCity's Gmail Plugin.","title":"Welcome"},{"location":"botcity-gmail-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-gmail-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-gmail-plugin-python/#using-pypi","text":"pip install botcity-gmail-plugin","title":"Using PyPI"},{"location":"botcity-gmail-plugin-python/#google-credentials","text":"See how to create and configure your credentials file in this section .","title":"Google Credentials"},{"location":"botcity-gmail-plugin-python/credentials/","text":"Creating Google Credentials In order to be able to access the resources offered by Google APIs, we must first generate a file of credentials from a Google account. In a few steps it is possible to get the json file that will be responsible for authenticating our account to Google services. Creating a Google Cloud Platform project First we need to create a project that will be used as a base to generate the credentials. It is in this project that we will define the APIs that we will use, in this case the Gmail API . Open the Google Cloud Platform with the Google account you want to use. At the top-left, click on Navigation menu > IAM & Admin > Create a Project . Choose a Project Name and select the Location of your project. In the case of this plugin, an organization is not required. Warning If you don't see any organization when you click BROWSE, it's probably because you're using a personal account instead of a Google Workspace account. Some of the features described in Google Workspace developer documentation are only available to projects associated with an organization, so keep attention on this. For this plugin, the option of \"No organization\" can be used. Click Create to complete this step. Enabling the Gmail API With our project created, let's activate the APIs we want to use. In this case we will only use the Gmail API . At the top-left, click on Navigation menu > APIs & Services > Library . In the search field, enter the name Gmail API and press Enter. In the search results list, select the API and click Enable Creating OAuth Client ID Credentials With the API activated, let's create the credentials that we will use to access the features through our application. At the top-left, click on Navigation menu > APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID . Warning In some cases, if you are creating credentials for the first time, you may see a message regarding the consent configuration. In this case, you need to click Configure Consent Screen and follow these steps: In User Type, select Internal if you are using a Google Workspace account, External otherwise. On the OAuth consent screen tab you just need to fill in the required fields: App name , User support email and the Email address in the Developer contact information section. Click Save and Continue In the Scopes tab it is not necessary to change anything, just click on Save and Continue again. In the Test Users tab, if you are not using an organization and you selected the User Type as External in the first step, you will need to add the emails that will be allowed to use the credentials. Just click on Add Users and add the email used to create the project. If you want, you can add and give permissions to other emails as well. At the end, click on Save and Continue . Info If you selected Internal in User Type, you can skip the step above. Just click on Save and Continue . On the Summary tab click on Back to Dashboard . With the OAuth consent screen configured, back to APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID again. In Application type select Desktop app , choose a Name and click Create . After that, the credentials are ready to be used. Downloading the OAuth credentials file Click on the option Download OAuth client , in the credential line that was created. Select Download JSON and save the file wherever you see fit. You can also rename the downloaded file. With the file in hand, just pass the path of this file when instantiating the plugin. Tip The first time you run a process using the credentials, a tab will open in the browser for you to authenticate your account. Just select the account used to create the credentials and allow access to the resources. After that, a token file will be generated automatically, making it no longer necessary to repeat this login process. Google Documentation References You can get more information about what has been described here through the following links: Create a Google Cloud Platform project ( details here ) Activate the GMail API ( details here ) Create OAuth client ID credentials ( details here ) and ( here )","title":"Google Credentials"},{"location":"botcity-gmail-plugin-python/credentials/#creating-google-credentials","text":"In order to be able to access the resources offered by Google APIs, we must first generate a file of credentials from a Google account. In a few steps it is possible to get the json file that will be responsible for authenticating our account to Google services.","title":"Creating Google Credentials"},{"location":"botcity-gmail-plugin-python/credentials/#creating-a-google-cloud-platform-project","text":"First we need to create a project that will be used as a base to generate the credentials. It is in this project that we will define the APIs that we will use, in this case the Gmail API . Open the Google Cloud Platform with the Google account you want to use. At the top-left, click on Navigation menu > IAM & Admin > Create a Project . Choose a Project Name and select the Location of your project. In the case of this plugin, an organization is not required. Warning If you don't see any organization when you click BROWSE, it's probably because you're using a personal account instead of a Google Workspace account. Some of the features described in Google Workspace developer documentation are only available to projects associated with an organization, so keep attention on this. For this plugin, the option of \"No organization\" can be used. Click Create to complete this step.","title":"Creating a Google Cloud Platform project"},{"location":"botcity-gmail-plugin-python/credentials/#enabling-the-gmail-api","text":"With our project created, let's activate the APIs we want to use. In this case we will only use the Gmail API . At the top-left, click on Navigation menu > APIs & Services > Library . In the search field, enter the name Gmail API and press Enter. In the search results list, select the API and click Enable","title":"Enabling the Gmail API"},{"location":"botcity-gmail-plugin-python/credentials/#creating-oauth-client-id-credentials","text":"With the API activated, let's create the credentials that we will use to access the features through our application. At the top-left, click on Navigation menu > APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID . Warning In some cases, if you are creating credentials for the first time, you may see a message regarding the consent configuration. In this case, you need to click Configure Consent Screen and follow these steps: In User Type, select Internal if you are using a Google Workspace account, External otherwise. On the OAuth consent screen tab you just need to fill in the required fields: App name , User support email and the Email address in the Developer contact information section. Click Save and Continue In the Scopes tab it is not necessary to change anything, just click on Save and Continue again. In the Test Users tab, if you are not using an organization and you selected the User Type as External in the first step, you will need to add the emails that will be allowed to use the credentials. Just click on Add Users and add the email used to create the project. If you want, you can add and give permissions to other emails as well. At the end, click on Save and Continue . Info If you selected Internal in User Type, you can skip the step above. Just click on Save and Continue . On the Summary tab click on Back to Dashboard . With the OAuth consent screen configured, back to APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID again. In Application type select Desktop app , choose a Name and click Create . After that, the credentials are ready to be used.","title":"Creating OAuth Client ID Credentials"},{"location":"botcity-gmail-plugin-python/credentials/#downloading-the-oauth-credentials-file","text":"Click on the option Download OAuth client , in the credential line that was created. Select Download JSON and save the file wherever you see fit. You can also rename the downloaded file. With the file in hand, just pass the path of this file when instantiating the plugin. Tip The first time you run a process using the credentials, a tab will open in the browser for you to authenticate your account. Just select the account used to create the credentials and allow access to the resources. After that, a token file will be generated automatically, making it no longer necessary to repeat this login process. Google Documentation References You can get more information about what has been described here through the following links: Create a Google Cloud Platform project ( details here ) Activate the GMail API ( details here ) Create OAuth client ID credentials ( details here ) and ( here )","title":"Downloading the OAuth credentials file"},{"location":"botcity-gmail-plugin-python/intro/","text":"Getting Started After you installed this package and get the Google credentials file , the next step is to import the package into your code and start using the functions. from botcity.plugins.gmail import BotGmailPlugin As a demonstration of the library, let's see some examples and features. Setting up the email First, let's configure the gmail account and the credentials that we will use in the code. # Set the path of the credentials json file credentials = './resources/credentials.json' # Instantiate the plugin gmail = BotGmailPlugin ( credentials , \"<your_gmail_account>\" ) Info Your gmail account must be the same as the one used to generate the credentials. Searching for some messages With the account properly configured, let's filter and search for some emails. # Search for all emails with subject: Hello World messages = gmail . search_messages ( criteria = \"subject:Hello World\" ) # For each email found: prints the subject, sender address and text content of the email for msg in messages : print ( \" \\n ----------------------------\" ) print ( \"Subject => \" + msg . subject ) print ( \"From => \" + msg . from_ ) print ( \"Msg => \" + msg . text ) In this example, only the subject attribute was used as a filter. However, the Gmail API offers different possibilities, using other combinations and operators. See more details about search operators in this link . Operations with returned messages With this plugin we were able to perform several operations with messages that were obtained after the search method. # Search for all emails where: # The subject is \"Important!\" # It was sent by the email address: some_sender@gmail.com # It was sent after the date of 01/04/2022 messages = gmail . search_messages ( criteria = \"subject:Important! from:some_sender@gmail.com after:01/04/2022\" ) # For each email found: # Mark as read # Download files in attachments # Reply with the text: \"Received!\" for msg in messages : gmail . mark_as_read ( msg ) gmail . download_attachments ( msg , '/my_folder' ) gmail . reply ( msg , \"Received!\" ) As mentioned before, emails can be filtered using different combinations, separating the operators and their respective values by a blank space. With the returned messages, we were able to perform various operations for each specific message, such as downloading attachments, replying, etc. Managing labels In the Gmail API we have the concept of labels that can be assigned to messages. Using labels, we are able to change the status of an email, the folders where it will be displayed and much more. With this plugin it is also possible to manage these labels, being able to create new ones, add labels to a message and also remove them. from botcity.plugins.gmail import BotGmailPlugin , GmailDefaultLabels # Instantiate the plugin gmail = BotGmailPlugin ( credentials , \"<your_gmail_account>\" ) # Create a new label on email gmail . create_new_label ( \"My Custom Label\" ) # Search for all emails with subject: Test Message messages = gmail . search_messages ( criteria = \"subject:Test Message\" ) for msg in messages : # Returns all labels that the message contains print ( msg . labels ) # Adds to the message one of the standard gmail labels and also a custom label, created by the user. gmail . add_labels_to_message ( msg , default_labels = [ GmailDefaultLabels . STARRED ], customized_labels = [ 'My Custom Label' ]) As demonstrated in the example above, it is possible to add standard Gmail labels to the message, such as STARRED or IMPORTANT, and also add labels created by the user. The default Gmail labels that can be used are defined as an Enum in the GmailDefaultLabels class, to select a value use GmailDefaultLabels.LABEL_NAME. The personalized labels must have a unique name, and when used, the exact name of each desired label must be passed in the operation. Info To see more details about labels and what are their differences, visit this link . Using labels as filters In addition to our criteria string, we can also use email labels as a filter for the messages we want to return from botcity.plugins.gmail import BotGmailPlugin , GmailDefaultLabels # Usage: GmailDefaultLabels.<LABEL_NAME> # Instantiate the plugin gmail = BotGmailPlugin ( credentials , \"<your_gmail_account>\" ) # Returning messages that have the \"TRASH\" label, only messages that are in the trash will be considered msgs_on_trash = gmail . search_messages ( default_labels = [ GmailDefaultLabels . TRASH ]) # Searching using criteria, default labels and custom labels as filters msgs = gmail . search_messages ( criteria = \"before:04/04/2022\" , default_labels = [ GmailDefaultLabels . STARRED , GmailDefaultLabels . UNREAD ], customized_labels = [ 'My Custom Label 1' , 'My Custom Label 2' ]) In this way, we can combine and create filters the way we want. Only messages that have these characteristics and are marked with the informed labels will be returned. We also have the option of not using any labels in the filters. In this case, the messages that are in the INBOX will be considered by default. Sending messages In addition to accessing received emails, we are also able to reply, forward and send new messages. # Instantiate the plugin gmail = BotGmailPlugin ( credentials , \"<your_gmail_account>\" ) # Defining the attributes that will compose the message to = [ \"<RECEIVER_ADDRESS_1>\" , \"<RECEIVER_ADDRESS_2>\" ] cc = [ \"<ANOTHER_ADDRESS>\" ] subject = \"Hello World\" body = \"Hello! This is a test message!\" files = [ \"my_file.txt\" ] # Sending the email message gmail . send_message ( subject , body , to , cc , attachments = files ) Replying or forwarding messages # Searching for all emails that have been starred messages = gmail . search_messages ( default_labels = [ GmailDefaultLabels . STARRED ]) # For each email, reply or forward depending on the subject for msg in messages : if msg . subject == \"Reply this msg!\" : gmail . reply_to_all ( msg , \"Hey!\" ) else : gmail . forward ( msg , to = [ \"<RECEIVER_ADDRESS_1>\" , \"<RECEIVER_ADDRESS_2>\" ]) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-gmail-plugin-python/intro/#getting-started","text":"After you installed this package and get the Google credentials file , the next step is to import the package into your code and start using the functions. from botcity.plugins.gmail import BotGmailPlugin As a demonstration of the library, let's see some examples and features.","title":"Getting Started"},{"location":"botcity-gmail-plugin-python/intro/#setting-up-the-email","text":"First, let's configure the gmail account and the credentials that we will use in the code. # Set the path of the credentials json file credentials = './resources/credentials.json' # Instantiate the plugin gmail = BotGmailPlugin ( credentials , \"<your_gmail_account>\" ) Info Your gmail account must be the same as the one used to generate the credentials.","title":"Setting up the email"},{"location":"botcity-gmail-plugin-python/intro/#searching-for-some-messages","text":"With the account properly configured, let's filter and search for some emails. # Search for all emails with subject: Hello World messages = gmail . search_messages ( criteria = \"subject:Hello World\" ) # For each email found: prints the subject, sender address and text content of the email for msg in messages : print ( \" \\n ----------------------------\" ) print ( \"Subject => \" + msg . subject ) print ( \"From => \" + msg . from_ ) print ( \"Msg => \" + msg . text ) In this example, only the subject attribute was used as a filter. However, the Gmail API offers different possibilities, using other combinations and operators. See more details about search operators in this link .","title":"Searching for some messages"},{"location":"botcity-gmail-plugin-python/intro/#operations-with-returned-messages","text":"With this plugin we were able to perform several operations with messages that were obtained after the search method. # Search for all emails where: # The subject is \"Important!\" # It was sent by the email address: some_sender@gmail.com # It was sent after the date of 01/04/2022 messages = gmail . search_messages ( criteria = \"subject:Important! from:some_sender@gmail.com after:01/04/2022\" ) # For each email found: # Mark as read # Download files in attachments # Reply with the text: \"Received!\" for msg in messages : gmail . mark_as_read ( msg ) gmail . download_attachments ( msg , '/my_folder' ) gmail . reply ( msg , \"Received!\" ) As mentioned before, emails can be filtered using different combinations, separating the operators and their respective values by a blank space. With the returned messages, we were able to perform various operations for each specific message, such as downloading attachments, replying, etc.","title":"Operations with returned messages"},{"location":"botcity-gmail-plugin-python/intro/#managing-labels","text":"In the Gmail API we have the concept of labels that can be assigned to messages. Using labels, we are able to change the status of an email, the folders where it will be displayed and much more. With this plugin it is also possible to manage these labels, being able to create new ones, add labels to a message and also remove them. from botcity.plugins.gmail import BotGmailPlugin , GmailDefaultLabels # Instantiate the plugin gmail = BotGmailPlugin ( credentials , \"<your_gmail_account>\" ) # Create a new label on email gmail . create_new_label ( \"My Custom Label\" ) # Search for all emails with subject: Test Message messages = gmail . search_messages ( criteria = \"subject:Test Message\" ) for msg in messages : # Returns all labels that the message contains print ( msg . labels ) # Adds to the message one of the standard gmail labels and also a custom label, created by the user. gmail . add_labels_to_message ( msg , default_labels = [ GmailDefaultLabels . STARRED ], customized_labels = [ 'My Custom Label' ]) As demonstrated in the example above, it is possible to add standard Gmail labels to the message, such as STARRED or IMPORTANT, and also add labels created by the user. The default Gmail labels that can be used are defined as an Enum in the GmailDefaultLabels class, to select a value use GmailDefaultLabels.LABEL_NAME. The personalized labels must have a unique name, and when used, the exact name of each desired label must be passed in the operation. Info To see more details about labels and what are their differences, visit this link .","title":"Managing labels"},{"location":"botcity-gmail-plugin-python/intro/#using-labels-as-filters","text":"In addition to our criteria string, we can also use email labels as a filter for the messages we want to return from botcity.plugins.gmail import BotGmailPlugin , GmailDefaultLabels # Usage: GmailDefaultLabels.<LABEL_NAME> # Instantiate the plugin gmail = BotGmailPlugin ( credentials , \"<your_gmail_account>\" ) # Returning messages that have the \"TRASH\" label, only messages that are in the trash will be considered msgs_on_trash = gmail . search_messages ( default_labels = [ GmailDefaultLabels . TRASH ]) # Searching using criteria, default labels and custom labels as filters msgs = gmail . search_messages ( criteria = \"before:04/04/2022\" , default_labels = [ GmailDefaultLabels . STARRED , GmailDefaultLabels . UNREAD ], customized_labels = [ 'My Custom Label 1' , 'My Custom Label 2' ]) In this way, we can combine and create filters the way we want. Only messages that have these characteristics and are marked with the informed labels will be returned. We also have the option of not using any labels in the filters. In this case, the messages that are in the INBOX will be considered by default.","title":"Using labels as filters"},{"location":"botcity-gmail-plugin-python/intro/#sending-messages","text":"In addition to accessing received emails, we are also able to reply, forward and send new messages. # Instantiate the plugin gmail = BotGmailPlugin ( credentials , \"<your_gmail_account>\" ) # Defining the attributes that will compose the message to = [ \"<RECEIVER_ADDRESS_1>\" , \"<RECEIVER_ADDRESS_2>\" ] cc = [ \"<ANOTHER_ADDRESS>\" ] subject = \"Hello World\" body = \"Hello! This is a test message!\" files = [ \"my_file.txt\" ] # Sending the email message gmail . send_message ( subject , body , to , cc , attachments = files ) Replying or forwarding messages # Searching for all emails that have been starred messages = gmail . search_messages ( default_labels = [ GmailDefaultLabels . STARRED ]) # For each email, reply or forward depending on the subject for msg in messages : if msg . subject == \"Reply this msg!\" : gmail . reply_to_all ( msg , \"Hey!\" ) else : gmail . forward ( msg , to = [ \"<RECEIVER_ADDRESS_1>\" , \"<RECEIVER_ADDRESS_2>\" ])","title":"Sending messages"},{"location":"botcity-gmail-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-gmail-plugin-python/api/plugin/","text":"botcity.plugins.gmail.plugin.BotGmailPlugin __init__ ( self , credentials_file_path , user_email ) special BotGmailPlugin Parameters: Name Type Description Default credentials_file_path str The path of the credentials json file obtained at Google Cloud Platform. required user_email str The email used to create the credentials. required add_labels_to_message ( self , msg , default_labels = None , customized_labels = None ) Add default and custom labels to the message. Parameters: Name Type Description Default msg BotGmailMessage The message that will receive the labels. required default_labels List[GmailDefaultLabels] The list with the names of the labels defined in the GmailDefaultLabels class. None customized_labels List[str] The list with the names of the labels created by user. None create_new_label ( self , label_name ) Create a new label on email. Parameters: Name Type Description Default label_name str The name of the label to be created. required delete ( self , msg ) Move a email message to trash. Parameters: Name Type Description Default msg BotGmailMessage The message to be deleted. required download_attachments ( self , msg , download_folder_path ) Download attachments from a given email message. Parameters: Name Type Description Default msg BotGmailMessage The message that contains the attachments. required download_folder_path str The path of the folder where the files will be saved. required forward ( self , msg , to_addrs , cc_addrs = None , bcc_addrs = None , include_attachments = True ) Forward a received email message. Parameters: Name Type Description Default msg BotGmailMessage The message to forward. required to_addrs List[str] The list of email addresses that will receive the message. required cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None include_attachments boolean Include attachments from the original message. True get_mail_labels ( self ) Get all valid labels from email. Returns: Type Description List[dict] The list containing the name and id of each label found as a dictionary. mark_as_read ( self , msg ) Mark a email message as read. Parameters: Name Type Description Default msg BotGmailMessage The message to be marked. required mark_as_unread ( self , msg ) Mark a email message as unread. Parameters: Name Type Description Default msg BotGmailMessage The message to be marked. required remove_labels_from_message ( self , msg , default_labels = None , customized_labels = None ) Remove default and custom labels from the message. Parameters: Name Type Description Default msg BotGmailMessage The message that will have the labels removed. required default_labels List[GmailDefaultLabels] The list with the names of the labels defined in the GmailDefaultLabels class. None customized_labels List[str] The list with the names of the labels created by user. None reply ( self , msg , text_content , attachments = None , to_addrs = None , cc_addrs = None , bcc_addrs = None ) Reply a received email message. Parameters: Name Type Description Default msg BotGmailMessage The message to reply. required text_content str The content of the email body. required attachments List[str] The list with the paths of the files that will be sent as attachments. None to_addrs List[str] The list of email addresses that will receive the message. None cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None reply_to_all ( self , msg , text_content , attachments = None ) Replies to all email addresses included in the original message. Parameters: Name Type Description Default msg BotGmailMessage The message to reply. required text_content str The content of the email body. required attachments List[str] The list with the paths of the files that will be sent as attachments. None search_messages ( self , criteria = None , default_labels = None , customized_labels = None , mark_read = False , timeout = 0 ) Search for messages based on criteria and labels. See how to use and more details about searches To see the labels that are available in the email, use get_mail_labels() See more details about messages labels Parameters: Name Type Description Default criteria str The criteria that will be used as a message filter. None default_labels List[GmailDefaultLabels] The list with the names of the labels defined in the GmailDefaultLabels class, which will be considered in the message filter. None customized_labels List[str] The list with the names of the labels created by user which will be considered in the message filter. None mark_read boolean Whether the email should be marked as read. Defaults to False. False timeout int Wait for a new message until this timeout. Defaults to 0 seconds (don't wait for new messages). 0 send_message ( self , subject , text_content , to_addrs , cc_addrs = None , bcc_addrs = None , attachments = None ) Send a new email message. Parameters: Name Type Description Default subject str The subject of the email. required text_content str The content of the email body. required to_addrs List[str] The list of email addresses that will receive the message. required cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None attachments List[str] The list with the paths of the files that will be sent as attachments. None","title":"Plugin"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin","text":"","title":"BotGmailPlugin"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.__init__","text":"BotGmailPlugin Parameters: Name Type Description Default credentials_file_path str The path of the credentials json file obtained at Google Cloud Platform. required user_email str The email used to create the credentials. required","title":"__init__()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.add_labels_to_message","text":"Add default and custom labels to the message. Parameters: Name Type Description Default msg BotGmailMessage The message that will receive the labels. required default_labels List[GmailDefaultLabels] The list with the names of the labels defined in the GmailDefaultLabels class. None customized_labels List[str] The list with the names of the labels created by user. None","title":"add_labels_to_message()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.create_new_label","text":"Create a new label on email. Parameters: Name Type Description Default label_name str The name of the label to be created. required","title":"create_new_label()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.delete","text":"Move a email message to trash. Parameters: Name Type Description Default msg BotGmailMessage The message to be deleted. required","title":"delete()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.download_attachments","text":"Download attachments from a given email message. Parameters: Name Type Description Default msg BotGmailMessage The message that contains the attachments. required download_folder_path str The path of the folder where the files will be saved. required","title":"download_attachments()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.forward","text":"Forward a received email message. Parameters: Name Type Description Default msg BotGmailMessage The message to forward. required to_addrs List[str] The list of email addresses that will receive the message. required cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None include_attachments boolean Include attachments from the original message. True","title":"forward()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.get_mail_labels","text":"Get all valid labels from email. Returns: Type Description List[dict] The list containing the name and id of each label found as a dictionary.","title":"get_mail_labels()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.mark_as_read","text":"Mark a email message as read. Parameters: Name Type Description Default msg BotGmailMessage The message to be marked. required","title":"mark_as_read()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.mark_as_unread","text":"Mark a email message as unread. Parameters: Name Type Description Default msg BotGmailMessage The message to be marked. required","title":"mark_as_unread()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.remove_labels_from_message","text":"Remove default and custom labels from the message. Parameters: Name Type Description Default msg BotGmailMessage The message that will have the labels removed. required default_labels List[GmailDefaultLabels] The list with the names of the labels defined in the GmailDefaultLabels class. None customized_labels List[str] The list with the names of the labels created by user. None","title":"remove_labels_from_message()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.reply","text":"Reply a received email message. Parameters: Name Type Description Default msg BotGmailMessage The message to reply. required text_content str The content of the email body. required attachments List[str] The list with the paths of the files that will be sent as attachments. None to_addrs List[str] The list of email addresses that will receive the message. None cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None","title":"reply()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.reply_to_all","text":"Replies to all email addresses included in the original message. Parameters: Name Type Description Default msg BotGmailMessage The message to reply. required text_content str The content of the email body. required attachments List[str] The list with the paths of the files that will be sent as attachments. None","title":"reply_to_all()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.search_messages","text":"Search for messages based on criteria and labels. See how to use and more details about searches To see the labels that are available in the email, use get_mail_labels() See more details about messages labels Parameters: Name Type Description Default criteria str The criteria that will be used as a message filter. None default_labels List[GmailDefaultLabels] The list with the names of the labels defined in the GmailDefaultLabels class, which will be considered in the message filter. None customized_labels List[str] The list with the names of the labels created by user which will be considered in the message filter. None mark_read boolean Whether the email should be marked as read. Defaults to False. False timeout int Wait for a new message until this timeout. Defaults to 0 seconds (don't wait for new messages). 0","title":"search_messages()"},{"location":"botcity-gmail-plugin-python/api/plugin/#botcity.plugins.gmail.plugin.BotGmailPlugin.send_message","text":"Send a new email message. Parameters: Name Type Description Default subject str The subject of the email. required text_content str The content of the email body. required to_addrs List[str] The list of email addresses that will receive the message. required cc_addrs List[str] The list of email addresses that will receive the message as CC. None bcc_addrs List[str] The list of email addresses that will receive the message as BCC. None attachments List[str] The list with the paths of the files that will be sent as attachments. None","title":"send_message()"},{"location":"botcity-googledrive-plugin-python/","text":"Welcome Welcome to BotCity's Google Drive Plugin. Installation Latest release Using PyPI pip install botcity-googledrive-plugin Google Credentials See how to create and configure your credentials file in this section .","title":"Home"},{"location":"botcity-googledrive-plugin-python/#welcome","text":"Welcome to BotCity's Google Drive Plugin.","title":"Welcome"},{"location":"botcity-googledrive-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-googledrive-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-googledrive-plugin-python/#using-pypi","text":"pip install botcity-googledrive-plugin","title":"Using PyPI"},{"location":"botcity-googledrive-plugin-python/#google-credentials","text":"See how to create and configure your credentials file in this section .","title":"Google Credentials"},{"location":"botcity-googledrive-plugin-python/credentials/","text":"Creating Google Credentials In order to be able to access the resources offered by Google APIs, we must first generate a file of credentials from a Google account. In a few steps it is possible to get the json file that will be responsible for authenticating our account to Google services. Creating a Google Cloud Platform project First we need to create a project that will be used as a base to generate the credentials. It is in this project that we will define the APIs that we will use, in this case the Drive API . Open the Google Cloud Platform with the Google account you want to use. At the top-left, click on Navigation menu > IAM & Admin > Create a Project . Choose a Project Name and select the Location of your project. In the case of this plugin, an organization is not required. Warning If you don't see any organization when you click BROWSE, it's probably because you're using a personal account instead of a Google Workspace account. Some of the features described in Google Workspace developer documentation are only available to projects associated with an organization, so keep attention on this. For this plugin, the option of \"No organization\" can be used. Click Create to complete this step. Enabling the Drive API With our project created, let's activate the APIs we want to use. In this case we will only use the Drive API . At the top-left, click on Navigation menu > APIs & Services > Library . In the search field, enter the name Drive API and press Enter. In the search results list, select the API and click Enable Creating OAuth Client ID Credentials With the API activated, let's create the credentials that we will use to access the features through our application. At the top-left, click on Navigation menu > APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID . Warning In some cases, if you are creating credentials for the first time, you may see a message regarding the consent configuration. In this case, you need to click Configure Consent Screen and follow these steps: In User Type, select Internal if you are using a Google Workspace account, External otherwise. On the OAuth consent screen tab you just need to fill in the required fields: App name , User support email and the Email address in the Developer contact information section. Click Save and Continue In the Scopes tab it is not necessary to change anything, just click on Save and Continue again. In the Test Users tab, if you are not using an organization and you selected the User Type as External in the first step, you will need to add the emails that will be allowed to use the credentials. Just click on Add Users and add the email used to create the project. If you want, you can add and give permissions to other emails as well. At the end, click on Save and Continue . Info If you selected Internal in User Type, you can skip the step above. Just click on Save and Continue . On the Summary tab click on Back to Dashboard . With the OAuth consent screen configured, back to APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID again. In Application type select Desktop app , choose a Name and click Create . After that, the credentials are ready to be used. Downloading the OAuth credentials file Click on the option Download OAuth client , in the credential line that was created. Select Download JSON and save the file wherever you see fit. You can also rename the downloaded file. With the file in hand, just pass the path of this file when instantiating the plugin. Tip The first time you run a process using the credentials, a tab will open in the browser for you to authenticate your account. Just select the account used to create the credentials and allow access to the resources. After that, a token file will be generated automatically, making it no longer necessary to repeat this login process. Google Documentation References You can get more information about what has been described here through the following links: Create a Google Cloud Platform project ( details here ) Activate the Drive API ( details here ) Create OAuth client ID credentials ( details here ) and ( here )","title":"Google Credentials"},{"location":"botcity-googledrive-plugin-python/credentials/#creating-google-credentials","text":"In order to be able to access the resources offered by Google APIs, we must first generate a file of credentials from a Google account. In a few steps it is possible to get the json file that will be responsible for authenticating our account to Google services.","title":"Creating Google Credentials"},{"location":"botcity-googledrive-plugin-python/credentials/#creating-a-google-cloud-platform-project","text":"First we need to create a project that will be used as a base to generate the credentials. It is in this project that we will define the APIs that we will use, in this case the Drive API . Open the Google Cloud Platform with the Google account you want to use. At the top-left, click on Navigation menu > IAM & Admin > Create a Project . Choose a Project Name and select the Location of your project. In the case of this plugin, an organization is not required. Warning If you don't see any organization when you click BROWSE, it's probably because you're using a personal account instead of a Google Workspace account. Some of the features described in Google Workspace developer documentation are only available to projects associated with an organization, so keep attention on this. For this plugin, the option of \"No organization\" can be used. Click Create to complete this step.","title":"Creating a Google Cloud Platform project"},{"location":"botcity-googledrive-plugin-python/credentials/#enabling-the-drive-api","text":"With our project created, let's activate the APIs we want to use. In this case we will only use the Drive API . At the top-left, click on Navigation menu > APIs & Services > Library . In the search field, enter the name Drive API and press Enter. In the search results list, select the API and click Enable","title":"Enabling the Drive API"},{"location":"botcity-googledrive-plugin-python/credentials/#creating-oauth-client-id-credentials","text":"With the API activated, let's create the credentials that we will use to access the features through our application. At the top-left, click on Navigation menu > APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID . Warning In some cases, if you are creating credentials for the first time, you may see a message regarding the consent configuration. In this case, you need to click Configure Consent Screen and follow these steps: In User Type, select Internal if you are using a Google Workspace account, External otherwise. On the OAuth consent screen tab you just need to fill in the required fields: App name , User support email and the Email address in the Developer contact information section. Click Save and Continue In the Scopes tab it is not necessary to change anything, just click on Save and Continue again. In the Test Users tab, if you are not using an organization and you selected the User Type as External in the first step, you will need to add the emails that will be allowed to use the credentials. Just click on Add Users and add the email used to create the project. If you want, you can add and give permissions to other emails as well. At the end, click on Save and Continue . Info If you selected Internal in User Type, you can skip the step above. Just click on Save and Continue . On the Summary tab click on Back to Dashboard . With the OAuth consent screen configured, back to APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID again. In Application type select Desktop app , choose a Name and click Create . After that, the credentials are ready to be used.","title":"Creating OAuth Client ID Credentials"},{"location":"botcity-googledrive-plugin-python/credentials/#downloading-the-oauth-credentials-file","text":"Click on the option Download OAuth client , in the credential line that was created. Select Download JSON and save the file wherever you see fit. You can also rename the downloaded file. With the file in hand, just pass the path of this file when instantiating the plugin. Tip The first time you run a process using the credentials, a tab will open in the browser for you to authenticate your account. Just select the account used to create the credentials and allow access to the resources. After that, a token file will be generated automatically, making it no longer necessary to repeat this login process. Google Documentation References You can get more information about what has been described here through the following links: Create a Google Cloud Platform project ( details here ) Activate the Drive API ( details here ) Create OAuth client ID credentials ( details here ) and ( here )","title":"Downloading the OAuth credentials file"},{"location":"botcity-googledrive-plugin-python/intro/","text":"Getting Started After you installed this package and get the Google credentials file , the next step is to import the package into your code and start using the functions. from botcity.plugins.googledrive import BotGoogleDrivePlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will instantiate the plugin and search for a file by name. # Set the path of the credentials json file credentials = './resources/credentials.json' # Instantiate the plugin googledrive = BotGoogleDrivePlugin ( credentials ) # Get the id of the file named \"my_image.png\" stored on the drive file_id = googledrive . search_file_by_name ( \"my_image.png\" ) Step 2 of Example Now we will download the file which we search at Step 1. # With the obtained id, download the file googledrive . download_file ( file_id , './images/my_image_from_drive.png' ) Complete code Let's take a look into the complete code: # Import the plugin from botcity.plugins.googledrive import BotGoogleDrivePlugin # Set the path of the credentials json file credentials = './resources/credentials.json' # Instantiate the plugin googledrive = BotGoogleDrivePlugin ( credentials ) # Get the id of the file named \"my_image.png\" stored on the drive file_id = googledrive . search_file_by_name ( \"my_image.png\" ) # With the obtained id, download the file googledrive . download_file ( file_id , './images/my_image_from_drive.png' ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-googledrive-plugin-python/intro/#getting-started","text":"After you installed this package and get the Google credentials file , the next step is to import the package into your code and start using the functions. from botcity.plugins.googledrive import BotGoogleDrivePlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-googledrive-plugin-python/intro/#step-1-of-example","text":"To make the example we will instantiate the plugin and search for a file by name. # Set the path of the credentials json file credentials = './resources/credentials.json' # Instantiate the plugin googledrive = BotGoogleDrivePlugin ( credentials ) # Get the id of the file named \"my_image.png\" stored on the drive file_id = googledrive . search_file_by_name ( \"my_image.png\" )","title":"Step 1 of Example"},{"location":"botcity-googledrive-plugin-python/intro/#step-2-of-example","text":"Now we will download the file which we search at Step 1. # With the obtained id, download the file googledrive . download_file ( file_id , './images/my_image_from_drive.png' )","title":"Step 2 of Example"},{"location":"botcity-googledrive-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Import the plugin from botcity.plugins.googledrive import BotGoogleDrivePlugin # Set the path of the credentials json file credentials = './resources/credentials.json' # Instantiate the plugin googledrive = BotGoogleDrivePlugin ( credentials ) # Get the id of the file named \"my_image.png\" stored on the drive file_id = googledrive . search_file_by_name ( \"my_image.png\" ) # With the obtained id, download the file googledrive . download_file ( file_id , './images/my_image_from_drive.png' )","title":"Complete code"},{"location":"botcity-googledrive-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-googledrive-plugin-python/api/plugin/","text":"botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin __init__ ( self , credentials_file_path ) special BotGoogleDrivePlugin. Parameters: Name Type Description Default credentials_file_path str The path of the credentials json file obtained at Google Cloud Platform. required create_folder ( self , folder_name ) Create a folder on Google Drive. Parameters: Name Type Description Default folder_name str Name of the folder to be created. required Returns: Type Description str The id of the created folder. delete_file ( self , file_id ) Delete a file stored on Google Drive. Parameters: Name Type Description Default file_id str Id of the file to be deleted. required download_file ( self , file_id , file_path ) Download a file stored on Google Drive. Parameters: Name Type Description Default file_id str Id of the file to be downloaded. required file_path str Path where the file will be saved. required export_file ( self , file_id , file_path , mime_type ) Download a Google Workspace Document stored on Google Drive. Parameters: Name Type Description Default file_id str Id of the file to be downloaded. required file_path str Path where the file will be saved. required mime_type str MIME type corresponding to the Google Workspace document to be downloaded. required get_files_from_parent_folder ( self , parent_folder_id ) Searches for every file and folder inside a parent folder. Parameters: Name Type Description Default parent_folder_id str The id of the folder containing the files to be returned. required Returns: Type Description List The list of found ids. search_file_by_name ( self , filename ) Searches for a file on google drive by the file name. Parameters: Name Type Description Default filename str The exact name of the file to be fetched. required Returns: Type Description str The id of the file found. search_folder_by_name ( self , folder_name ) Searches for a folder on google drive by the folder name. Parameters: Name Type Description Default folder_name str The exact name of the folder to be fetched. required Returns: Type Description str The id of the folder found. upload_file ( self , file_path , file_name , parent_folder_id = None , mime_type = None ) Upload a file on Google Drive. Parameters: Name Type Description Default file_path str Path to the file to be used. required file_name str Name of the file that will be displayed on the drive. required parent_folder_id Optional[str] Id of the folder that will receive the file, otherwise it will be uploaded to the main folder. None mime_type Optional[str] The MIME type corresponding to the file if necessary. None","title":"Plugin"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin","text":"","title":"BotGoogleDrivePlugin"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin.__init__","text":"BotGoogleDrivePlugin. Parameters: Name Type Description Default credentials_file_path str The path of the credentials json file obtained at Google Cloud Platform. required","title":"__init__()"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin.create_folder","text":"Create a folder on Google Drive. Parameters: Name Type Description Default folder_name str Name of the folder to be created. required Returns: Type Description str The id of the created folder.","title":"create_folder()"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin.delete_file","text":"Delete a file stored on Google Drive. Parameters: Name Type Description Default file_id str Id of the file to be deleted. required","title":"delete_file()"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin.download_file","text":"Download a file stored on Google Drive. Parameters: Name Type Description Default file_id str Id of the file to be downloaded. required file_path str Path where the file will be saved. required","title":"download_file()"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin.export_file","text":"Download a Google Workspace Document stored on Google Drive. Parameters: Name Type Description Default file_id str Id of the file to be downloaded. required file_path str Path where the file will be saved. required mime_type str MIME type corresponding to the Google Workspace document to be downloaded. required","title":"export_file()"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin.get_files_from_parent_folder","text":"Searches for every file and folder inside a parent folder. Parameters: Name Type Description Default parent_folder_id str The id of the folder containing the files to be returned. required Returns: Type Description List The list of found ids.","title":"get_files_from_parent_folder()"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin.search_file_by_name","text":"Searches for a file on google drive by the file name. Parameters: Name Type Description Default filename str The exact name of the file to be fetched. required Returns: Type Description str The id of the file found.","title":"search_file_by_name()"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin.search_folder_by_name","text":"Searches for a folder on google drive by the folder name. Parameters: Name Type Description Default folder_name str The exact name of the folder to be fetched. required Returns: Type Description str The id of the folder found.","title":"search_folder_by_name()"},{"location":"botcity-googledrive-plugin-python/api/plugin/#botcity.plugins.googledrive.plugin.BotGoogleDrivePlugin.upload_file","text":"Upload a file on Google Drive. Parameters: Name Type Description Default file_path str Path to the file to be used. required file_name str Name of the file that will be displayed on the drive. required parent_folder_id Optional[str] Id of the folder that will receive the file, otherwise it will be uploaded to the main folder. None mime_type Optional[str] The MIME type corresponding to the file if necessary. None","title":"upload_file()"},{"location":"botcity-googlesheets-plugin-python/","text":"Welcome Welcome to BotCity's Googlesheets Plugin. Installation Latest release Using PyPI pip install botcity-googlesheets-plugin Google Credentials See how to create and configure your credentials file in this section .","title":"Home"},{"location":"botcity-googlesheets-plugin-python/#welcome","text":"Welcome to BotCity's Googlesheets Plugin.","title":"Welcome"},{"location":"botcity-googlesheets-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-googlesheets-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-googlesheets-plugin-python/#using-pypi","text":"pip install botcity-googlesheets-plugin","title":"Using PyPI"},{"location":"botcity-googlesheets-plugin-python/#google-credentials","text":"See how to create and configure your credentials file in this section .","title":"Google Credentials"},{"location":"botcity-googlesheets-plugin-python/credentials/","text":"Creating Google Credentials In order to be able to access the resources offered by Google APIs, we must first generate a file of credentials from a Google account. In a few steps it is possible to get the json file that will be responsible for authenticating our account to Google services. Creating a Google Cloud Platform project First we need to create a project that will be used as a base to generate the credentials. It is in this project that we will define the APIs that we will use, in this case the Sheets API . Open the Google Cloud Platform with the Google account you want to use. At the top-left, click on Navigation menu > IAM & Admin > Create a Project . Choose a Project Name and select the Location of your project. In the case of this plugin, an organization is not required. Warning If you don't see any organization when you click BROWSE, it's probably because you're using a personal account instead of a Google Workspace account. Some of the features described in Google Workspace developer documentation are only available to projects associated with an organization, so keep attention on this. For this plugin, the option of \"No organization\" can be used. Click Create to complete this step. Enabling the Sheets API With our project created, let's activate the APIs we want to use. In this case we will only use the Sheets API . At the top-left, click on Navigation menu > APIs & Services > Library . In the search field, enter the name Sheets API and press Enter. In the search results list, select the API and click Enable Creating OAuth Client ID Credentials With the API activated, let's create the credentials that we will use to access the features through our application. At the top-left, click on Navigation menu > APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID . Warning In some cases, if you are creating credentials for the first time, you may see a message regarding the consent configuration. In this case, you need to click Configure Consent Screen and follow these steps: In User Type, select Internal if you are using a Google Workspace account, External otherwise. On the OAuth consent screen tab you just need to fill in the required fields: App name , User support email and the Email address in the Developer contact information section. Click Save and Continue In the Scopes tab it is not necessary to change anything, just click on Save and Continue again. In the Test Users tab, if you are not using an organization and you selected the User Type as External in the first step, you will need to add the emails that will be allowed to use the credentials. Just click on Add Users and add the email used to create the project. If you want, you can add and give permissions to other emails as well. At the end, click on Save and Continue . Info If you selected Internal in User Type, you can skip the step above. Just click on Save and Continue . On the Summary tab click on Back to Dashboard . With the OAuth consent screen configured, back to APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID again. In Application type select Desktop app , choose a Name and click Create . After that, the credentials are ready to be used. Downloading the OAuth credentials file Click on the option Download OAuth client , in the credential line that was created. Select Download JSON and save the file wherever you see fit. You can also rename the downloaded file. With the file in hand, just pass the path of this file when instantiating the plugin. Tip The first time you run a process using the credentials, a tab will open in the browser for you to authenticate your account. Just select the account used to create the credentials and allow access to the resources. After that, a token file will be generated automatically, making it no longer necessary to repeat this login process. Google Documentation References You can get more information about what has been described here through the following links: Create a Google Cloud Platform project ( details here ) Activate the Sheets API ( details here ) Create OAuth client ID credentials ( details here ) and ( here )","title":"Google Credentials"},{"location":"botcity-googlesheets-plugin-python/credentials/#creating-google-credentials","text":"In order to be able to access the resources offered by Google APIs, we must first generate a file of credentials from a Google account. In a few steps it is possible to get the json file that will be responsible for authenticating our account to Google services.","title":"Creating Google Credentials"},{"location":"botcity-googlesheets-plugin-python/credentials/#creating-a-google-cloud-platform-project","text":"First we need to create a project that will be used as a base to generate the credentials. It is in this project that we will define the APIs that we will use, in this case the Sheets API . Open the Google Cloud Platform with the Google account you want to use. At the top-left, click on Navigation menu > IAM & Admin > Create a Project . Choose a Project Name and select the Location of your project. In the case of this plugin, an organization is not required. Warning If you don't see any organization when you click BROWSE, it's probably because you're using a personal account instead of a Google Workspace account. Some of the features described in Google Workspace developer documentation are only available to projects associated with an organization, so keep attention on this. For this plugin, the option of \"No organization\" can be used. Click Create to complete this step.","title":"Creating a Google Cloud Platform project"},{"location":"botcity-googlesheets-plugin-python/credentials/#enabling-the-sheets-api","text":"With our project created, let's activate the APIs we want to use. In this case we will only use the Sheets API . At the top-left, click on Navigation menu > APIs & Services > Library . In the search field, enter the name Sheets API and press Enter. In the search results list, select the API and click Enable","title":"Enabling the Sheets API"},{"location":"botcity-googlesheets-plugin-python/credentials/#creating-oauth-client-id-credentials","text":"With the API activated, let's create the credentials that we will use to access the features through our application. At the top-left, click on Navigation menu > APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID . Warning In some cases, if you are creating credentials for the first time, you may see a message regarding the consent configuration. In this case, you need to click Configure Consent Screen and follow these steps: In User Type, select Internal if you are using a Google Workspace account, External otherwise. On the OAuth consent screen tab you just need to fill in the required fields: App name , User support email and the Email address in the Developer contact information section. Click Save and Continue In the Scopes tab it is not necessary to change anything, just click on Save and Continue again. In the Test Users tab, if you are not using an organization and you selected the User Type as External in the first step, you will need to add the emails that will be allowed to use the credentials. Just click on Add Users and add the email used to create the project. If you want, you can add and give permissions to other emails as well. At the end, click on Save and Continue . Info If you selected Internal in User Type, you can skip the step above. Just click on Save and Continue . On the Summary tab click on Back to Dashboard . With the OAuth consent screen configured, back to APIs & Services > Credentials . Click on + Create Credentials and select OAuth client ID again. In Application type select Desktop app , choose a Name and click Create . After that, the credentials are ready to be used.","title":"Creating OAuth Client ID Credentials"},{"location":"botcity-googlesheets-plugin-python/credentials/#downloading-the-oauth-credentials-file","text":"Click on the option Download OAuth client , in the credential line that was created. Select Download JSON and save the file wherever you see fit. You can also rename the downloaded file. With the file in hand, just pass the path of this file when instantiating the plugin. Tip The first time you run a process using the credentials, a tab will open in the browser for you to authenticate your account. Just select the account used to create the credentials and allow access to the resources. After that, a token file will be generated automatically, making it no longer necessary to repeat this login process. Google Documentation References You can get more information about what has been described here through the following links: Create a Google Cloud Platform project ( details here ) Activate the Sheets API ( details here ) Create OAuth client ID credentials ( details here ) and ( here )","title":"Downloading the OAuth credentials file"},{"location":"botcity-googlesheets-plugin-python/intro/","text":"Getting Started After you installed this package and set up your Google Credentials , the next step is to import the package into your code and start using its functions. from botcity.plugins.googlesheets import BotGoogleSheetsPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin bot_sheets = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) Step 2 of Example # Adds some data bot_sheets . add_row ([ 'Name' , 'Age' ]) bot_sheets . add_rows ([ 'Peter' , '53' ], [ 'Paulo' , '35' ]) # Sorts the columns by ascending age bot_sheets . sort ( 'B' ) # Prints the resulting list print ( bot_sheets . as_list ()) Complete code Let's take a look into the complete code: from botcity.plugins.googlesheets import BotGoogleSheetsPlugin # Instantiate the plugin bot_sheets = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) # Adds some data bot_sheets . add_row ([ 'Name' , 'Age' ]) bot_sheets . add_rows ([ 'Peter' , '53' ], [ 'Paulo' , '35' ]) # Sorts the columns by ascending age bot_sheets . sort ( 'B' ) # Prints the resulting list print ( bot_sheets . as_list ()) Pro Tip This plugin allow you to use method chaining so the code above could be written as: data = [[ 'Name' , 'Age' ], [ 'Peter' , '53' ], [ 'Paulo' , '35' ]] sorted_data = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) . add_rows ( rows ) . sort ( 'B' ) . as_list () print ( sorted_data ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-googlesheets-plugin-python/intro/#getting-started","text":"After you installed this package and set up your Google Credentials , the next step is to import the package into your code and start using its functions. from botcity.plugins.googlesheets import BotGoogleSheetsPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-googlesheets-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin bot_sheets = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' )","title":"Step 1 of Example"},{"location":"botcity-googlesheets-plugin-python/intro/#step-2-of-example","text":"# Adds some data bot_sheets . add_row ([ 'Name' , 'Age' ]) bot_sheets . add_rows ([ 'Peter' , '53' ], [ 'Paulo' , '35' ]) # Sorts the columns by ascending age bot_sheets . sort ( 'B' ) # Prints the resulting list print ( bot_sheets . as_list ())","title":"Step 2 of Example"},{"location":"botcity-googlesheets-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.plugins.googlesheets import BotGoogleSheetsPlugin # Instantiate the plugin bot_sheets = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) # Adds some data bot_sheets . add_row ([ 'Name' , 'Age' ]) bot_sheets . add_rows ([ 'Peter' , '53' ], [ 'Paulo' , '35' ]) # Sorts the columns by ascending age bot_sheets . sort ( 'B' ) # Prints the resulting list print ( bot_sheets . as_list ())","title":"Complete code"},{"location":"botcity-googlesheets-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: data = [[ 'Name' , 'Age' ], [ 'Peter' , '53' ], [ 'Paulo' , '35' ]] sorted_data = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) . add_rows ( rows ) . sort ( 'B' ) . as_list () print ( sorted_data )","title":"Pro Tip"},{"location":"botcity-googlesheets-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-googlesheets-plugin-python/api/plugin/","text":"botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin __init__ ( self , client_secret_path , spreadsheet_id , active_sheet = None ) special This class gives you easy access to Google Sheets API's functionalities. This plugin works with one spreadsheet at a time, so if you want to access multiple files, simply create multiple objects of this class. However, if you need to work with different sheets within the same file, you can do so by supplying the sheet's name to this class's methods, or change the default sheet with set_active_sheet(). Parameters: Name Type Description Default client_secret_path str The path to your client_secret file. Get it from your Google Cloud Console! required spreadsheet_id str The ID of a Google Spreadsheet file. You can get it from the file's URL. required active_sheet str, Optional The sheet this plugin will access by default. If None, the first sheet is used. Defaults to None. None add_column ( self , column , sheet = None ) Adds a new column to the right end of the sheet. Parameters: Name Type Description Default column List[object] A list with the cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) add_columns ( self , columns , sheet = None ) Adds new columns to the right end of the sheet. Parameters: Name Type Description Default columns List[List[object]] A list of rows. Each row is a list with cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) add_row ( self , row , sheet = None ) Adds a new row to the bottom of the sheet. Parameters: Name Type Description Default row List[object] A list with the cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) add_rows ( self , rows , sheet = None ) Adds new rows to the bottom of the sheet. Parameters: Name Type Description Default rows List[List[object]] A list of rows. Each row is a list with cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) as_list ( self , sheet = None ) Returns the contents of an entire sheet in a list of lists format. This is equivalent to get_range(\"\", sheet). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list of rows. Each row is a list of cell values. clear ( self , sheet = None ) Clears an entire sheet. Only the cells' content is removed, while their formatting remains. This method is equivalent to clear_range(\"\"). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) clear_range ( self , range_ , sheet = None ) Clears the provided area of the sheet. Only the cells' content is removed, while the formatting remains. Parameters: Name Type Description Default range_ str The range to be cleared, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) create_sheet ( self , sheet ) Creates a new sheet within the spreadsheet. Parameters: Name Type Description Default sheet str The new sheet's name. required Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) get_cell ( self , column , row , sheet = None ) Returns the value of a single cell. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required row int The cell's 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description object The cell's value. get_column ( self , column , sheet = None ) Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the column. get_range ( self , range_ , sheet = None ) Returns the values of all cells within an area of the sheet in a list of list format. Parameters: Name Type Description Default range_ str The range (minus the sheet) to be retrieved, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list with the recovered rows. Each row is a list of objects. get_row ( self , row , sheet = None ) Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default row int The 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the row. get_spreadsheet_id ( self ) Returns the ID of the spreadsheet this plugin is currently linked to. Specially useful if created a new sheet using the new_spreadsheet class method, since you wouldn't know it's ID. Returns: Type Description str The ID of a Google Spreadsheet file. get_spreadsheet_link ( self ) Returns the URL Link to the spreadsheet this plugin is currently linked to. Returns: Type Description str The URL to a Google Spreadsheet file. list_sheets ( self ) Returns a list with the name of all the sheets in this spreadsheet. Returns: Type Description List[str] A list of sheet names. new_spreadsheet ( client_secret_path , name ) classmethod An alternative way to initialize the plugin. This factory method will create a new spreadsheet, and return an initialized object of the plugin that refers to it. Parameters: Name Type Description Default client_secret_path str The path to your client_secret file. Get it from your Google Cloud Console! required name str The name of the new spreadsheet. required Returns: Type Description BotGoogleSheetsPlugin An initialized object of the plugin points to the newly created sheet. remove_column ( self , column , sheet = None ) Removes a single column from the sheet. Keep in mind that the columns to its right will be moved to the left. Parameters: Name Type Description Default column str The letter-indexed name ('a', 'A', 'AA') of the column to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) remove_columns ( self , columns , sheet = None ) Removes columns from the sheet. Keep in mind that each column removed will cause the columns to its right to be moved left. For this reason, this method will sort the indexes of the columns you provide, and remove then in descending order. Parameters: Name Type Description Default columns List[str] A list of the letter-indexed names of the columns to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) remove_row ( self , row , sheet = None ) Removes a single row from the sheet. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) remove_rows ( self , rows , sheet = None ) Removes rows from the sheet. Keep in mind that each row removed will cause the rows below it to be moved up. For this reason, this method will sort the indexes of the rows you provide, and remove then in descending order. Parameters: Name Type Description Default rows List[int] A list of the 1-indexed numbers of the rows to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) remove_sheet ( self , sheet = None ) Removes a sheet from the spreadsheet. Keep in mind that if you remove the active_sheet, you must set another sheet as active before using trying to modify it! Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) set_cell ( self , column , row , value , sheet = None ) Replaces the value of a single cell. Parameters: Name Type Description Default column str The cell's letter-indexed column name. required row int The cell's 1-indexed row number. required value object The new value of the cell. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) set_range ( self , values , range_ = None , sheet = None ) Replace the values within an area of the sheet by the values supplied. Parameters: Name Type Description Default values List[List[object]] A list of rows. Each row is a list of cell values. required range_ str, Optional The range (minus the sheet) to have its values replaced, in A1 format. Ex: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str (str, Optional): If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) sort ( self , by_columns , ascending = True , start_row = 2 , end_row = None , sheet = None ) Sorts the sheet's rows according to the columns provided. Unless the start and end point are provided, all rows minus the first one will be sorted! Parameters: Name Type Description Default by_columns Union[str, List[str]] Either a letter-indexed column name to sort the rows by, or a list of them. In case of a tie, the second column is used, and so on. required ascending bool, Optional Set to False to sort by descending order. Defaults to True. True start_row str, Optional The 1-indexed row number where the sort will start from. Defaults to 2. 2 end_row str, Optional The 1-indexed row number where the sort will end at (inclusive). Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"Plugin"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin","text":"","title":"BotGoogleSheetsPlugin"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.__init__","text":"This class gives you easy access to Google Sheets API's functionalities. This plugin works with one spreadsheet at a time, so if you want to access multiple files, simply create multiple objects of this class. However, if you need to work with different sheets within the same file, you can do so by supplying the sheet's name to this class's methods, or change the default sheet with set_active_sheet(). Parameters: Name Type Description Default client_secret_path str The path to your client_secret file. Get it from your Google Cloud Console! required spreadsheet_id str The ID of a Google Spreadsheet file. You can get it from the file's URL. required active_sheet str, Optional The sheet this plugin will access by default. If None, the first sheet is used. Defaults to None. None","title":"__init__()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.add_column","text":"Adds a new column to the right end of the sheet. Parameters: Name Type Description Default column List[object] A list with the cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"add_column()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.add_columns","text":"Adds new columns to the right end of the sheet. Parameters: Name Type Description Default columns List[List[object]] A list of rows. Each row is a list with cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"add_columns()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.add_row","text":"Adds a new row to the bottom of the sheet. Parameters: Name Type Description Default row List[object] A list with the cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"add_row()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.add_rows","text":"Adds new rows to the bottom of the sheet. Parameters: Name Type Description Default rows List[List[object]] A list of rows. Each row is a list with cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"add_rows()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.as_list","text":"Returns the contents of an entire sheet in a list of lists format. This is equivalent to get_range(\"\", sheet). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list of rows. Each row is a list of cell values.","title":"as_list()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.clear","text":"Clears an entire sheet. Only the cells' content is removed, while their formatting remains. This method is equivalent to clear_range(\"\"). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"clear()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.clear_range","text":"Clears the provided area of the sheet. Only the cells' content is removed, while the formatting remains. Parameters: Name Type Description Default range_ str The range to be cleared, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"clear_range()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.create_sheet","text":"Creates a new sheet within the spreadsheet. Parameters: Name Type Description Default sheet str The new sheet's name. required Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"create_sheet()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_cell","text":"Returns the value of a single cell. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required row int The cell's 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description object The cell's value.","title":"get_cell()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_column","text":"Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the column.","title":"get_column()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_range","text":"Returns the values of all cells within an area of the sheet in a list of list format. Parameters: Name Type Description Default range_ str The range (minus the sheet) to be retrieved, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list with the recovered rows. Each row is a list of objects.","title":"get_range()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_row","text":"Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default row int The 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the row.","title":"get_row()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_spreadsheet_id","text":"Returns the ID of the spreadsheet this plugin is currently linked to. Specially useful if created a new sheet using the new_spreadsheet class method, since you wouldn't know it's ID. Returns: Type Description str The ID of a Google Spreadsheet file.","title":"get_spreadsheet_id()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_spreadsheet_link","text":"Returns the URL Link to the spreadsheet this plugin is currently linked to. Returns: Type Description str The URL to a Google Spreadsheet file.","title":"get_spreadsheet_link()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.list_sheets","text":"Returns a list with the name of all the sheets in this spreadsheet. Returns: Type Description List[str] A list of sheet names.","title":"list_sheets()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.new_spreadsheet","text":"An alternative way to initialize the plugin. This factory method will create a new spreadsheet, and return an initialized object of the plugin that refers to it. Parameters: Name Type Description Default client_secret_path str The path to your client_secret file. Get it from your Google Cloud Console! required name str The name of the new spreadsheet. required Returns: Type Description BotGoogleSheetsPlugin An initialized object of the plugin points to the newly created sheet.","title":"new_spreadsheet()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_column","text":"Removes a single column from the sheet. Keep in mind that the columns to its right will be moved to the left. Parameters: Name Type Description Default column str The letter-indexed name ('a', 'A', 'AA') of the column to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_column()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_columns","text":"Removes columns from the sheet. Keep in mind that each column removed will cause the columns to its right to be moved left. For this reason, this method will sort the indexes of the columns you provide, and remove then in descending order. Parameters: Name Type Description Default columns List[str] A list of the letter-indexed names of the columns to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_columns()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_row","text":"Removes a single row from the sheet. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_row()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_rows","text":"Removes rows from the sheet. Keep in mind that each row removed will cause the rows below it to be moved up. For this reason, this method will sort the indexes of the rows you provide, and remove then in descending order. Parameters: Name Type Description Default rows List[int] A list of the 1-indexed numbers of the rows to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_rows()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_sheet","text":"Removes a sheet from the spreadsheet. Keep in mind that if you remove the active_sheet, you must set another sheet as active before using trying to modify it! Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_sheet()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.set_cell","text":"Replaces the value of a single cell. Parameters: Name Type Description Default column str The cell's letter-indexed column name. required row int The cell's 1-indexed row number. required value object The new value of the cell. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"set_cell()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.set_range","text":"Replace the values within an area of the sheet by the values supplied. Parameters: Name Type Description Default values List[List[object]] A list of rows. Each row is a list of cell values. required range_ str, Optional The range (minus the sheet) to have its values replaced, in A1 format. Ex: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str (str, Optional): If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"set_range()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.sort","text":"Sorts the sheet's rows according to the columns provided. Unless the start and end point are provided, all rows minus the first one will be sorted! Parameters: Name Type Description Default by_columns Union[str, List[str]] Either a letter-indexed column name to sort the rows by, or a list of them. In case of a tie, the second column is used, and so on. required ascending bool, Optional Set to False to sort by descending order. Defaults to True. True start_row str, Optional The 1-indexed row number where the sort will start from. Defaults to 2. 2 end_row str, Optional The 1-indexed row number where the sort will end at (inclusive). Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"sort()"},{"location":"botcity-http-plugin-python/","text":"Welcome Welcome to BotCity's Http Plugin. Installation Latest release Using PyPI pip install botcity-http-plugin","title":"Home"},{"location":"botcity-http-plugin-python/#welcome","text":"Welcome to BotCity's Http Plugin.","title":"Welcome"},{"location":"botcity-http-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-http-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-http-plugin-python/#using-pypi","text":"pip install botcity-http-plugin","title":"Using PyPI"},{"location":"botcity-http-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.http import BotHttpPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin url = \"https://ptsv2.com/t/ocrc3-1624379671/post\" http = BotHttpPlugin ( url ) # Perform a simple GET request print ( http . get () . text ) ... Step 2 of Example # Set the parameters for a POST request params = { 'id' : 'ocrc3-1624379671' , 'text' : 'POST Example' } http . set_params ( params ) # Print the server response print ( http . post () . text ) ... Complete code Let's take a look into the complete code: from botcity.plugins.http import BotHttpPlugin # Instantiates the plugin url = \"https://ptsv2.com/t/ocrc3-1624379671/post\" http = BotHttpPlugin ( url ) # Performs a simple GET request print ( http . get () . text ) # Sets the parameters for a POST request params = { 'id' : 'ocrc3-1624379671' , 'text' : 'POST Example' } http . set_params ( params ) # Prints the server response print ( http . post () . text ) Pro Tip This plugin allow you to use method chaining so the code above could be written as: http = BotHttpPlugin ( \"https://ptsv2.com/t/ocrc3-1624379671/post\" ) print ( http . get () . text ) print ( http . set_param ( 'id' , 'ocrc3-1624379671' ) . set_param ( 'text' , 'POST Example' ) . post () . text ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-http-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.http import BotHttpPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-http-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin url = \"https://ptsv2.com/t/ocrc3-1624379671/post\" http = BotHttpPlugin ( url ) # Perform a simple GET request print ( http . get () . text ) ...","title":"Step 1 of Example"},{"location":"botcity-http-plugin-python/intro/#step-2-of-example","text":"# Set the parameters for a POST request params = { 'id' : 'ocrc3-1624379671' , 'text' : 'POST Example' } http . set_params ( params ) # Print the server response print ( http . post () . text ) ...","title":"Step 2 of Example"},{"location":"botcity-http-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.plugins.http import BotHttpPlugin # Instantiates the plugin url = \"https://ptsv2.com/t/ocrc3-1624379671/post\" http = BotHttpPlugin ( url ) # Performs a simple GET request print ( http . get () . text ) # Sets the parameters for a POST request params = { 'id' : 'ocrc3-1624379671' , 'text' : 'POST Example' } http . set_params ( params ) # Prints the server response print ( http . post () . text )","title":"Complete code"},{"location":"botcity-http-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: http = BotHttpPlugin ( \"https://ptsv2.com/t/ocrc3-1624379671/post\" ) print ( http . get () . text ) print ( http . set_param ( 'id' , 'ocrc3-1624379671' ) . set_param ( 'text' , 'POST Example' ) . post () . text )","title":"Pro Tip"},{"location":"botcity-http-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-http-plugin-python/api/plugin/","text":"botcity.plugins.http.plugin.BotHttpPlugin __init__ ( self , url , params = None ) special BotHttpPlugin Parameters: Name Type Description Default url str The URL to send requests to. required params dict, Optional Additional parameters to send with your requests. Defaults to None. None Attributes: Name Type Description url str The URL to send requests to. params dict, Optional Additional parameters to send with your requests. Defaults to None. add_param ( self , key , value ) Adds a parameter to the parameters dictionary. Parameters: Name Type Description Default key str Header key. required value object Header value. required Returns: Type Description BotHttpPlugin self (allows Method Chaining) get ( self ) Sends an http get request to the URL defined in this class. Returns: Type Description Response The content of the server response in its raw format. get_as_file ( self , file_name ) Performs an http get request, then saves its response as a file. Parameters: Name Type Description Default file_name str The name of the file. required Returns: Type Description str (str) The resulting file_name. get_as_json ( self ) Sends an http get request to the URL defined in this class, and returns the JSON formatted answer. This method is equivalent to get().json(). Returns: Type Description Dict The content of the server response in json format get_bytes ( self ) Sends an http get request to the URL defined in this class, and returns the answer as bytes. This method is equivalent to get().content Returns: Type Description bytes The content of the server response in bytes post ( self ) Sends an http post request to the URL defined in this class. Returns: Type Description Response The content of the server response in its raw format. post_as_json ( self ) Sends an http post request to the URL defined in this class, and returns the JSON formatted answer. This method is equivalent to post().json(). Returns: Type Description Dict The content of the server response in json format.","title":"Plugin"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin","text":"","title":"BotHttpPlugin"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.__init__","text":"BotHttpPlugin Parameters: Name Type Description Default url str The URL to send requests to. required params dict, Optional Additional parameters to send with your requests. Defaults to None. None Attributes: Name Type Description url str The URL to send requests to. params dict, Optional Additional parameters to send with your requests. Defaults to None.","title":"__init__()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.add_param","text":"Adds a parameter to the parameters dictionary. Parameters: Name Type Description Default key str Header key. required value object Header value. required Returns: Type Description BotHttpPlugin self (allows Method Chaining)","title":"add_param()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.get","text":"Sends an http get request to the URL defined in this class. Returns: Type Description Response The content of the server response in its raw format.","title":"get()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.get_as_file","text":"Performs an http get request, then saves its response as a file. Parameters: Name Type Description Default file_name str The name of the file. required Returns: Type Description str (str) The resulting file_name.","title":"get_as_file()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.get_as_json","text":"Sends an http get request to the URL defined in this class, and returns the JSON formatted answer. This method is equivalent to get().json(). Returns: Type Description Dict The content of the server response in json format","title":"get_as_json()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.get_bytes","text":"Sends an http get request to the URL defined in this class, and returns the answer as bytes. This method is equivalent to get().content Returns: Type Description bytes The content of the server response in bytes","title":"get_bytes()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.post","text":"Sends an http post request to the URL defined in this class. Returns: Type Description Response The content of the server response in its raw format.","title":"post()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.post_as_json","text":"Sends an http post request to the URL defined in this class, and returns the JSON formatted answer. This method is equivalent to post().json(). Returns: Type Description Dict The content of the server response in json format.","title":"post_as_json()"},{"location":"botcity-utils-python/","text":"Welcome Welcome to BotCity's Utils package. Installation Latest release Using PyPI pip install botcity-utils","title":"Home"},{"location":"botcity-utils-python/#welcome","text":"Welcome to BotCity's Utils package.","title":"Welcome"},{"location":"botcity-utils-python/#installation","text":"","title":"Installation"},{"location":"botcity-utils-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-utils-python/#using-pypi","text":"pip install botcity-utils","title":"Using PyPI"},{"location":"botcity-utils-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.utils.parser import StringParser As a demonstration of the library, let's build a simple example together that will use the StringParser to read the content between the paragraph tags of the following HTML snippet: < h1 > Example </ h1 > < p > A paragraph with some content. This is a test of multiple lines for the parser. </ p > Instantiating the Parser As a demonstration we will assume that the HTML snippet above is stored into the text variable. from botcity.utils.parser import StringParser parser = StringParser ( text ) Extracting Text Looking into the snippet we know that the desired data is contained between the tags <p> and </p> . Based on that we can use the goto_tag_start from the StringParser object and the read_next_lines_until to fetch the data as a list of lines. Here is how we do it: # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" ) Complete code Let's take a look into the complete code: from botcity.utils.parser import StringParser parser = StringParser ( text ) # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" ) Pro Tip This plugin allow you to use method chaining so the code above could be written as: from botcity.utils.parser import StringParser paragraph = StringParser ( text ) . goto_tag_end ( \"<p>\" ) . read_next_lines_until ( \"</p>\" ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-utils-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.utils.parser import StringParser As a demonstration of the library, let's build a simple example together that will use the StringParser to read the content between the paragraph tags of the following HTML snippet: < h1 > Example </ h1 > < p > A paragraph with some content. This is a test of multiple lines for the parser. </ p >","title":"Getting Started"},{"location":"botcity-utils-python/intro/#instantiating-the-parser","text":"As a demonstration we will assume that the HTML snippet above is stored into the text variable. from botcity.utils.parser import StringParser parser = StringParser ( text )","title":"Instantiating the Parser"},{"location":"botcity-utils-python/intro/#extracting-text","text":"Looking into the snippet we know that the desired data is contained between the tags <p> and </p> . Based on that we can use the goto_tag_start from the StringParser object and the read_next_lines_until to fetch the data as a list of lines. Here is how we do it: # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" )","title":"Extracting Text"},{"location":"botcity-utils-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.utils.parser import StringParser parser = StringParser ( text ) # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" )","title":"Complete code"},{"location":"botcity-utils-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: from botcity.utils.parser import StringParser paragraph = StringParser ( text ) . goto_tag_end ( \"<p>\" ) . read_next_lines_until ( \"</p>\" )","title":"Pro Tip"},{"location":"botcity-utils-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-utils-python/api/parser/","text":"Parsers This module offers parsers that can be used in your code to speed up development. The StringParser offers useful methods to navigate and parse strings using tokens. botcity.utils.parser.string.StringParser current_position : int property readonly The current parser cursor position __init__ ( self , content ) special String Parser Parameters: Name Type Description Default content str The string content to be parsed. required back_to_tag_end ( self , tag ) Move the current cursor position to the end of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool Whether or not it was possible to move the cursor. back_to_tag_start ( self , tag ) Move the current cursor position to the beginning of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool Whether or not it was possible to move the cursor. backward_contains ( self , tag ) Whether or not the content contains the tag starting from the beginning until the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool True in case the tag is found, False otherwise. get_next_chars ( self , chars ) Reads and return the content starting from the current position with the addition of chars more characters. Parameters: Name Type Description Default chars int Number of characters to read. required Returns: Type Description str The sliced content. goto_next_line ( self , linesep = None ) Move the cursor to the next line found starting from the current position. Parameters: Name Type Description Default linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description StringParser this object. goto_tag_end ( self , tag ) Move the parser cursor to the end of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser this object. goto_tag_start ( self , tag ) Move the parser cursor to the beginning of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser this object. next_contains ( self , tag ) Whether or not the content contains the tag starting from the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool True in case the tag is found, False otherwise. read ( self ) Reads the remaining content starting at the current cursor positon. Returns: Type Description str the remaining content. read_next_lines ( self , lines , linesep = None ) Reads the next lines lines from the content starting at the current position. Parameters: Name Type Description Default lines int Number of lines to read required linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description List List of lines found. read_next_lines_until ( self , tag_end , linesep = None ) Reads lines until a tag is found. Parameters: Name Type Description Default tag_end str The tag to search for. required linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description List List of lines found. read_until ( self , end ) Read the content from the current cursor position until the position given by the end tag. Parameters: Name Type Description Default end str The tag to search for. required Returns: Type Description str The sliced content between current position and end tag location.","title":"Parsers"},{"location":"botcity-utils-python/api/parser/#parsers","text":"This module offers parsers that can be used in your code to speed up development. The StringParser offers useful methods to navigate and parse strings using tokens.","title":"Parsers"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser","text":"","title":"StringParser"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.current_position","text":"The current parser cursor position","title":"current_position"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.__init__","text":"String Parser Parameters: Name Type Description Default content str The string content to be parsed. required","title":"__init__()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.back_to_tag_end","text":"Move the current cursor position to the end of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool Whether or not it was possible to move the cursor.","title":"back_to_tag_end()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.back_to_tag_start","text":"Move the current cursor position to the beginning of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool Whether or not it was possible to move the cursor.","title":"back_to_tag_start()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.backward_contains","text":"Whether or not the content contains the tag starting from the beginning until the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool True in case the tag is found, False otherwise.","title":"backward_contains()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.get_next_chars","text":"Reads and return the content starting from the current position with the addition of chars more characters. Parameters: Name Type Description Default chars int Number of characters to read. required Returns: Type Description str The sliced content.","title":"get_next_chars()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.goto_next_line","text":"Move the cursor to the next line found starting from the current position. Parameters: Name Type Description Default linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description StringParser this object.","title":"goto_next_line()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.goto_tag_end","text":"Move the parser cursor to the end of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser this object.","title":"goto_tag_end()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.goto_tag_start","text":"Move the parser cursor to the beginning of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser this object.","title":"goto_tag_start()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.next_contains","text":"Whether or not the content contains the tag starting from the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool True in case the tag is found, False otherwise.","title":"next_contains()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read","text":"Reads the remaining content starting at the current cursor positon. Returns: Type Description str the remaining content.","title":"read()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read_next_lines","text":"Reads the next lines lines from the content starting at the current position. Parameters: Name Type Description Default lines int Number of lines to read required linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description List List of lines found.","title":"read_next_lines()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read_next_lines_until","text":"Reads lines until a tag is found. Parameters: Name Type Description Default tag_end str The tag to search for. required linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description List List of lines found.","title":"read_next_lines_until()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read_until","text":"Read the content from the current cursor position until the position given by the end tag. Parameters: Name Type Description Default end str The tag to search for. required Returns: Type Description str The sliced content between current position and end tag location.","title":"read_until()"}]}