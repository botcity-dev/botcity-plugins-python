{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to BotCity's Plugins - Python. Each one of the plugins available here has its own set of install instructions, getting started and API documentation. Please refer to the menu on your left to know more about the available plugins.","title":"Home"},{"location":"#welcome","text":"Welcome to BotCity's Plugins - Python. Each one of the plugins available here has its own set of install instructions, getting started and API documentation. Please refer to the menu on your left to know more about the available plugins.","title":"Welcome"},{"location":"botcity-captcha-plugin-python/","text":"Welcome Welcome to BotCity's Captcha Plugin. Installation Latest release Using PyPI pip install botcity-captcha-plugin","title":"Home"},{"location":"botcity-captcha-plugin-python/#welcome","text":"Welcome to BotCity's Captcha Plugin.","title":"Welcome"},{"location":"botcity-captcha-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-captcha-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-captcha-plugin-python/#using-pypi","text":"pip install botcity-captcha-plugin","title":"Using PyPI"},{"location":"botcity-captcha-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. # For Anti Captcha, use: from botcity.plugins.captcha import BotAntiCaptchaPlugin # For Death By Captcha, use: from botcity.plugins.captcha import BotDeathByCaptchaPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin (AntiCaptcha) antiCaptcha = BotAntiCaptchaPlugin ( API_KEY ) # Death By Captcha version deathByCaptcha = BotDeathByCaptchaPlugin ( USERNAME , PASSWORD ) ... Step 2 of Example # AntiCaptcha antiCaptcha . solve_text ( \"captcha_ms.jpeg\" ) # Death By Captcha deathByCaptcha . solve ( \"captcha_ms.jpeg\" ) ... Complete code Let's take a look into the complete code: # Imports from botcity.plugins.captcha import BotAntiCaptchaPlugin from botcity.plugins.captcha import BotDeathByCaptchaPlugin # AntiCaptcha Text anti_captcha = BotAntiCaptchaPlugin ( \"API_KEY\" ) print ( anti_captcha . solve_text ( \"captcha_ms.jpeg\" )) # AntiCaptcha ReCaptcha url = 'https://www.google.com/recaptcha/api2/demo' captcha_id = '6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-' print ( anti_captcha . solve_re ( url , captcha_id )) # Death By Captcha death_by_captcha = BotDeathByCaptchaPlugin ( \"USERNAME\" , \"PASSWORD\" ) print ( death_by_captcha . solve ( \"captcha.jpg\" )) Pro Tip This plugin allows you to use method chaining where applicable (methods auth and report): # Let's suppose the API solves the captcha incorrectly dbc . solve ( \"captcha.jpg\" ) incorrect_captcha = True # Tries again if incorrect_captcha : dbc . report () . solve ( \"captcha.jpg\" ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-captcha-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. # For Anti Captcha, use: from botcity.plugins.captcha import BotAntiCaptchaPlugin # For Death By Captcha, use: from botcity.plugins.captcha import BotDeathByCaptchaPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-captcha-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin (AntiCaptcha) antiCaptcha = BotAntiCaptchaPlugin ( API_KEY ) # Death By Captcha version deathByCaptcha = BotDeathByCaptchaPlugin ( USERNAME , PASSWORD ) ...","title":"Step 1 of Example"},{"location":"botcity-captcha-plugin-python/intro/#step-2-of-example","text":"# AntiCaptcha antiCaptcha . solve_text ( \"captcha_ms.jpeg\" ) # Death By Captcha deathByCaptcha . solve ( \"captcha_ms.jpeg\" ) ...","title":"Step 2 of Example"},{"location":"botcity-captcha-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Imports from botcity.plugins.captcha import BotAntiCaptchaPlugin from botcity.plugins.captcha import BotDeathByCaptchaPlugin # AntiCaptcha Text anti_captcha = BotAntiCaptchaPlugin ( \"API_KEY\" ) print ( anti_captcha . solve_text ( \"captcha_ms.jpeg\" )) # AntiCaptcha ReCaptcha url = 'https://www.google.com/recaptcha/api2/demo' captcha_id = '6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-' print ( anti_captcha . solve_re ( url , captcha_id )) # Death By Captcha death_by_captcha = BotDeathByCaptchaPlugin ( \"USERNAME\" , \"PASSWORD\" ) print ( death_by_captcha . solve ( \"captcha.jpg\" ))","title":"Complete code"},{"location":"botcity-captcha-plugin-python/intro/#pro-tip","text":"This plugin allows you to use method chaining where applicable (methods auth and report): # Let's suppose the API solves the captcha incorrectly dbc . solve ( \"captcha.jpg\" ) incorrect_captcha = True # Tries again if incorrect_captcha : dbc . report () . solve ( \"captcha.jpg\" )","title":"Pro Tip"},{"location":"botcity-captcha-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-captcha-plugin-python/api/plugin/","text":"botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin __init__ ( self , api_key ) special BotAntiCaptchaPlugin. Parameters: Name Type Description Default api_key str Api_key found in your AntiCaptcha account. required auth ( self , api_key ) Updates the api_key for this object. This method does NOT need to be used if you have provided the correct key in this class' constructor. Parameters: Name Type Description Default api_key str AntiCaptcha's key that allow you to use it's API Service. required Returns: Type Description BotAntiCaptchaPlugin self (allows method chaining). report ( self ) Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotAntiCaptchaPlugin self, allowing method chaining solve_fun ( self , url , site_key , timeout = 120 ) Solves a FunCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution. solve_re ( self , url , site_key , timeout = 120 ) Solves a ReCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution. solve_text ( self , img_or_path , timeout = 120 ) Solves a Text Captcha. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image or a path to an image file required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters. botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin __init__ ( self , username , password ) special Provides an easy way to solve captcha's using Death By Captcha's API. Parameters: Name Type Description Default username str Your Death By Captcha login. required password str Your Death By Captcha password. required auth ( self , username , password ) Updates the username and password for this object. This method does NOT need to be used if you have provided the correct login/password in this class' constructor. Parameters: Name Type Description Default username str Your Death By Captcha username. required password str Your Death By Captcha password. required Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining) report ( self ) Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining) solve ( self , img_or_path , timeout = 120 ) Solves a captcha of any supported type. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image object or a path to an image file. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters.","title":"Plugin"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin","text":"","title":"BotAntiCaptchaPlugin"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.__init__","text":"BotAntiCaptchaPlugin. Parameters: Name Type Description Default api_key str Api_key found in your AntiCaptcha account. required","title":"__init__()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.auth","text":"Updates the api_key for this object. This method does NOT need to be used if you have provided the correct key in this class' constructor. Parameters: Name Type Description Default api_key str AntiCaptcha's key that allow you to use it's API Service. required Returns: Type Description BotAntiCaptchaPlugin self (allows method chaining).","title":"auth()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.report","text":"Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotAntiCaptchaPlugin self, allowing method chaining","title":"report()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.solve_fun","text":"Solves a FunCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution.","title":"solve_fun()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.solve_re","text":"Solves a ReCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution.","title":"solve_re()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.solve_text","text":"Solves a Text Captcha. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image or a path to an image file required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters.","title":"solve_text()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin","text":"","title":"BotDeathByCaptchaPlugin"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.__init__","text":"Provides an easy way to solve captcha's using Death By Captcha's API. Parameters: Name Type Description Default username str Your Death By Captcha login. required password str Your Death By Captcha password. required","title":"__init__()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.auth","text":"Updates the username and password for this object. This method does NOT need to be used if you have provided the correct login/password in this class' constructor. Parameters: Name Type Description Default username str Your Death By Captcha username. required password str Your Death By Captcha password. required Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining)","title":"auth()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.report","text":"Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining)","title":"report()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.solve","text":"Solves a captcha of any supported type. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image object or a path to an image file. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters.","title":"solve()"},{"location":"botcity-crawler-plugin-python/","text":"Welcome Welcome to BotCity's Crawler Plugin. Installation Latest release Using PyPI pip install botcity-crawler-plugin Linux System Dependencies If you intend to use this package with Linux and JavaScript there are system dependencies that are required to be installed. For Debian/Ubuntu please run the following command: apt install libxcomposite1 libxcursor1 libxdamage1 \\ libxfixes3 libxi6 libxtst6 libnss3 libnspr4 libcups2 \\ libdbus-1-3 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 \\ libgtk-3-0 libx11-xcb1 --no-install-recommends Please make sure to install the equivalent libraries for your Linux distribution.","title":"Home"},{"location":"botcity-crawler-plugin-python/#welcome","text":"Welcome to BotCity's Crawler Plugin.","title":"Welcome"},{"location":"botcity-crawler-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-crawler-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-crawler-plugin-python/#using-pypi","text":"pip install botcity-crawler-plugin","title":"Using PyPI"},{"location":"botcity-crawler-plugin-python/#linux-system-dependencies","text":"If you intend to use this package with Linux and JavaScript there are system dependencies that are required to be installed. For Debian/Ubuntu please run the following command: apt install libxcomposite1 libxcursor1 libxdamage1 \\ libxfixes3 libxi6 libxtst6 libnss3 libnspr4 libcups2 \\ libdbus-1-3 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 \\ libgtk-3-0 libx11-xcb1 --no-install-recommends Please make sure to install the equivalent libraries for your Linux distribution.","title":"Linux System Dependencies"},{"location":"botcity-crawler-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.crawler import BotCrawlerPlugin As a demonstration of the library, let's build a simple example together that will make a request to BotCity's Youtube channel and fetch the number of subscribers. Making the request To make the request you must use the request method which takes as an argument a URL. # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url ) Locating the element Looking into the page source we can notice that the element holding the subscribers information has the attribute id as subscriber-count . Based on that we can use the get_element_by_id from the HTML object and finally read its value. Here is how we do it: # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value () Complete code Let's take a look into the complete code: # Import the plugin from botcity.plugins.crawler import BotCrawlerPlugin # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url ) # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value () Pro Tip This plugin allow you to use method chaining so the code above could be written as: from botcity.plugins.crawler import BotCrawlerPlugin url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" id = \"subscriber-count\" subscribers = BotCrawlerPlugin ( True ) . request ( url ) . get_element_by_id ( id ) . value () Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-crawler-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.crawler import BotCrawlerPlugin As a demonstration of the library, let's build a simple example together that will make a request to BotCity's Youtube channel and fetch the number of subscribers.","title":"Getting Started"},{"location":"botcity-crawler-plugin-python/intro/#making-the-request","text":"To make the request you must use the request method which takes as an argument a URL. # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url )","title":"Making the request"},{"location":"botcity-crawler-plugin-python/intro/#locating-the-element","text":"Looking into the page source we can notice that the element holding the subscribers information has the attribute id as subscriber-count . Based on that we can use the get_element_by_id from the HTML object and finally read its value. Here is how we do it: # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value ()","title":"Locating the element"},{"location":"botcity-crawler-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Import the plugin from botcity.plugins.crawler import BotCrawlerPlugin # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url ) # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value ()","title":"Complete code"},{"location":"botcity-crawler-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: from botcity.plugins.crawler import BotCrawlerPlugin url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" id = \"subscriber-count\" subscribers = BotCrawlerPlugin ( True ) . request ( url ) . get_element_by_id ( id ) . value ()","title":"Pro Tip"},{"location":"botcity-crawler-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-crawler-plugin-python/api/html/","text":"botcity.plugins.crawler.html.HTML __init__ ( self , html , javascript_enabled = False ) special HTML representation of a page. Parameters: Name Type Description Default html HTML the page html object from requests_html . required javascript_enabled bool Whether or not JavaScript was enabled for this request. Defaults to False. False elements ( self ) Returns all child elements. Returns: Type Description List List of elements. execute_javascript ( self , code ) Executes the specified JavaScript code within the page. The usage would be similar to what can be achieved when executing JavaScript in the current page by entering \"javascript:...some JS code...\" in the URL field of a browser. If JavaScript was not enabled on the Plugin before the request, calls to this method will be ignored. Parameters: Name Type Description Default code str the JavaScript code to be executed. required get_attribute ( self , attribute ) Returns the value of the attribute in an element. Parameters: Name Type Description Default attribute str The attribute name of element. required Exceptions: Type Description RuntimeError If the element has no attributes. KeyError [description] Returns: Type Description Any object: The attribute value. get_element_by_id ( self , id ) Searches the element within the document which matches the id. Parameters: Name Type Description Default id str Unique identifier of the element. required query_selector ( self , selectors , reset = False ) Searches the first element within the document which matches the specified group of selectors. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object query_selector_all ( self , selectors , index , reset = False ) Searches all elements within the document which matches the specified group of selectors and returns the specified index. Parameters: Name Type Description Default selectors str One or more selectors required index int The index of the element of the list required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object query_selector_all_size ( self , selectors , reset = False ) Searches all elements within the document which matches the specified group of selectors and return the number of elements. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description int int: number of elements query_selector_iter_all ( self , selectors , reset = False ) Searches all elements within the document which matches the specified group of selectors and iterate over the results setting the current element. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object reset ( self ) Reset the current element to the top of the page. value ( self ) Returns the value of an element. Returns: Type Description Any str: The element value.","title":"HTML"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML","text":"","title":"HTML"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.__init__","text":"HTML representation of a page. Parameters: Name Type Description Default html HTML the page html object from requests_html . required javascript_enabled bool Whether or not JavaScript was enabled for this request. Defaults to False. False","title":"__init__()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.elements","text":"Returns all child elements. Returns: Type Description List List of elements.","title":"elements()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.execute_javascript","text":"Executes the specified JavaScript code within the page. The usage would be similar to what can be achieved when executing JavaScript in the current page by entering \"javascript:...some JS code...\" in the URL field of a browser. If JavaScript was not enabled on the Plugin before the request, calls to this method will be ignored. Parameters: Name Type Description Default code str the JavaScript code to be executed. required","title":"execute_javascript()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.get_attribute","text":"Returns the value of the attribute in an element. Parameters: Name Type Description Default attribute str The attribute name of element. required Exceptions: Type Description RuntimeError If the element has no attributes. KeyError [description] Returns: Type Description Any object: The attribute value.","title":"get_attribute()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.get_element_by_id","text":"Searches the element within the document which matches the id. Parameters: Name Type Description Default id str Unique identifier of the element. required","title":"get_element_by_id()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector","text":"Searches the first element within the document which matches the specified group of selectors. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object","title":"query_selector()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector_all","text":"Searches all elements within the document which matches the specified group of selectors and returns the specified index. Parameters: Name Type Description Default selectors str One or more selectors required index int The index of the element of the list required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object","title":"query_selector_all()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector_all_size","text":"Searches all elements within the document which matches the specified group of selectors and return the number of elements. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description int int: number of elements","title":"query_selector_all_size()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector_iter_all","text":"Searches all elements within the document which matches the specified group of selectors and iterate over the results setting the current element. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object","title":"query_selector_iter_all()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.reset","text":"Reset the current element to the top of the page.","title":"reset()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.value","text":"Returns the value of an element. Returns: Type Description Any str: The element value.","title":"value()"},{"location":"botcity-crawler-plugin-python/api/plugin/","text":"botcity.plugins.crawler.plugin.BotCrawlerPlugin javascript_enabled : bool property writable Whether or not JavaScript should be enabled when making the request. __init__ ( self , javascript_enabled = False ) special BotCrawlerPlugin Parameters: Name Type Description Default javascript_enabled bool Whether or not JavaScript should be enabled when making requests. Defaults to False. False request ( self , url ) Executes a request to the given URL Parameters: Name Type Description Default url str The desired URL. required Returns: Type Description HTML an HTML object which can be used to parse elements. See HTML","title":"Plugin"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin","text":"","title":"BotCrawlerPlugin"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin.javascript_enabled","text":"Whether or not JavaScript should be enabled when making the request.","title":"javascript_enabled"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin.__init__","text":"BotCrawlerPlugin Parameters: Name Type Description Default javascript_enabled bool Whether or not JavaScript should be enabled when making requests. Defaults to False. False","title":"__init__()"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin.request","text":"Executes a request to the given URL Parameters: Name Type Description Default url str The desired URL. required Returns: Type Description HTML an HTML object which can be used to parse elements. See HTML","title":"request()"},{"location":"botcity-utils-python/","text":"Welcome Welcome to BotCity's Utils package. Installation Latest release Using PyPI pip install botcity-utils","title":"Home"},{"location":"botcity-utils-python/#welcome","text":"Welcome to BotCity's Utils package.","title":"Welcome"},{"location":"botcity-utils-python/#installation","text":"","title":"Installation"},{"location":"botcity-utils-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-utils-python/#using-pypi","text":"pip install botcity-utils","title":"Using PyPI"},{"location":"botcity-utils-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.utils.parser import StringParser As a demonstration of the library, let's build a simple example together that will use the StringParser to read the content between the paragraph tags of the following HTML snippet: < h1 > Example </ h1 > < p > A paragraph with some content. This is a test of multiple lines for the parser. </ p > Instantiating the Parser As a demonstration we will assume that the HTML snippet above is stored into the text variable. from botcity.utils.parser import StringParser parser = StringParser ( text ) Extracting Text Looking into the snippet we know that the desired data is contained between the tags <p> and </p> . Based on that we can use the goto_tag_start from the StringParser object and the read_next_lines_until to fetch the data as a list of lines. Here is how we do it: # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" ) Complete code Let's take a look into the complete code: from botcity.utils.parser import StringParser parser = StringParser ( text ) # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" ) Pro Tip This plugin allow you to use method chaining so the code above could be written as: from botcity.utils.parser import StringParser paragraph = StringParser ( text ) . goto_tag_end ( \"<p>\" ) . read_next_lines_until ( \"</p>\" ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-utils-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.utils.parser import StringParser As a demonstration of the library, let's build a simple example together that will use the StringParser to read the content between the paragraph tags of the following HTML snippet: < h1 > Example </ h1 > < p > A paragraph with some content. This is a test of multiple lines for the parser. </ p >","title":"Getting Started"},{"location":"botcity-utils-python/intro/#instantiating-the-parser","text":"As a demonstration we will assume that the HTML snippet above is stored into the text variable. from botcity.utils.parser import StringParser parser = StringParser ( text )","title":"Instantiating the Parser"},{"location":"botcity-utils-python/intro/#extracting-text","text":"Looking into the snippet we know that the desired data is contained between the tags <p> and </p> . Based on that we can use the goto_tag_start from the StringParser object and the read_next_lines_until to fetch the data as a list of lines. Here is how we do it: # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" )","title":"Extracting Text"},{"location":"botcity-utils-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.utils.parser import StringParser parser = StringParser ( text ) # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" )","title":"Complete code"},{"location":"botcity-utils-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: from botcity.utils.parser import StringParser paragraph = StringParser ( text ) . goto_tag_end ( \"<p>\" ) . read_next_lines_until ( \"</p>\" )","title":"Pro Tip"},{"location":"botcity-utils-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-utils-python/api/parser/","text":"Parsers This module offers parsers that can be used in your code to speed up development. The StringParser offers useful methods to navigate and parse strings using tokens. botcity.utils.parser.string.StringParser current_position : int property readonly The current parser cursor position __init__ ( self , content ) special String Parser Parameters: Name Type Description Default content str The string content to be parsed. required back_to_tag_end ( self , tag ) Move the current cursor position to the end of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool bool: Whether or not it was possible to move the cursor. back_to_tag_start ( self , tag ) Move the current cursor position to the beginning of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool bool: Whether or not it was possible to move the cursor. backward_contains ( self , tag ) Whether or not the content contains the tag starting from the beginning until the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool bool: True in case the tag is found, False otherwise. get_next_chars ( self , chars ) Reads and return the content starting from the current position with the addition of chars more characters. Parameters: Name Type Description Default chars int Number of characters to read. required Returns: Type Description str str: The sliced content. goto_next_line ( self , linesep = None ) Move the cursor to the next line found starting from the current position. Parameters: Name Type Description Default linesep Optional[str] The line separator. If not specified the system line separator is used. None Returns: Type Description StringParser StringParser: this object. goto_tag_end ( self , tag ) Move the parser cursor to the end of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser StringParser: this object. goto_tag_start ( self , tag ) Move the parser cursor to the beginning of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser StringParser: this object. next_contains ( self , tag ) Whether or not the content contains the tag starting from the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool bool: True in case the tag is found, False otherwise. read ( self ) Reads the remaining content starting at the current cursor positon. Returns: Type Description str str: the remaining content. read_next_lines ( self , lines , linesep = None ) Reads the next lines lines from the content starting at the current position. Parameters: Name Type Description Default lines int Number of lines to read required linesep Optional[str] The line separator. If not specified the system line separator is used. None Returns: Type Description List List: List of lines found. read_next_lines_until ( self , tag_end , linesep = None ) Reads lines until a tag is found. Parameters: Name Type Description Default tag_end str The tag to search for. required linesep Optional[str] The line separator. If not specified the system line separator is used. None Returns: Type Description List List: List of lines found. read_until ( self , end ) Read the content from the current cursor position until the position given by the end tag. Parameters: Name Type Description Default end str The tag to search for. required Returns: Type Description str str: The sliced content between current position and end tag location.","title":"Parsers"},{"location":"botcity-utils-python/api/parser/#parsers","text":"This module offers parsers that can be used in your code to speed up development. The StringParser offers useful methods to navigate and parse strings using tokens.","title":"Parsers"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser","text":"","title":"StringParser"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.current_position","text":"The current parser cursor position","title":"current_position"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.__init__","text":"String Parser Parameters: Name Type Description Default content str The string content to be parsed. required","title":"__init__()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.back_to_tag_end","text":"Move the current cursor position to the end of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool bool: Whether or not it was possible to move the cursor.","title":"back_to_tag_end()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.back_to_tag_start","text":"Move the current cursor position to the beginning of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool bool: Whether or not it was possible to move the cursor.","title":"back_to_tag_start()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.backward_contains","text":"Whether or not the content contains the tag starting from the beginning until the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool bool: True in case the tag is found, False otherwise.","title":"backward_contains()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.get_next_chars","text":"Reads and return the content starting from the current position with the addition of chars more characters. Parameters: Name Type Description Default chars int Number of characters to read. required Returns: Type Description str str: The sliced content.","title":"get_next_chars()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.goto_next_line","text":"Move the cursor to the next line found starting from the current position. Parameters: Name Type Description Default linesep Optional[str] The line separator. If not specified the system line separator is used. None Returns: Type Description StringParser StringParser: this object.","title":"goto_next_line()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.goto_tag_end","text":"Move the parser cursor to the end of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser StringParser: this object.","title":"goto_tag_end()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.goto_tag_start","text":"Move the parser cursor to the beginning of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser StringParser: this object.","title":"goto_tag_start()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.next_contains","text":"Whether or not the content contains the tag starting from the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool bool: True in case the tag is found, False otherwise.","title":"next_contains()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read","text":"Reads the remaining content starting at the current cursor positon. Returns: Type Description str str: the remaining content.","title":"read()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read_next_lines","text":"Reads the next lines lines from the content starting at the current position. Parameters: Name Type Description Default lines int Number of lines to read required linesep Optional[str] The line separator. If not specified the system line separator is used. None Returns: Type Description List List: List of lines found.","title":"read_next_lines()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read_next_lines_until","text":"Reads lines until a tag is found. Parameters: Name Type Description Default tag_end str The tag to search for. required linesep Optional[str] The line separator. If not specified the system line separator is used. None Returns: Type Description List List: List of lines found.","title":"read_next_lines_until()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read_until","text":"Read the content from the current cursor position until the position given by the end tag. Parameters: Name Type Description Default end str The tag to search for. required Returns: Type Description str str: The sliced content between current position and end tag location.","title":"read_until()"}]}