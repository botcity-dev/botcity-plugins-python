{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to BotCity's Plugins - Python. Each one of the plugins available here has its own set of install instructions, getting started and API documentation. Please refer to the menu on your left to know more about the available plugins.","title":"Home"},{"location":"#welcome","text":"Welcome to BotCity's Plugins - Python. Each one of the plugins available here has its own set of install instructions, getting started and API documentation. Please refer to the menu on your left to know more about the available plugins.","title":"Welcome"},{"location":"botcity-captcha-plugin-python/","text":"Welcome Welcome to BotCity's Captcha Plugin. Installation Latest release Using PyPI pip install botcity-captcha-plugin","title":"Home"},{"location":"botcity-captcha-plugin-python/#welcome","text":"Welcome to BotCity's Captcha Plugin.","title":"Welcome"},{"location":"botcity-captcha-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-captcha-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-captcha-plugin-python/#using-pypi","text":"pip install botcity-captcha-plugin","title":"Using PyPI"},{"location":"botcity-captcha-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. # For Anti Captcha, use: from botcity.plugins.captcha import BotAntiCaptchaPlugin # For Death By Captcha, use: from botcity.plugins.captcha import BotDeathByCaptchaPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin (AntiCaptcha) antiCaptcha = BotAntiCaptchaPlugin ( API_KEY ) # Death By Captcha version deathByCaptcha = BotDeathByCaptchaPlugin ( USERNAME , PASSWORD ) ... Step 2 of Example # AntiCaptcha antiCaptcha . solve_text ( \"captcha_ms.jpeg\" ) # Death By Captcha deathByCaptcha . solve ( \"captcha_ms.jpeg\" ) ... Complete code Let's take a look into the complete code: # Imports from botcity.plugins.captcha import BotAntiCaptchaPlugin from botcity.plugins.captcha import BotDeathByCaptchaPlugin # AntiCaptcha Text anti_captcha = BotAntiCaptchaPlugin ( \"API_KEY\" ) print ( anti_captcha . solve_text ( \"captcha_ms.jpeg\" )) # AntiCaptcha ReCaptcha url = 'https://www.google.com/recaptcha/api2/demo' captcha_id = '6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-' print ( anti_captcha . solve_re ( url , captcha_id )) # Death By Captcha death_by_captcha = BotDeathByCaptchaPlugin ( \"USERNAME\" , \"PASSWORD\" ) print ( death_by_captcha . solve ( \"captcha.jpg\" )) Pro Tip This plugin allows you to use method chaining where applicable (methods auth and report): # Let's suppose the API solves the captcha incorrectly dbc . solve ( \"captcha.jpg\" ) incorrect_captcha = True # Tries again if incorrect_captcha : dbc . report () . solve ( \"captcha.jpg\" ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-captcha-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. # For Anti Captcha, use: from botcity.plugins.captcha import BotAntiCaptchaPlugin # For Death By Captcha, use: from botcity.plugins.captcha import BotDeathByCaptchaPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-captcha-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin (AntiCaptcha) antiCaptcha = BotAntiCaptchaPlugin ( API_KEY ) # Death By Captcha version deathByCaptcha = BotDeathByCaptchaPlugin ( USERNAME , PASSWORD ) ...","title":"Step 1 of Example"},{"location":"botcity-captcha-plugin-python/intro/#step-2-of-example","text":"# AntiCaptcha antiCaptcha . solve_text ( \"captcha_ms.jpeg\" ) # Death By Captcha deathByCaptcha . solve ( \"captcha_ms.jpeg\" ) ...","title":"Step 2 of Example"},{"location":"botcity-captcha-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Imports from botcity.plugins.captcha import BotAntiCaptchaPlugin from botcity.plugins.captcha import BotDeathByCaptchaPlugin # AntiCaptcha Text anti_captcha = BotAntiCaptchaPlugin ( \"API_KEY\" ) print ( anti_captcha . solve_text ( \"captcha_ms.jpeg\" )) # AntiCaptcha ReCaptcha url = 'https://www.google.com/recaptcha/api2/demo' captcha_id = '6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-' print ( anti_captcha . solve_re ( url , captcha_id )) # Death By Captcha death_by_captcha = BotDeathByCaptchaPlugin ( \"USERNAME\" , \"PASSWORD\" ) print ( death_by_captcha . solve ( \"captcha.jpg\" ))","title":"Complete code"},{"location":"botcity-captcha-plugin-python/intro/#pro-tip","text":"This plugin allows you to use method chaining where applicable (methods auth and report): # Let's suppose the API solves the captcha incorrectly dbc . solve ( \"captcha.jpg\" ) incorrect_captcha = True # Tries again if incorrect_captcha : dbc . report () . solve ( \"captcha.jpg\" )","title":"Pro Tip"},{"location":"botcity-captcha-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-captcha-plugin-python/api/plugin/","text":"botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin __init__ ( self , api_key ) special BotAntiCaptchaPlugin. Parameters: Name Type Description Default api_key str Api_key found in your AntiCaptcha account. required auth ( self , api_key ) Updates the api_key for this object. This method does NOT need to be used if you have provided the correct key in this class' constructor. Parameters: Name Type Description Default api_key str AntiCaptcha's key that allow you to use it's API Service. required Returns: Type Description BotAntiCaptchaPlugin self (allows method chaining). report ( self ) Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotAntiCaptchaPlugin self, allowing method chaining solve_fun ( self , url , site_key , timeout = 120 ) Solves a FunCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution. solve_re ( self , url , site_key , timeout = 120 ) Solves a ReCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution. solve_text ( self , img_or_path , timeout = 120 ) Solves a Text Captcha. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image or a path to an image file required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters. botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin __init__ ( self , username , password ) special Provides an easy way to solve captcha's using Death By Captcha's API. Parameters: Name Type Description Default username str Your Death By Captcha login. required password str Your Death By Captcha password. required auth ( self , username , password ) Updates the username and password for this object. This method does NOT need to be used if you have provided the correct login/password in this class' constructor. Parameters: Name Type Description Default username str Your Death By Captcha username. required password str Your Death By Captcha password. required Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining) report ( self ) Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining) solve ( self , img_or_path , timeout = 120 ) Solves a captcha of any supported type. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image object or a path to an image file. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters.","title":"Plugin"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin","text":"","title":"BotAntiCaptchaPlugin"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.__init__","text":"BotAntiCaptchaPlugin. Parameters: Name Type Description Default api_key str Api_key found in your AntiCaptcha account. required","title":"__init__()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.auth","text":"Updates the api_key for this object. This method does NOT need to be used if you have provided the correct key in this class' constructor. Parameters: Name Type Description Default api_key str AntiCaptcha's key that allow you to use it's API Service. required Returns: Type Description BotAntiCaptchaPlugin self (allows method chaining).","title":"auth()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.report","text":"Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotAntiCaptchaPlugin self, allowing method chaining","title":"report()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.solve_fun","text":"Solves a FunCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution.","title":"solve_fun()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.solve_re","text":"Solves a ReCaptcha. Parameters: Name Type Description Default url str URL of the page where the captcha is located. required site_key str iFrame ID of the captcha. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution.","title":"solve_re()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotAntiCaptchaPlugin.solve_text","text":"Solves a Text Captcha. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image or a path to an image file required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters.","title":"solve_text()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin","text":"","title":"BotDeathByCaptchaPlugin"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.__init__","text":"Provides an easy way to solve captcha's using Death By Captcha's API. Parameters: Name Type Description Default username str Your Death By Captcha login. required password str Your Death By Captcha password. required","title":"__init__()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.auth","text":"Updates the username and password for this object. This method does NOT need to be used if you have provided the correct login/password in this class' constructor. Parameters: Name Type Description Default username str Your Death By Captcha username. required password str Your Death By Captcha password. required Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining)","title":"auth()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.report","text":"Allows you to report the last solved captcha in case it was incorrect, and get refunded. Returns: Type Description BotDeathByCaptchaPlugin self (allows method chaining)","title":"report()"},{"location":"botcity-captcha-plugin-python/api/plugin/#botcity.plugins.captcha.plugin.BotDeathByCaptchaPlugin.solve","text":"Solves a captcha of any supported type. Parameters: Name Type Description Default img_or_path Any[str, Image.Image] Either an Image object or a path to an image file. required timeout int Maximum amount of time in seconds to wait until the captcha is solved. 120 Returns: Type Description str The captcha's solution, which is a text or a few letters.","title":"solve()"},{"location":"botcity-cloudvision-plugin-python/","text":"Welcome Welcome to BotCity's CloudVision Plugin. Installation Latest release Using PyPI pip install botcity-cloudvision-plugin Attention: This package also depends on a non-Python dependency, Poppler . You can find instructions on how to install Poppler for your favorite OS below. Installing Poppler Poppler is a PDF rendering library based on the xpdf. Here is how to install Poppler for Windows, Linux and MacOS. Windows Download the latest library from this website . After downloading Poppler, we need to extract to the convenient location generally under C drive. In my case, the Poppler library bin directory is C:\\poppler-21.11.0\\Library\\bin . Now you need to add this directory ( C:\\poppler-21.11.0\\Library\\bin ) to your environment variable Path. If you have questions on how to add a directory to your Path environment variable click here . You are now all set! Linux apt install poppler-utils MacOS For MacOS please follow the instructions on how to install Poppler available here . Alternatively, if you are using Anaconda you can install from your favorite channel with: conda install poppler","title":"Home"},{"location":"botcity-cloudvision-plugin-python/#welcome","text":"Welcome to BotCity's CloudVision Plugin.","title":"Welcome"},{"location":"botcity-cloudvision-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-cloudvision-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-cloudvision-plugin-python/#using-pypi","text":"pip install botcity-cloudvision-plugin Attention: This package also depends on a non-Python dependency, Poppler . You can find instructions on how to install Poppler for your favorite OS below.","title":"Using PyPI"},{"location":"botcity-cloudvision-plugin-python/#installing-poppler","text":"Poppler is a PDF rendering library based on the xpdf. Here is how to install Poppler for Windows, Linux and MacOS.","title":"Installing Poppler"},{"location":"botcity-cloudvision-plugin-python/#windows","text":"Download the latest library from this website . After downloading Poppler, we need to extract to the convenient location generally under C drive. In my case, the Poppler library bin directory is C:\\poppler-21.11.0\\Library\\bin . Now you need to add this directory ( C:\\poppler-21.11.0\\Library\\bin ) to your environment variable Path. If you have questions on how to add a directory to your Path environment variable click here . You are now all set!","title":"Windows"},{"location":"botcity-cloudvision-plugin-python/#linux","text":"apt install poppler-utils","title":"Linux"},{"location":"botcity-cloudvision-plugin-python/#macos","text":"For MacOS please follow the instructions on how to install Poppler available here . Alternatively, if you are using Anaconda you can install from your favorite channel with: conda install poppler","title":"MacOS"},{"location":"botcity-cloudvision-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.cloudvision import BotCloudVisionPlugin As a demonstration of the library, let's build a simple example together that will parse the text from the following image: Click here to Download Step 1 of Example To make the example we will instantiate the plugin and setup our Google Cloud Vision service account key. If you don't have one yet, please refer to the Google Cloud website on how to setup the Vision API and create your key. # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" ) Step 2 of Example Now let's read the text from the image. # Read the text from the image cloudvision . read ( \"otter_crossing.jpg\" ) # Print the text from the image print ( cloudvision . full_text ()) The output should look like this: CAUTION Otters crossing for next 6 miles Complete code Let's take a look into the complete code: # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" ) # Read the text from the image cloudvision . read ( \"otter_crossing.jpg\" ) # Print the text from the image print ( cloudvision . full_text ()) Pro Tip This plugin allow you to use method chaining so the code above could be written as: text = BotCloudVisionPlugin () \\ . credentials ( \"<path_to_my>/credentials.json\" ) \\ . read ( \"otter_crossing.jpg\" ) \\ . full_text () # Print the text from the image print ( text ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-cloudvision-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.cloudvision import BotCloudVisionPlugin As a demonstration of the library, let's build a simple example together that will parse the text from the following image: Click here to Download","title":"Getting Started"},{"location":"botcity-cloudvision-plugin-python/intro/#step-1-of-example","text":"To make the example we will instantiate the plugin and setup our Google Cloud Vision service account key. If you don't have one yet, please refer to the Google Cloud website on how to setup the Vision API and create your key. # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" )","title":"Step 1 of Example"},{"location":"botcity-cloudvision-plugin-python/intro/#step-2-of-example","text":"Now let's read the text from the image. # Read the text from the image cloudvision . read ( \"otter_crossing.jpg\" ) # Print the text from the image print ( cloudvision . full_text ()) The output should look like this: CAUTION Otters crossing for next 6 miles","title":"Step 2 of Example"},{"location":"botcity-cloudvision-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" ) # Read the text from the image cloudvision . read ( \"otter_crossing.jpg\" ) # Print the text from the image print ( cloudvision . full_text ())","title":"Complete code"},{"location":"botcity-cloudvision-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: text = BotCloudVisionPlugin () \\ . credentials ( \"<path_to_my>/credentials.json\" ) \\ . read ( \"otter_crossing.jpg\" ) \\ . full_text () # Print the text from the image print ( text )","title":"Pro Tip"},{"location":"botcity-cloudvision-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-cloudvision-plugin-python/api/plugin/","text":"botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin __init__ ( self ) special BotCloudVisionPlugin credentials ( self , credentials ) The Google Cloud Vision JSON credential file path. Parameters: Name Type Description Default credentials str Path to the JSON file. required entries ( self ) Get the list of entries after reading the file. Each element contains a list of values in which are: text , x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 and page . Returns: Type Description List[List] List of entries. full_text ( self ) Get the full text from the image. Returns: Type Description str The full text. read ( self , filepath , raise_on_error = False ) Read the file and set the entries list. Parameters: Name Type Description Default filepath str The file path for the image or PDF to be read. required raise_on_error bool Whether or not to raise an exception if it fails. False Exceptions: Type Description ValueError If file is not an image or PDF. render_rate ( self ) The render resolution rate Returns: Type Description int resolution rate reset_case ( self ) Reset the configuration for upper/lower case. set_render_rate ( self , rate ) Sets the render resolution rate. Parameters: Name Type Description Default rate int resolution rate required set_threshold ( self , threshold ) Set the threshold level to be applied to the image before parsing. Parameters: Name Type Description Default threshold int Threshold value. Use None for no threshold. required threshold ( self ) The threshold to be applied before parsing the image. Returns: Type Description int Threshold value. By default it is None which means no threshold. to_lower_case ( self ) Convert the text to lower case when processing the file. to_upper_case ( self ) Convert the text to upper case when processing the file.","title":"Plugin"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin","text":"","title":"BotCloudVisionPlugin"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.__init__","text":"BotCloudVisionPlugin","title":"__init__()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.credentials","text":"The Google Cloud Vision JSON credential file path. Parameters: Name Type Description Default credentials str Path to the JSON file. required","title":"credentials()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.entries","text":"Get the list of entries after reading the file. Each element contains a list of values in which are: text , x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 and page . Returns: Type Description List[List] List of entries.","title":"entries()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.full_text","text":"Get the full text from the image. Returns: Type Description str The full text.","title":"full_text()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.read","text":"Read the file and set the entries list. Parameters: Name Type Description Default filepath str The file path for the image or PDF to be read. required raise_on_error bool Whether or not to raise an exception if it fails. False Exceptions: Type Description ValueError If file is not an image or PDF.","title":"read()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.render_rate","text":"The render resolution rate Returns: Type Description int resolution rate","title":"render_rate()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.reset_case","text":"Reset the configuration for upper/lower case.","title":"reset_case()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.set_render_rate","text":"Sets the render resolution rate. Parameters: Name Type Description Default rate int resolution rate required","title":"set_render_rate()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.set_threshold","text":"Set the threshold level to be applied to the image before parsing. Parameters: Name Type Description Default threshold int Threshold value. Use None for no threshold. required","title":"set_threshold()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.threshold","text":"The threshold to be applied before parsing the image. Returns: Type Description int Threshold value. By default it is None which means no threshold.","title":"threshold()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.to_lower_case","text":"Convert the text to lower case when processing the file.","title":"to_lower_case()"},{"location":"botcity-cloudvision-plugin-python/api/plugin/#botcity.plugins.cloudvision.plugin.BotCloudVisionPlugin.to_upper_case","text":"Convert the text to upper case when processing the file.","title":"to_upper_case()"},{"location":"botcity-crawler-plugin-python/","text":"Welcome Welcome to BotCity's Crawler Plugin. Installation Latest release Using PyPI pip install botcity-crawler-plugin Linux System Dependencies If you intend to use this package with Linux and JavaScript there are system dependencies that are required to be installed. For Debian/Ubuntu please run the following command: apt install libxcomposite1 libxcursor1 libxdamage1 \\ libxfixes3 libxi6 libxtst6 libnss3 libnspr4 libcups2 \\ libdbus-1-3 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 \\ libgtk-3-0 libx11-xcb1 --no-install-recommends Please make sure to install the equivalent libraries for your Linux distribution.","title":"Home"},{"location":"botcity-crawler-plugin-python/#welcome","text":"Welcome to BotCity's Crawler Plugin.","title":"Welcome"},{"location":"botcity-crawler-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-crawler-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-crawler-plugin-python/#using-pypi","text":"pip install botcity-crawler-plugin","title":"Using PyPI"},{"location":"botcity-crawler-plugin-python/#linux-system-dependencies","text":"If you intend to use this package with Linux and JavaScript there are system dependencies that are required to be installed. For Debian/Ubuntu please run the following command: apt install libxcomposite1 libxcursor1 libxdamage1 \\ libxfixes3 libxi6 libxtst6 libnss3 libnspr4 libcups2 \\ libdbus-1-3 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 \\ libgtk-3-0 libx11-xcb1 --no-install-recommends Please make sure to install the equivalent libraries for your Linux distribution.","title":"Linux System Dependencies"},{"location":"botcity-crawler-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.crawler import BotCrawlerPlugin As a demonstration of the library, let's build a simple example together that will make a request to BotCity's Youtube channel and fetch the number of subscribers. Making the request To make the request you must use the request method which takes as an argument a URL. # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url ) Locating the element Looking into the page source we can notice that the element holding the subscribers information has the attribute id as subscriber-count . Based on that we can use the get_element_by_id from the HTML object and finally read its value. Here is how we do it: # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value () Complete code Let's take a look into the complete code: # Import the plugin from botcity.plugins.crawler import BotCrawlerPlugin # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url ) # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value () Pro Tip This plugin allow you to use method chaining so the code above could be written as: from botcity.plugins.crawler import BotCrawlerPlugin url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" id = \"subscriber-count\" subscribers = BotCrawlerPlugin ( True ) . request ( url ) . get_element_by_id ( id ) . value () Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-crawler-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.crawler import BotCrawlerPlugin As a demonstration of the library, let's build a simple example together that will make a request to BotCity's Youtube channel and fetch the number of subscribers.","title":"Getting Started"},{"location":"botcity-crawler-plugin-python/intro/#making-the-request","text":"To make the request you must use the request method which takes as an argument a URL. # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url )","title":"Making the request"},{"location":"botcity-crawler-plugin-python/intro/#locating-the-element","text":"Looking into the page source we can notice that the element holding the subscribers information has the attribute id as subscriber-count . Based on that we can use the get_element_by_id from the HTML object and finally read its value. Here is how we do it: # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value ()","title":"Locating the element"},{"location":"botcity-crawler-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: # Import the plugin from botcity.plugins.crawler import BotCrawlerPlugin # Instantiate the plugin and enable JavaScript crawler = BotCrawlerPlugin ( javascript_enabled = True ) url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" # Make the request html = crawler . request ( url ) # This sets the current element on the HTML object to the one found html . get_element_by_id ( \"subscriber-count\" ) # Read the value into the subscribers variable subscribers = html . value ()","title":"Complete code"},{"location":"botcity-crawler-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: from botcity.plugins.crawler import BotCrawlerPlugin url = \"https://www.youtube.com/c/BotCityComputerVisionAutomationRPA\" id = \"subscriber-count\" subscribers = BotCrawlerPlugin ( True ) . request ( url ) . get_element_by_id ( id ) . value ()","title":"Pro Tip"},{"location":"botcity-crawler-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-crawler-plugin-python/api/html/","text":"botcity.plugins.crawler.html.HTML __init__ ( self , html , javascript_enabled = False ) special HTML representation of a page. Parameters: Name Type Description Default html requests_html.HTML the page html object from requests_html . required javascript_enabled bool Whether or not JavaScript was enabled for this request. Defaults to False. False elements ( self ) Returns all child elements. Returns: Type Description List List of elements. execute_javascript ( self , code ) Executes the specified JavaScript code within the page. The usage would be similar to what can be achieved when executing JavaScript in the current page by entering \"javascript:...some JS code...\" in the URL field of a browser. If JavaScript was not enabled on the Plugin before the request, calls to this method will be ignored. Parameters: Name Type Description Default code str the JavaScript code to be executed. required get_attribute ( self , attribute ) Returns the value of the attribute in an element. Parameters: Name Type Description Default attribute str The attribute name of element. required Exceptions: Type Description RuntimeError If the element has no attributes. KeyError [description] Returns: Type Description object The attribute value. get_element_by_id ( self , id ) Searches the element within the document which matches the id. Parameters: Name Type Description Default id str Unique identifier of the element. required query_selector ( self , selectors , reset = False ) Searches the first element within the document which matches the specified group of selectors. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object query_selector_all ( self , selectors , index , reset = False ) Searches all elements within the document which matches the specified group of selectors and returns the specified index. Parameters: Name Type Description Default selectors str One or more selectors required index int The index of the element of the list required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object query_selector_all_size ( self , selectors , reset = False ) Searches all elements within the document which matches the specified group of selectors and return the number of elements. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description int number of elements query_selector_iter_all ( self , selectors , reset = False ) Searches all elements within the document which matches the specified group of selectors and iterate over the results setting the current element. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object reset ( self ) Reset the current element to the top of the page. value ( self ) Returns the value of an element. Returns: Type Description str The element value.","title":"HTML"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML","text":"","title":"HTML"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.__init__","text":"HTML representation of a page. Parameters: Name Type Description Default html requests_html.HTML the page html object from requests_html . required javascript_enabled bool Whether or not JavaScript was enabled for this request. Defaults to False. False","title":"__init__()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.elements","text":"Returns all child elements. Returns: Type Description List List of elements.","title":"elements()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.execute_javascript","text":"Executes the specified JavaScript code within the page. The usage would be similar to what can be achieved when executing JavaScript in the current page by entering \"javascript:...some JS code...\" in the URL field of a browser. If JavaScript was not enabled on the Plugin before the request, calls to this method will be ignored. Parameters: Name Type Description Default code str the JavaScript code to be executed. required","title":"execute_javascript()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.get_attribute","text":"Returns the value of the attribute in an element. Parameters: Name Type Description Default attribute str The attribute name of element. required Exceptions: Type Description RuntimeError If the element has no attributes. KeyError [description] Returns: Type Description object The attribute value.","title":"get_attribute()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.get_element_by_id","text":"Searches the element within the document which matches the id. Parameters: Name Type Description Default id str Unique identifier of the element. required","title":"get_element_by_id()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector","text":"Searches the first element within the document which matches the specified group of selectors. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object","title":"query_selector()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector_all","text":"Searches all elements within the document which matches the specified group of selectors and returns the specified index. Parameters: Name Type Description Default selectors str One or more selectors required index int The index of the element of the list required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object","title":"query_selector_all()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector_all_size","text":"Searches all elements within the document which matches the specified group of selectors and return the number of elements. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description int number of elements","title":"query_selector_all_size()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.query_selector_iter_all","text":"Searches all elements within the document which matches the specified group of selectors and iterate over the results setting the current element. Parameters: Name Type Description Default selectors str One or more selectors required reset bool Whether or not to reset the current element before the search. False Returns: Type Description HTML this object","title":"query_selector_iter_all()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.reset","text":"Reset the current element to the top of the page.","title":"reset()"},{"location":"botcity-crawler-plugin-python/api/html/#botcity.plugins.crawler.html.HTML.value","text":"Returns the value of an element. Returns: Type Description str The element value.","title":"value()"},{"location":"botcity-crawler-plugin-python/api/plugin/","text":"botcity.plugins.crawler.plugin.BotCrawlerPlugin javascript_enabled : bool property writable Whether or not JavaScript should be enabled when making the request. __init__ ( self , javascript_enabled = False ) special BotCrawlerPlugin Parameters: Name Type Description Default javascript_enabled bool Whether or not JavaScript should be enabled when making requests. Defaults to False. False request ( self , url , wait_time = 0 ) Executes a request to the given URL Parameters: Name Type Description Default url str The desired URL. required wait_time int The number of milliseconds to wait after initial render. 0 Returns: Type Description HTML an HTML object which can be used to parse elements. See HTML","title":"Plugin"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin","text":"","title":"BotCrawlerPlugin"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin.javascript_enabled","text":"Whether or not JavaScript should be enabled when making the request.","title":"javascript_enabled"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin.__init__","text":"BotCrawlerPlugin Parameters: Name Type Description Default javascript_enabled bool Whether or not JavaScript should be enabled when making requests. Defaults to False. False","title":"__init__()"},{"location":"botcity-crawler-plugin-python/api/plugin/#botcity.plugins.crawler.plugin.BotCrawlerPlugin.request","text":"Executes a request to the given URL Parameters: Name Type Description Default url str The desired URL. required wait_time int The number of milliseconds to wait after initial render. 0 Returns: Type Description HTML an HTML object which can be used to parse elements. See HTML","title":"request()"},{"location":"botcity-csv-plugin-python/","text":"Welcome Welcome to BotCity's CSV Plugin. Installation Latest release Using PyPI pip install botcity-csv-plugin","title":"Home"},{"location":"botcity-csv-plugin-python/#welcome","text":"Welcome to BotCity's CSV Plugin.","title":"Welcome"},{"location":"botcity-csv-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-csv-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-csv-plugin-python/#using-pypi","text":"pip install botcity-csv-plugin","title":"Using PyPI"},{"location":"botcity-csv-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.csv import BotCSVPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin bot_csv = BotCSVPlugin () ... Step 2 of Example # Read from a CSV File, add a row, then sort it bot_csv . read ( 'read.csv' ) bot_csv . add_row ([ 0 , 22 ]) bot_csv . sort ([ 'H1' , 'H2' ], False ) # Print the result and save it to a CSV file print ( bot_csv . as_dict ) bot_csv . write ( 'write.csv' ) ... Complete code Let's take a look into the complete code: from botcity.plugins.csv import BotCSVPlugin # Reads from a CSV File, adds a row, then sorts it bot_csv = BotCSVPlugin () bot_csv . read ( 'read.csv' ) bot_csv . add_row ([ 0 , 22 ]) bot_csv . sort ([ 'H1' , 'H2' ], False ) # Prints the result and saves it to a CSV file print ( bot_csv . as_dict ) bot_csv . write ( 'write.csv' ) Pro Tip This plugin allow you to use method chaining so the code above could be written as: BotCSVPlugin () . read ( 'read.csv' ) . add_row ([ 0 , 22 ]) . sort ([ 'H1' , 'H2' ], False ) . write ( 'write.csv' ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-csv-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.csv import BotCSVPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-csv-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin bot_csv = BotCSVPlugin () ...","title":"Step 1 of Example"},{"location":"botcity-csv-plugin-python/intro/#step-2-of-example","text":"# Read from a CSV File, add a row, then sort it bot_csv . read ( 'read.csv' ) bot_csv . add_row ([ 0 , 22 ]) bot_csv . sort ([ 'H1' , 'H2' ], False ) # Print the result and save it to a CSV file print ( bot_csv . as_dict ) bot_csv . write ( 'write.csv' ) ...","title":"Step 2 of Example"},{"location":"botcity-csv-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.plugins.csv import BotCSVPlugin # Reads from a CSV File, adds a row, then sorts it bot_csv = BotCSVPlugin () bot_csv . read ( 'read.csv' ) bot_csv . add_row ([ 0 , 22 ]) bot_csv . sort ([ 'H1' , 'H2' ], False ) # Prints the result and saves it to a CSV file print ( bot_csv . as_dict ) bot_csv . write ( 'write.csv' )","title":"Complete code"},{"location":"botcity-csv-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: BotCSVPlugin () . read ( 'read.csv' ) . add_row ([ 0 , 22 ]) . sort ([ 'H1' , 'H2' ], False ) . write ( 'write.csv' )","title":"Pro Tip"},{"location":"botcity-csv-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-csv-plugin-python/api/plugin/","text":"botcity.plugins.csv.plugin.BotCSVPlugin header : List [ str ] property writable Returns this CSV's header. Returns: Type Description List[str] The header elements in str format. __init__ ( self , has_header = True , separator = ',' ) special This class stores the data in a CSV-like format. Parameters: Name Type Description Default has_header bool True if the CSV's first row is supposed to be the header. Defaults to True. True separator str The expected separator between each field. ',' Attributes: Name Type Description has_header bool, Optional A list representing the header of the CSV, if it has one. Defaults to True. separator str, Optional The expected separator between each field. Defaults to ','. add_column ( self , column_name = None , column = None ) Adds a new column to the CSV. Parameters: Name Type Description Default column_name str, Optional The new column's name. If None is provided, the new name will be the numeric index of the new column. None column List[object] A list of csv elements. The number of elements must match the number of rows already in the list. None Returns: Type Description BotCSVPlugin self (allows Method Chaining). add_columns ( self , columns ) Adds new columns to the CSV. Parameters: Name Type Description Default columns List[List[object]] Either a dict of columns, whose keys are the new column names and the values are lists of CSV elements, or just a list of CSV elements, in which case the column name will be it's numeric index. The number of elements of each column must match the number of rows already in the list. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). add_row ( self , row ) Adds a new row to the bottom of the CSV. If the input contains a new column, then a new column will be created in the CSV as well, with blank fields for the previously inserted lines. Parameters: Name Type Description Default row Union(List[object] or Dict[str, object] A list of CSV elements in string format, or a dict that has the column names as its keys. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). add_rows ( self , rows ) Adds new rows to the CSV. If the input contains a new column, then a new column will be created in the CSV as well, with blank fields for the previously inserted lines. Parameters: Name Type Description Default rows List[Union[List[object], Dict[str, object]]] A list of rows. Each row is either a list of csv elements, or a dict whose keys are the header, and the values are the new CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). as_dataframe ( self ) Returns the contents of this CSV in a Pandas DataFrame format. Returns: Type Description pandas.DataFrame A Pandas DataFrame object. as_dict ( self ) Returns the contents of this CSV in a list of dicts format. Returns: Type Description List[Dict[str, object]] A list of rows. Each row is a dict. as_list ( self , include_header = False ) Returns the contents of this CSV in a list of lists format. Nan values will be replaced with empty strings. Parameters: Name Type Description Default include_header bool, Optional If True, the first inner-list will receive the CSV's header. Defaults to False. False Returns: Type Description List[List[object]] A list of rows. Each is a list of row elements. clear ( self ) Clears all the rows of the CSV, but the header remains. Returns: Type Description BotCSVPlugin self (allows Method Chaining) get_column ( self , column ) Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original CSV. Parameters: Name Type Description Default column Union[str, int] Either the column's name or it's 0-indexed number. required Returns: Type Description List[object] The values of all entries within the column. get_entry ( self , column , row ) Returns the value of a single entry of a column. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required row int The 0-indexed row number. required Returns: Type Description object The entry's value. get_row ( self , row ) Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original CSV. Parameters: Name Type Description Default row int The 0-indexed row number. required Returns: Type Description List[object] The values of all entries within the row. read ( self , file_or_path ) Reads a CSV file using the delimiter and the has_header attributes of this class. Parameters: Name Type Description Default file_or_path Either a buffered CSV file or a path to it. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). remove_column ( self , column ) Removes single column from the CSV. If the CSV has a header, this column will be removed from there as well. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). remove_columns ( self , columns ) Removes a list of columns from the CSV. If the CSV has a header, this column will be removed from there as well. Parameters: Name Type Description Default columns List[Union[str, int]] A list of column names or their 0-indexed numbers. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). remove_row ( self , row ) Removes a single row from the CSV. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 0-indexed number of the row to be removed. required Returns: Type Description BotCSVPlugin self (allows Method Chaining). remove_rows ( self , rows ) Removes rows from the CSV. Keep in mind that each row removed will cause the rows below it to be moved up after they are all removed. Parameters: Name Type Description Default rows List[int] A list of the 0-indexed numbers of the rows to be removed. required Returns: Type Description BotCSVPlugin self (allows Method Chaining) set_column ( self , column , values ) Replaces the values of an entire column of the CSV. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required values List[object] A list of CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining) set_entry ( self , column , row , value ) Replaces the value of a single entry of a given column. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-index number. required row int The entry's 0-indexed row number. required value object The new value of the entry. required Returns: Type Description BotCSVPlugin self (allows Method Chaining) set_row ( self , row , values ) Replaces the values of an entire row of the CSV. Parameters: Name Type Description Default row int The row's 0-indexed number. required values Union[List[object], Dict[str, object]] Either a list of CSV elements, or a dict whose keys are the header, and the values are the new CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining) sort ( self , by_columns , ascending = True ) Sorts the CSV rows using the first column of the by_columns parameter as a reference. In case of a tie, the second column provided is used, and so on. Parameters: Name Type Description Default by_columns Union[int, str, List[Union[int, str]]] Either a column name or its 0-indexed number; or a list of those. required ascending bool, Optional Set to False if you want to use descending order. Defaults to True. True Returns: Type Description BotCSVPlugin self (allows Method Chaining) write ( self , file_or_path ) Writes this class's CSV content to a file using it's delimiter and has_header attributes. Parameters: Name Type Description Default file_or_path Either a buffered CSV file or a path to it. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"Plugin"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin","text":"","title":"BotCSVPlugin"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.header","text":"Returns this CSV's header. Returns: Type Description List[str] The header elements in str format.","title":"header"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.__init__","text":"This class stores the data in a CSV-like format. Parameters: Name Type Description Default has_header bool True if the CSV's first row is supposed to be the header. Defaults to True. True separator str The expected separator between each field. ',' Attributes: Name Type Description has_header bool, Optional A list representing the header of the CSV, if it has one. Defaults to True. separator str, Optional The expected separator between each field. Defaults to ','.","title":"__init__()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.add_column","text":"Adds a new column to the CSV. Parameters: Name Type Description Default column_name str, Optional The new column's name. If None is provided, the new name will be the numeric index of the new column. None column List[object] A list of csv elements. The number of elements must match the number of rows already in the list. None Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"add_column()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.add_columns","text":"Adds new columns to the CSV. Parameters: Name Type Description Default columns List[List[object]] Either a dict of columns, whose keys are the new column names and the values are lists of CSV elements, or just a list of CSV elements, in which case the column name will be it's numeric index. The number of elements of each column must match the number of rows already in the list. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"add_columns()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.add_row","text":"Adds a new row to the bottom of the CSV. If the input contains a new column, then a new column will be created in the CSV as well, with blank fields for the previously inserted lines. Parameters: Name Type Description Default row Union(List[object] or Dict[str, object] A list of CSV elements in string format, or a dict that has the column names as its keys. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"add_row()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.add_rows","text":"Adds new rows to the CSV. If the input contains a new column, then a new column will be created in the CSV as well, with blank fields for the previously inserted lines. Parameters: Name Type Description Default rows List[Union[List[object], Dict[str, object]]] A list of rows. Each row is either a list of csv elements, or a dict whose keys are the header, and the values are the new CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"add_rows()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.as_dataframe","text":"Returns the contents of this CSV in a Pandas DataFrame format. Returns: Type Description pandas.DataFrame A Pandas DataFrame object.","title":"as_dataframe()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.as_dict","text":"Returns the contents of this CSV in a list of dicts format. Returns: Type Description List[Dict[str, object]] A list of rows. Each row is a dict.","title":"as_dict()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.as_list","text":"Returns the contents of this CSV in a list of lists format. Nan values will be replaced with empty strings. Parameters: Name Type Description Default include_header bool, Optional If True, the first inner-list will receive the CSV's header. Defaults to False. False Returns: Type Description List[List[object]] A list of rows. Each is a list of row elements.","title":"as_list()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.clear","text":"Clears all the rows of the CSV, but the header remains. Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"clear()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.get_column","text":"Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original CSV. Parameters: Name Type Description Default column Union[str, int] Either the column's name or it's 0-indexed number. required Returns: Type Description List[object] The values of all entries within the column.","title":"get_column()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.get_entry","text":"Returns the value of a single entry of a column. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required row int The 0-indexed row number. required Returns: Type Description object The entry's value.","title":"get_entry()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.get_row","text":"Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original CSV. Parameters: Name Type Description Default row int The 0-indexed row number. required Returns: Type Description List[object] The values of all entries within the row.","title":"get_row()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.read","text":"Reads a CSV file using the delimiter and the has_header attributes of this class. Parameters: Name Type Description Default file_or_path Either a buffered CSV file or a path to it. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"read()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.remove_column","text":"Removes single column from the CSV. If the CSV has a header, this column will be removed from there as well. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"remove_column()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.remove_columns","text":"Removes a list of columns from the CSV. If the CSV has a header, this column will be removed from there as well. Parameters: Name Type Description Default columns List[Union[str, int]] A list of column names or their 0-indexed numbers. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"remove_columns()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.remove_row","text":"Removes a single row from the CSV. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 0-indexed number of the row to be removed. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"remove_row()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.remove_rows","text":"Removes rows from the CSV. Keep in mind that each row removed will cause the rows below it to be moved up after they are all removed. Parameters: Name Type Description Default rows List[int] A list of the 0-indexed numbers of the rows to be removed. required Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"remove_rows()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.set_column","text":"Replaces the values of an entire column of the CSV. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-indexed number. required values List[object] A list of CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"set_column()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.set_entry","text":"Replaces the value of a single entry of a given column. Parameters: Name Type Description Default column Union[str, int] Either the entry's column name or it's 0-index number. required row int The entry's 0-indexed row number. required value object The new value of the entry. required Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"set_entry()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.set_row","text":"Replaces the values of an entire row of the CSV. Parameters: Name Type Description Default row int The row's 0-indexed number. required values Union[List[object], Dict[str, object]] Either a list of CSV elements, or a dict whose keys are the header, and the values are the new CSV elements. required Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"set_row()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.sort","text":"Sorts the CSV rows using the first column of the by_columns parameter as a reference. In case of a tie, the second column provided is used, and so on. Parameters: Name Type Description Default by_columns Union[int, str, List[Union[int, str]]] Either a column name or its 0-indexed number; or a list of those. required ascending bool, Optional Set to False if you want to use descending order. Defaults to True. True Returns: Type Description BotCSVPlugin self (allows Method Chaining)","title":"sort()"},{"location":"botcity-csv-plugin-python/api/plugin/#botcity.plugins.csv.plugin.BotCSVPlugin.write","text":"Writes this class's CSV content to a file using it's delimiter and has_header attributes. Parameters: Name Type Description Default file_or_path Either a buffered CSV file or a path to it. required Returns: Type Description BotCSVPlugin self (allows Method Chaining).","title":"write()"},{"location":"botcity-excel-plugin-python/","text":"Welcome Welcome to BotCity's Excel Plugin. Installation Latest release Using PyPI pip install botcity-excel-plugin","title":"Home"},{"location":"botcity-excel-plugin-python/#welcome","text":"Welcome to BotCity's Excel Plugin.","title":"Welcome"},{"location":"botcity-excel-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-excel-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-excel-plugin-python/#using-pypi","text":"pip install botcity-excel-plugin","title":"Using PyPI"},{"location":"botcity-excel-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.excel import BotExcelPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin bot_excel = BotExcelPlugin () ... Step 2 of Example # Read from a CSV File, add a row, then sort it bot_excel . read ( 'read.xlsx' ) bot_excel . add_row ([ 0 , 22 ]) bot_excel . sort ([ 'A' , 'B' ], False ) # Print the result and save it to a CSV file print ( bot_excel . as_list ()) bot_excel . write ( 'write.xlsx' ) ... Complete code Let's take a look into the complete code: from botcity.plugins.excel import BotExcelPlugin # Instantiate the plugin bot_excel = BotExcelPlugin () # Read from a CSV File, add a row, then sort it bot_excel . read ( 'read.xlsx' ) bot_excel . add_row ([ 0 , 22 ]) bot_excel . sort ([ 'A' , 'B' ]) # Print the result and save it to a CSV file print ( bot_excel . as_list ()) bot_excel . write ( 'write.xlsx' ) ... Pro Tip This plugin allow you to use method chaining so the code above could be written as: print ( BotExcelPlugin () . read ( 'read.xlsx' ) . add_row ([ 0 , 22 ]) . sort ([ 'A' , 'B' ]) . as_list ()) ... Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-excel-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.excel import BotExcelPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-excel-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin bot_excel = BotExcelPlugin () ...","title":"Step 1 of Example"},{"location":"botcity-excel-plugin-python/intro/#step-2-of-example","text":"# Read from a CSV File, add a row, then sort it bot_excel . read ( 'read.xlsx' ) bot_excel . add_row ([ 0 , 22 ]) bot_excel . sort ([ 'A' , 'B' ], False ) # Print the result and save it to a CSV file print ( bot_excel . as_list ()) bot_excel . write ( 'write.xlsx' ) ...","title":"Step 2 of Example"},{"location":"botcity-excel-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.plugins.excel import BotExcelPlugin # Instantiate the plugin bot_excel = BotExcelPlugin () # Read from a CSV File, add a row, then sort it bot_excel . read ( 'read.xlsx' ) bot_excel . add_row ([ 0 , 22 ]) bot_excel . sort ([ 'A' , 'B' ]) # Print the result and save it to a CSV file print ( bot_excel . as_list ()) bot_excel . write ( 'write.xlsx' ) ...","title":"Complete code"},{"location":"botcity-excel-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: print ( BotExcelPlugin () . read ( 'read.xlsx' ) . add_row ([ 0 , 22 ]) . sort ([ 'A' , 'B' ]) . as_list ()) ...","title":"Pro Tip"},{"location":"botcity-excel-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-excel-plugin-python/api/plugin/","text":"botcity.plugins.excel.plugin.BotExcelPlugin __init__ ( self , active_sheet = 'sheet1' ) special This class stores the data in a Excel-like (sheets) format. This plugin supports multiple sheets into a object of this class. To access sheets other than the first, either pass the sheet index or name, or change the default sheet this class will point to with the set_active_sheet() method. Parameters: Name Type Description Default active_sheet str, Optional The name of the sheet this class will be created with. Defaults to 'sheet1'. 'sheet1' Attributes: Name Type Description active_sheet str, Optional The default sheet this class's methods will work with. Defaults to 'sheet1'. add_column ( self , column , sheet = None ) Adds a new column to the sheet. Parameters: Name Type Description Default column List[object] A list of cells. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining). add_columns ( self , columns , sheet = None ) Adds new columns to the sheet. Parameters: Name Type Description Default columns List[List[object]] A list of columns. Each column is a list of cells. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining). add_row ( self , row , sheet = None ) Adds a new row to the bottom of the sheet. Parameters: Name Type Description Default row List[object] A list of cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining). add_rows ( self , rows , sheet = None ) Adds new rows to the sheet. Parameters: Name Type Description Default rows List[List[object]] A list of rows. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining). as_dataframe ( self , sheet = None ) Returns the contents of an entire sheet in a Pandas DataFrame format. Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description DataFrame A Pandas DataFrame object. as_list ( self , sheet = None ) Returns the contents of an entire sheet in a list of lists format. This is equivalent to get_range(\"\", sheet). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list of rows. Each row is a list of cell values. clear ( self , sheet = None ) Deletes the entire content of the sheet. Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining). clear_range ( self , range_ , sheet = None ) Clears the provided area of the sheet. Keep in mind that this method will not remove any rows or columns, only erase their values. Parameters: Name Type Description Default range_ str The range to be cleared, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) create_sheet ( self , sheet ) Creates a new sheet. Parameters: Name Type Description Default sheet str The new sheet's name. required Returns: Type Description BotExcelPlugin self (allows Method Chaining) get_cell ( self , column , row , sheet = None ) Returns the value of a single cell. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required row int The 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description object The cell's value. get_column ( self , column , sheet = None ) Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the column. get_range ( self , range_ , sheet = None ) Returns the values of all cells within an area of the sheet in a list of list format. Parameters: Name Type Description Default range_ str The range (minus the sheet) to be retrieved, in a A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list with the recovered rows. Each row is a list of objects. get_row ( self , row , sheet = None ) Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the row. list_sheets ( self ) Returns a list with the name of all the sheets in this spreadsheet. Returns: Type Description List[str] A list of sheet names. read ( self , file_or_path ) Reads an Excel file. Parameters: Name Type Description Default file_or_path Either a buffered Excel file or a path to it. required Returns: Type Description BotExcelPlugin self (allows Method Chaining). remove_column ( self , column , sheet = None ) Removes single column from the sheet. Keep in mind that the columns to its right will be moved to the left. Parameters: Name Type Description Default column str The letter-indexed name ('a', 'A', 'AA') of the column to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining). remove_columns ( self , columns , sheet = None ) Removes a list of columns from the sheet. Keep in mind that each column removed will cause the columns to their right to be moved left after they are all removed. Parameters: Name Type Description Default columns List[str] A list of the letter-indexed names of the columns to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining). remove_row ( self , row , sheet = None ) Removes a single row from the sheet. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining). remove_rows ( self , rows , sheet = None ) Removes rows from the sheet. Keep in mind that each row removed will cause the rows below it to be moved up after they are all removed. Parameters: Name Type Description Default rows List[int] A list of the 1-indexed numbers of the rows to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) remove_sheet ( self , sheet ) Removes a sheet. Keep in mind that if you remove the active_sheet, you must set another sheet as active before using trying to modify it! Parameters: Name Type Description Default sheet str The sheet's name. required Returns: Type Description BotExcelPlugin self (allows Method Chaining) rename_sheet ( self , new_name , sheet ) Renames a sheet. Keep in mind that in doing so the new sheet will be reordered to the last position. Parameters: Name Type Description Default new_name str The sheet will be renamed to this. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. required Returns: Type Description BotExcelPlugin self (allows Method Chaining) set_cell ( self , column , row , value , sheet = None ) Replaces the value of a single cell. Parameters: Name Type Description Default column str The cell's letter-indexed column name ('a', 'A', 'AA'). required row int The cell's 1-indexed row number. required value object The new value of the cell. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) set_range ( self , values , range_ = None , sheet = None ) Replace the values within an area of the sheet by the values supplied. Parameters: Name Type Description Default values List[List[object]] A list of rows. Each row is list of cell values. required range_ str, Optional The range (minus the sheet) to have its values replaced, in A1 format. Ex: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str (str, Optional): If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) sort ( self , by_columns , ascending = True , start_row = 2 , end_row = None , sheet = None ) Sorts the sheet's rows according to the columns provided. Unless the start and end point are provided, all rows minus the first one will be sorted! Parameters: Name Type Description Default by_columns Union[str, List[str]] Either a letter-indexed column name to sort the rows by, or a list of them. In case of a tie, the second column is used, and so on. required ascending bool, Optional Set to False to sort by descending order. Defaults to True. True start_row str, Optional The 1-indexed row number where the sort will start from. Defaults to 2. 2 end_row str, Optional The 1-indexed row number where the sort will end at (inclusive). Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining) write ( self , file_or_path ) Writes this class's content to a file. Parameters: Name Type Description Default file_or_path Either a buffered Excel file or a path to it. required Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"Plugin"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin","text":"","title":"BotExcelPlugin"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.__init__","text":"This class stores the data in a Excel-like (sheets) format. This plugin supports multiple sheets into a object of this class. To access sheets other than the first, either pass the sheet index or name, or change the default sheet this class will point to with the set_active_sheet() method. Parameters: Name Type Description Default active_sheet str, Optional The name of the sheet this class will be created with. Defaults to 'sheet1'. 'sheet1' Attributes: Name Type Description active_sheet str, Optional The default sheet this class's methods will work with. Defaults to 'sheet1'.","title":"__init__()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.add_column","text":"Adds a new column to the sheet. Parameters: Name Type Description Default column List[object] A list of cells. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"add_column()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.add_columns","text":"Adds new columns to the sheet. Parameters: Name Type Description Default columns List[List[object]] A list of columns. Each column is a list of cells. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"add_columns()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.add_row","text":"Adds a new row to the bottom of the sheet. Parameters: Name Type Description Default row List[object] A list of cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"add_row()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.add_rows","text":"Adds new rows to the sheet. Parameters: Name Type Description Default rows List[List[object]] A list of rows. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"add_rows()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.as_dataframe","text":"Returns the contents of an entire sheet in a Pandas DataFrame format. Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description DataFrame A Pandas DataFrame object.","title":"as_dataframe()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.as_list","text":"Returns the contents of an entire sheet in a list of lists format. This is equivalent to get_range(\"\", sheet). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list of rows. Each row is a list of cell values.","title":"as_list()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.clear","text":"Deletes the entire content of the sheet. Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. None Defaults to None. Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"clear()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.clear_range","text":"Clears the provided area of the sheet. Keep in mind that this method will not remove any rows or columns, only erase their values. Parameters: Name Type Description Default range_ str The range to be cleared, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"clear_range()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.create_sheet","text":"Creates a new sheet. Parameters: Name Type Description Default sheet str The new sheet's name. required Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"create_sheet()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.get_cell","text":"Returns the value of a single cell. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required row int The 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description object The cell's value.","title":"get_cell()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.get_column","text":"Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the column.","title":"get_column()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.get_range","text":"Returns the values of all cells within an area of the sheet in a list of list format. Parameters: Name Type Description Default range_ str The range (minus the sheet) to be retrieved, in a A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list with the recovered rows. Each row is a list of objects.","title":"get_range()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.get_row","text":"Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the row.","title":"get_row()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.list_sheets","text":"Returns a list with the name of all the sheets in this spreadsheet. Returns: Type Description List[str] A list of sheet names.","title":"list_sheets()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.read","text":"Reads an Excel file. Parameters: Name Type Description Default file_or_path Either a buffered Excel file or a path to it. required Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"read()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_column","text":"Removes single column from the sheet. Keep in mind that the columns to its right will be moved to the left. Parameters: Name Type Description Default column str The letter-indexed name ('a', 'A', 'AA') of the column to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"remove_column()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_columns","text":"Removes a list of columns from the sheet. Keep in mind that each column removed will cause the columns to their right to be moved left after they are all removed. Parameters: Name Type Description Default columns List[str] A list of the letter-indexed names of the columns to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"remove_columns()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_row","text":"Removes a single row from the sheet. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"remove_row()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_rows","text":"Removes rows from the sheet. Keep in mind that each row removed will cause the rows below it to be moved up after they are all removed. Parameters: Name Type Description Default rows List[int] A list of the 1-indexed numbers of the rows to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"remove_rows()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.remove_sheet","text":"Removes a sheet. Keep in mind that if you remove the active_sheet, you must set another sheet as active before using trying to modify it! Parameters: Name Type Description Default sheet str The sheet's name. required Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"remove_sheet()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.rename_sheet","text":"Renames a sheet. Keep in mind that in doing so the new sheet will be reordered to the last position. Parameters: Name Type Description Default new_name str The sheet will be renamed to this. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. required Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"rename_sheet()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.set_cell","text":"Replaces the value of a single cell. Parameters: Name Type Description Default column str The cell's letter-indexed column name ('a', 'A', 'AA'). required row int The cell's 1-indexed row number. required value object The new value of the cell. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"set_cell()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.set_range","text":"Replace the values within an area of the sheet by the values supplied. Parameters: Name Type Description Default values List[List[object]] A list of rows. Each row is list of cell values. required range_ str, Optional The range (minus the sheet) to have its values replaced, in A1 format. Ex: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str (str, Optional): If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"set_range()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.sort","text":"Sorts the sheet's rows according to the columns provided. Unless the start and end point are provided, all rows minus the first one will be sorted! Parameters: Name Type Description Default by_columns Union[str, List[str]] Either a letter-indexed column name to sort the rows by, or a list of them. In case of a tie, the second column is used, and so on. required ascending bool, Optional Set to False to sort by descending order. Defaults to True. True start_row str, Optional The 1-indexed row number where the sort will start from. Defaults to 2. 2 end_row str, Optional The 1-indexed row number where the sort will end at (inclusive). Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotExcelPlugin self (allows Method Chaining)","title":"sort()"},{"location":"botcity-excel-plugin-python/api/plugin/#botcity.plugins.excel.plugin.BotExcelPlugin.write","text":"Writes this class's content to a file. Parameters: Name Type Description Default file_or_path Either a buffered Excel file or a path to it. required Returns: Type Description BotExcelPlugin self (allows Method Chaining).","title":"write()"},{"location":"botcity-googlesheets-plugin-python/","text":"Welcome Welcome to BotCity's Googlesheets Plugin. Installation Latest release Using PyPI pip install botcity-googlesheets-plugin Google Credentials Create a Google Cloud Platform project ( details here ) Activate the Google Drive API ( details here ) Create OAuth client ID credentials ( details here ) Download the OAuth credentials file client_secret.json ( details here )","title":"Home"},{"location":"botcity-googlesheets-plugin-python/#welcome","text":"Welcome to BotCity's Googlesheets Plugin.","title":"Welcome"},{"location":"botcity-googlesheets-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-googlesheets-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-googlesheets-plugin-python/#using-pypi","text":"pip install botcity-googlesheets-plugin","title":"Using PyPI"},{"location":"botcity-googlesheets-plugin-python/#google-credentials","text":"Create a Google Cloud Platform project ( details here ) Activate the Google Drive API ( details here ) Create OAuth client ID credentials ( details here ) Download the OAuth credentials file client_secret.json ( details here )","title":"Google Credentials"},{"location":"botcity-googlesheets-plugin-python/intro/","text":"Getting Started After you installed this package and set up your Google Credentials , the next step is to import the package into your code and start using its functions. from botcity.plugins.googlesheets import BotGooglesheetsPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin bot_sheets = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) Step 2 of Example # Adds some data bot_sheets . add_row ([ 'Name' , 'Age' ]) bot_sheets . add_rows ([ 'Peter' , '53' ], [ 'Paulo' , '35' ]) # Sorts the columns by ascending age bot_sheets . sort ( 'B' ) # Prints the resulting list print ( bot_sheets . as_list ()) Complete code Let's take a look into the complete code: from botcity.plugins.googlesheets import BotGoogleSheetsPlugin # Instantiate the plugin bot_sheets = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) # Adds some data bot_sheets . add_row ([ 'Name' , 'Age' ]) bot_sheets . add_rows ([ 'Peter' , '53' ], [ 'Paulo' , '35' ]) # Sorts the columns by ascending age bot_sheets . sort ( 'B' ) # Prints the resulting list print ( bot_sheets . as_list ()) Pro Tip This plugin allow you to use method chaining so the code above could be written as: data = [[ 'Name' , 'Age' ], [ 'Peter' , '53' ], [ 'Paulo' , '35' ]] sorted_data = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) . add_rows ( rows ) . sort ( 'B' ) . as_list () print ( sorted_data ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-googlesheets-plugin-python/intro/#getting-started","text":"After you installed this package and set up your Google Credentials , the next step is to import the package into your code and start using its functions. from botcity.plugins.googlesheets import BotGooglesheetsPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-googlesheets-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin bot_sheets = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' )","title":"Step 1 of Example"},{"location":"botcity-googlesheets-plugin-python/intro/#step-2-of-example","text":"# Adds some data bot_sheets . add_row ([ 'Name' , 'Age' ]) bot_sheets . add_rows ([ 'Peter' , '53' ], [ 'Paulo' , '35' ]) # Sorts the columns by ascending age bot_sheets . sort ( 'B' ) # Prints the resulting list print ( bot_sheets . as_list ())","title":"Step 2 of Example"},{"location":"botcity-googlesheets-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.plugins.googlesheets import BotGoogleSheetsPlugin # Instantiate the plugin bot_sheets = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) # Adds some data bot_sheets . add_row ([ 'Name' , 'Age' ]) bot_sheets . add_rows ([ 'Peter' , '53' ], [ 'Paulo' , '35' ]) # Sorts the columns by ascending age bot_sheets . sort ( 'B' ) # Prints the resulting list print ( bot_sheets . as_list ())","title":"Complete code"},{"location":"botcity-googlesheets-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: data = [[ 'Name' , 'Age' ], [ 'Peter' , '53' ], [ 'Paulo' , '35' ]] sorted_data = BotGoogleSheetsPlugin ( CLIENT_SECRET_PATH , 'SPREADSHEET_ID' ) . add_rows ( rows ) . sort ( 'B' ) . as_list () print ( sorted_data )","title":"Pro Tip"},{"location":"botcity-googlesheets-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-googlesheets-plugin-python/api/plugin/","text":"botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin __init__ ( self , client_secret_path , spreadsheet_id , active_sheet = None ) special This class gives you easy access to Google Sheets API's functionalities. This plugin works with one spreadsheet at a time, so if you want to access multiple files, simply create multiple objects of this class. However, if you need to work with different sheets within the same file, you can do so by supplying the sheet's name to this class's methods, or change the default sheet with set_active_sheet(). Parameters: Name Type Description Default client_secret_path str The path to your client_secret file. Get it from your Google Cloud Console! required spreadsheet_id str The ID of a Google Spreadsheet file. You can get it from the file's URL. required active_sheet str, Optional The sheet this plugin will access by default. If None, the first sheet is used. Defaults to None. None add_column ( self , column , sheet = None ) Adds a new column to the right end of the sheet. Parameters: Name Type Description Default column List[object] A list with the cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) add_columns ( self , columns , sheet = None ) Adds new columns to the right end of the sheet. Parameters: Name Type Description Default columns List[List[object]] A list of rows. Each row is a list with cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) add_row ( self , row , sheet = None ) Adds a new row to the bottom of the sheet. Parameters: Name Type Description Default row List[object] A list with the cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) add_rows ( self , rows , sheet = None ) Adds new rows to the bottom of the sheet. Parameters: Name Type Description Default rows List[List[object]] A list of rows. Each row is a list with cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) as_list ( self , sheet = None ) Returns the contents of an entire sheet in a list of lists format. This is equivalent to get_range(\"\", sheet). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list of rows. Each row is a list of cell values. clear ( self , sheet = None ) Clears an entire sheet. Only the cells' content is removed, while their formatting remains. This method is equivalent to clear_range(\"\"). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) clear_range ( self , range_ , sheet = None ) Clears the provided area of the sheet. Only the cells' content is removed, while the formatting remains. Parameters: Name Type Description Default range_ str The range to be cleared, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) create_sheet ( self , sheet ) Creates a new sheet within the spreadsheet. Parameters: Name Type Description Default sheet str The new sheet's name. required Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) get_cell ( self , column , row , sheet = None ) Returns the value of a single cell. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required row int The cell's 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description object The cell's value. get_column ( self , column , sheet = None ) Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the column. get_range ( self , range_ , sheet = None ) Returns the values of all cells within an area of the sheet in a list of list format. Parameters: Name Type Description Default range_ str The range (minus the sheet) to be retrieved, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list with the recovered rows. Each row is a list of objects. get_row ( self , row , sheet = None ) Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default row int The 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the row. list_sheets ( self ) Returns a list with the name of all the sheets in this spreadsheet. Returns: Type Description List[str] A list of sheet names. new_spreadsheet ( client_secret_path , name ) classmethod An alternative way to initialize the plugin. This factory method will create a new spreadsheet, and return an initialized object of the plugin that refers to it. Parameters: Name Type Description Default name str The name of the new spreadsheet. required Returns: Type Description BotGooglesheetsPlugin An initialized object of the plugin points to the newly created sheet. remove_column ( self , column , sheet = None ) Removes a single column from the sheet. Keep in mind that the columns to its right will be moved to the left. Parameters: Name Type Description Default column str The letter-indexed name ('a', 'A', 'AA') of the column to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) remove_columns ( self , columns , sheet = None ) Removes columns from the sheet. Keep in mind that each column removed will cause the columns to its right to be moved left. For this reason, this method will sort the indexes of the columns you provide, and remove then in descending order. Parameters: Name Type Description Default columns List[str] A list of the letter-indexed names of the columns to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) remove_row ( self , row , sheet = None ) Removes a single row from the sheet. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) remove_rows ( self , rows , sheet = None ) Removes rows from the sheet. Keep in mind that each row removed will cause the rows below it to be moved up. For this reason, this method will sort the indexes of the rows you provide, and remove then in descending order. Parameters: Name Type Description Default rows List[int] A list of the 1-indexed numbers of the rows to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) remove_sheet ( self , sheet = None ) Removes a sheet from the spreadsheet. Keep in mind that if you remove the active_sheet, you must set another sheet as active before using trying to modify it! Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) set_cell ( self , column , row , value , sheet = None ) Replaces the value of a single cell. Parameters: Name Type Description Default column str The cell's letter-indexed column name. required row int The cell's 1-indexed row number. required value object The new value of the cell. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) set_range ( self , values , range_ = None , sheet = None ) Replace the values within an area of the sheet by the values supplied. Parameters: Name Type Description Default values List[List[object]] A list of rows. Each row is a list of cell values. required range_ str, Optional The range (minus the sheet) to have its values replaced, in A1 format. Ex: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str (str, Optional): If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining) sort ( self , by_columns , ascending = True , start_row = 2 , end_row = None , sheet = None ) Sorts the sheet's rows according to the columns provided. Unless the start and end point are provided, all rows minus the first one will be sorted! Parameters: Name Type Description Default by_columns Union[str, List[str]] Either a letter-indexed column name to sort the rows by, or a list of them. In case of a tie, the second column is used, and so on. required ascending bool, Optional Set to False to sort by descending order. Defaults to True. True start_row str, Optional The 1-indexed row number where the sort will start from. Defaults to 2. 2 end_row str, Optional The 1-indexed row number where the sort will end at (inclusive). Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"Plugin"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin","text":"","title":"BotGoogleSheetsPlugin"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.__init__","text":"This class gives you easy access to Google Sheets API's functionalities. This plugin works with one spreadsheet at a time, so if you want to access multiple files, simply create multiple objects of this class. However, if you need to work with different sheets within the same file, you can do so by supplying the sheet's name to this class's methods, or change the default sheet with set_active_sheet(). Parameters: Name Type Description Default client_secret_path str The path to your client_secret file. Get it from your Google Cloud Console! required spreadsheet_id str The ID of a Google Spreadsheet file. You can get it from the file's URL. required active_sheet str, Optional The sheet this plugin will access by default. If None, the first sheet is used. Defaults to None. None","title":"__init__()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.add_column","text":"Adds a new column to the right end of the sheet. Parameters: Name Type Description Default column List[object] A list with the cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"add_column()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.add_columns","text":"Adds new columns to the right end of the sheet. Parameters: Name Type Description Default columns List[List[object]] A list of rows. Each row is a list with cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"add_columns()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.add_row","text":"Adds a new row to the bottom of the sheet. Parameters: Name Type Description Default row List[object] A list with the cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"add_row()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.add_rows","text":"Adds new rows to the bottom of the sheet. Parameters: Name Type Description Default rows List[List[object]] A list of rows. Each row is a list with cell values. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"add_rows()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.as_list","text":"Returns the contents of an entire sheet in a list of lists format. This is equivalent to get_range(\"\", sheet). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list of rows. Each row is a list of cell values.","title":"as_list()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.clear","text":"Clears an entire sheet. Only the cells' content is removed, while their formatting remains. This method is equivalent to clear_range(\"\"). Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"clear()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.clear_range","text":"Clears the provided area of the sheet. Only the cells' content is removed, while the formatting remains. Parameters: Name Type Description Default range_ str The range to be cleared, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"clear_range()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.create_sheet","text":"Creates a new sheet within the spreadsheet. Parameters: Name Type Description Default sheet str The new sheet's name. required Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"create_sheet()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_cell","text":"Returns the value of a single cell. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required row int The cell's 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description object The cell's value.","title":"get_cell()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_column","text":"Returns the contents of an entire column in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default column str The letter-indexed column name ('a', 'A', 'AA'). required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the column.","title":"get_column()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_range","text":"Returns the values of all cells within an area of the sheet in a list of list format. Parameters: Name Type Description Default range_ str The range (minus the sheet) to be retrieved, in A1 format. Example: 'A1:B2', 'B', '3', 'A1'. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[List[object]] A list with the recovered rows. Each row is a list of objects.","title":"get_range()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.get_row","text":"Returns the contents of an entire row in a list format. Please note that altering the values in this list will not alter the values in the original sheet. Parameters: Name Type Description Default row int The 1-indexed row number. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description List[object] The values of all cells within the row.","title":"get_row()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.list_sheets","text":"Returns a list with the name of all the sheets in this spreadsheet. Returns: Type Description List[str] A list of sheet names.","title":"list_sheets()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.new_spreadsheet","text":"An alternative way to initialize the plugin. This factory method will create a new spreadsheet, and return an initialized object of the plugin that refers to it. Parameters: Name Type Description Default name str The name of the new spreadsheet. required Returns: Type Description BotGooglesheetsPlugin An initialized object of the plugin points to the newly created sheet.","title":"new_spreadsheet()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_column","text":"Removes a single column from the sheet. Keep in mind that the columns to its right will be moved to the left. Parameters: Name Type Description Default column str The letter-indexed name ('a', 'A', 'AA') of the column to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_column()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_columns","text":"Removes columns from the sheet. Keep in mind that each column removed will cause the columns to its right to be moved left. For this reason, this method will sort the indexes of the columns you provide, and remove then in descending order. Parameters: Name Type Description Default columns List[str] A list of the letter-indexed names of the columns to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_columns()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_row","text":"Removes a single row from the sheet. Keep in mind that the rows below will be moved up. Parameters: Name Type Description Default row int The 1-indexed number of the row to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_row()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_rows","text":"Removes rows from the sheet. Keep in mind that each row removed will cause the rows below it to be moved up. For this reason, this method will sort the indexes of the rows you provide, and remove then in descending order. Parameters: Name Type Description Default rows List[int] A list of the 1-indexed numbers of the rows to be removed. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_rows()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.remove_sheet","text":"Removes a sheet from the spreadsheet. Keep in mind that if you remove the active_sheet, you must set another sheet as active before using trying to modify it! Parameters: Name Type Description Default sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"remove_sheet()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.set_cell","text":"Replaces the value of a single cell. Parameters: Name Type Description Default column str The cell's letter-indexed column name. required row int The cell's 1-indexed row number. required value object The new value of the cell. required sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"set_cell()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.set_range","text":"Replace the values within an area of the sheet by the values supplied. Parameters: Name Type Description Default values List[List[object]] A list of rows. Each row is a list of cell values. required range_ str, Optional The range (minus the sheet) to have its values replaced, in A1 format. Ex: 'A1:B2', 'B', '3', 'A1'. If None, the entire sheet will be used as range. Defaults to None. None sheet str (str, Optional): If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"set_range()"},{"location":"botcity-googlesheets-plugin-python/api/plugin/#botcity.plugins.googlesheets.plugin.BotGoogleSheetsPlugin.sort","text":"Sorts the sheet's rows according to the columns provided. Unless the start and end point are provided, all rows minus the first one will be sorted! Parameters: Name Type Description Default by_columns Union[str, List[str]] Either a letter-indexed column name to sort the rows by, or a list of them. In case of a tie, the second column is used, and so on. required ascending bool, Optional Set to False to sort by descending order. Defaults to True. True start_row str, Optional The 1-indexed row number where the sort will start from. Defaults to 2. 2 end_row str, Optional The 1-indexed row number where the sort will end at (inclusive). Defaults to None. None sheet str, Optional If a sheet is provided, it'll be used by this method instead of the Active Sheet. Defaults to None. None Returns: Type Description BotGoogleSheetsPlugin self (allows Method Chaining)","title":"sort()"},{"location":"botcity-http-plugin-python/","text":"Welcome Welcome to BotCity's Http Plugin. Installation Latest release Using PyPI pip install botcity-http-plugin","title":"Home"},{"location":"botcity-http-plugin-python/#welcome","text":"Welcome to BotCity's Http Plugin.","title":"Welcome"},{"location":"botcity-http-plugin-python/#installation","text":"","title":"Installation"},{"location":"botcity-http-plugin-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-http-plugin-python/#using-pypi","text":"pip install botcity-http-plugin","title":"Using PyPI"},{"location":"botcity-http-plugin-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.http import BotHttpPlugin As a demonstration of the library, let's build a simple example together that will do something cool . Step 1 of Example To make the example we will... # Instantiate the plugin url = \"https://ptsv2.com/t/ocrc3-1624379671/post\" http = BotHttpPlugin ( url ) # Perform a simple GET request print ( http . get () . text ) ... Step 2 of Example # Set the parameters for a POST request params = { 'id' : 'ocrc3-1624379671' , 'text' : 'POST Example' } http . set_params ( params ) # Print the server response print ( http . post () . text ) ... Complete code Let's take a look into the complete code: from botcity.plugins.http import BotHttpPlugin # Instantiates the plugin url = \"https://ptsv2.com/t/ocrc3-1624379671/post\" http = BotHttpPlugin ( url ) # Performs a simple GET request print ( http . get () . text ) # Sets the parameters for a POST request params = { 'id' : 'ocrc3-1624379671' , 'text' : 'POST Example' } http . set_params ( params ) # Prints the server response print ( http . post () . text ) Pro Tip This plugin allow you to use method chaining so the code above could be written as: http = BotHttpPlugin ( \"https://ptsv2.com/t/ocrc3-1624379671/post\" ) print ( http . get () . text ) print ( http . set_param ( 'id' , 'ocrc3-1624379671' ) . set_param ( 'text' , 'POST Example' ) . post () . text ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-http-plugin-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.plugins.http import BotHttpPlugin As a demonstration of the library, let's build a simple example together that will do something cool .","title":"Getting Started"},{"location":"botcity-http-plugin-python/intro/#step-1-of-example","text":"To make the example we will... # Instantiate the plugin url = \"https://ptsv2.com/t/ocrc3-1624379671/post\" http = BotHttpPlugin ( url ) # Perform a simple GET request print ( http . get () . text ) ...","title":"Step 1 of Example"},{"location":"botcity-http-plugin-python/intro/#step-2-of-example","text":"# Set the parameters for a POST request params = { 'id' : 'ocrc3-1624379671' , 'text' : 'POST Example' } http . set_params ( params ) # Print the server response print ( http . post () . text ) ...","title":"Step 2 of Example"},{"location":"botcity-http-plugin-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.plugins.http import BotHttpPlugin # Instantiates the plugin url = \"https://ptsv2.com/t/ocrc3-1624379671/post\" http = BotHttpPlugin ( url ) # Performs a simple GET request print ( http . get () . text ) # Sets the parameters for a POST request params = { 'id' : 'ocrc3-1624379671' , 'text' : 'POST Example' } http . set_params ( params ) # Prints the server response print ( http . post () . text )","title":"Complete code"},{"location":"botcity-http-plugin-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: http = BotHttpPlugin ( \"https://ptsv2.com/t/ocrc3-1624379671/post\" ) print ( http . get () . text ) print ( http . set_param ( 'id' , 'ocrc3-1624379671' ) . set_param ( 'text' , 'POST Example' ) . post () . text )","title":"Pro Tip"},{"location":"botcity-http-plugin-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-http-plugin-python/api/plugin/","text":"botcity.plugins.http.plugin.BotHttpPlugin __init__ ( self , url , params = None ) special BotHttpPlugin Parameters: Name Type Description Default url str The URL to send requests to. required params dict, Optional Additional parameters to send with your requests. Defaults to None. None Attributes: Name Type Description url str The URL to send requests to. params dict, Optional Additional parameters to send with your requests. Defaults to None. add_param ( self , key , value ) Adds a parameter to the parameters dictionary. Parameters: Name Type Description Default key str Header key. required value object Header value. required Returns: Type Description BotHttpPlugin self (allows Method Chaining) get ( self ) Sends an http get request to the URL defined in this class. Returns: Type Description Response The content of the server response in its raw format. get_as_file ( self , file_name ) Performs an http get request, then saves its response as a file. Parameters: Name Type Description Default file_name str The name of the file. required Returns: Type Description str (str) The resulting file_name. get_as_json ( self ) Sends an http get request to the URL defined in this class, and returns the JSON formatted answer. This method is equivalent to get().json(). Returns: Type Description Dict The content of the server response in json format get_bytes ( self ) Sends an http get request to the URL defined in this class, and returns the answer as bytes. This method is equivalent to get().content Returns: Type Description bytes The content of the server response in bytes post ( self ) Sends an http post request to the URL defined in this class. Returns: Type Description Response The content of the server response in its raw format. post_as_json ( self ) Sends an http post request to the URL defined in this class, and returns the JSON formatted answer. This method is equivalent to post().json(). Returns: Type Description Dict The content of the server response in json format.","title":"Plugin"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin","text":"","title":"BotHttpPlugin"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.__init__","text":"BotHttpPlugin Parameters: Name Type Description Default url str The URL to send requests to. required params dict, Optional Additional parameters to send with your requests. Defaults to None. None Attributes: Name Type Description url str The URL to send requests to. params dict, Optional Additional parameters to send with your requests. Defaults to None.","title":"__init__()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.add_param","text":"Adds a parameter to the parameters dictionary. Parameters: Name Type Description Default key str Header key. required value object Header value. required Returns: Type Description BotHttpPlugin self (allows Method Chaining)","title":"add_param()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.get","text":"Sends an http get request to the URL defined in this class. Returns: Type Description Response The content of the server response in its raw format.","title":"get()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.get_as_file","text":"Performs an http get request, then saves its response as a file. Parameters: Name Type Description Default file_name str The name of the file. required Returns: Type Description str (str) The resulting file_name.","title":"get_as_file()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.get_as_json","text":"Sends an http get request to the URL defined in this class, and returns the JSON formatted answer. This method is equivalent to get().json(). Returns: Type Description Dict The content of the server response in json format","title":"get_as_json()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.get_bytes","text":"Sends an http get request to the URL defined in this class, and returns the answer as bytes. This method is equivalent to get().content Returns: Type Description bytes The content of the server response in bytes","title":"get_bytes()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.post","text":"Sends an http post request to the URL defined in this class. Returns: Type Description Response The content of the server response in its raw format.","title":"post()"},{"location":"botcity-http-plugin-python/api/plugin/#botcity.plugins.http.plugin.BotHttpPlugin.post_as_json","text":"Sends an http post request to the URL defined in this class, and returns the JSON formatted answer. This method is equivalent to post().json(). Returns: Type Description Dict The content of the server response in json format.","title":"post_as_json()"},{"location":"botcity-utils-python/","text":"Welcome Welcome to BotCity's Utils package. Installation Latest release Using PyPI pip install botcity-utils","title":"Home"},{"location":"botcity-utils-python/#welcome","text":"Welcome to BotCity's Utils package.","title":"Welcome"},{"location":"botcity-utils-python/#installation","text":"","title":"Installation"},{"location":"botcity-utils-python/#latest-release","text":"","title":"Latest release"},{"location":"botcity-utils-python/#using-pypi","text":"pip install botcity-utils","title":"Using PyPI"},{"location":"botcity-utils-python/intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.utils.parser import StringParser As a demonstration of the library, let's build a simple example together that will use the StringParser to read the content between the paragraph tags of the following HTML snippet: < h1 > Example </ h1 > < p > A paragraph with some content. This is a test of multiple lines for the parser. </ p > Instantiating the Parser As a demonstration we will assume that the HTML snippet above is stored into the text variable. from botcity.utils.parser import StringParser parser = StringParser ( text ) Extracting Text Looking into the snippet we know that the desired data is contained between the tags <p> and </p> . Based on that we can use the goto_tag_start from the StringParser object and the read_next_lines_until to fetch the data as a list of lines. Here is how we do it: # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" ) Complete code Let's take a look into the complete code: from botcity.utils.parser import StringParser parser = StringParser ( text ) # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" ) Pro Tip This plugin allow you to use method chaining so the code above could be written as: from botcity.utils.parser import StringParser paragraph = StringParser ( text ) . goto_tag_end ( \"<p>\" ) . read_next_lines_until ( \"</p>\" ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"botcity-utils-python/intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions. from botcity.utils.parser import StringParser As a demonstration of the library, let's build a simple example together that will use the StringParser to read the content between the paragraph tags of the following HTML snippet: < h1 > Example </ h1 > < p > A paragraph with some content. This is a test of multiple lines for the parser. </ p >","title":"Getting Started"},{"location":"botcity-utils-python/intro/#instantiating-the-parser","text":"As a demonstration we will assume that the HTML snippet above is stored into the text variable. from botcity.utils.parser import StringParser parser = StringParser ( text )","title":"Instantiating the Parser"},{"location":"botcity-utils-python/intro/#extracting-text","text":"Looking into the snippet we know that the desired data is contained between the tags <p> and </p> . Based on that we can use the goto_tag_start from the StringParser object and the read_next_lines_until to fetch the data as a list of lines. Here is how we do it: # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" )","title":"Extracting Text"},{"location":"botcity-utils-python/intro/#complete-code","text":"Let's take a look into the complete code: from botcity.utils.parser import StringParser parser = StringParser ( text ) # Move cursor to end of <p> tag parser . goto_tag_end ( \"<p>\" ) # Read all lines until </p> is found paragraph = parser . read_next_lines_until ( \"</p>\" )","title":"Complete code"},{"location":"botcity-utils-python/intro/#pro-tip","text":"This plugin allow you to use method chaining so the code above could be written as: from botcity.utils.parser import StringParser paragraph = StringParser ( text ) . goto_tag_end ( \"<p>\" ) . read_next_lines_until ( \"</p>\" )","title":"Pro Tip"},{"location":"botcity-utils-python/intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"botcity-utils-python/api/parser/","text":"Parsers This module offers parsers that can be used in your code to speed up development. The StringParser offers useful methods to navigate and parse strings using tokens. botcity.utils.parser.string.StringParser current_position : int property readonly The current parser cursor position __init__ ( self , content ) special String Parser Parameters: Name Type Description Default content str The string content to be parsed. required back_to_tag_end ( self , tag ) Move the current cursor position to the end of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool Whether or not it was possible to move the cursor. back_to_tag_start ( self , tag ) Move the current cursor position to the beginning of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool Whether or not it was possible to move the cursor. backward_contains ( self , tag ) Whether or not the content contains the tag starting from the beginning until the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool True in case the tag is found, False otherwise. get_next_chars ( self , chars ) Reads and return the content starting from the current position with the addition of chars more characters. Parameters: Name Type Description Default chars int Number of characters to read. required Returns: Type Description str The sliced content. goto_next_line ( self , linesep = None ) Move the cursor to the next line found starting from the current position. Parameters: Name Type Description Default linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description StringParser this object. goto_tag_end ( self , tag ) Move the parser cursor to the end of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser this object. goto_tag_start ( self , tag ) Move the parser cursor to the beginning of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser this object. next_contains ( self , tag ) Whether or not the content contains the tag starting from the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool True in case the tag is found, False otherwise. read ( self ) Reads the remaining content starting at the current cursor positon. Returns: Type Description str the remaining content. read_next_lines ( self , lines , linesep = None ) Reads the next lines lines from the content starting at the current position. Parameters: Name Type Description Default lines int Number of lines to read required linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description List List of lines found. read_next_lines_until ( self , tag_end , linesep = None ) Reads lines until a tag is found. Parameters: Name Type Description Default tag_end str The tag to search for. required linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description List List of lines found. read_until ( self , end ) Read the content from the current cursor position until the position given by the end tag. Parameters: Name Type Description Default end str The tag to search for. required Returns: Type Description str The sliced content between current position and end tag location.","title":"Parsers"},{"location":"botcity-utils-python/api/parser/#parsers","text":"This module offers parsers that can be used in your code to speed up development. The StringParser offers useful methods to navigate and parse strings using tokens.","title":"Parsers"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser","text":"","title":"StringParser"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.current_position","text":"The current parser cursor position","title":"current_position"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.__init__","text":"String Parser Parameters: Name Type Description Default content str The string content to be parsed. required","title":"__init__()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.back_to_tag_end","text":"Move the current cursor position to the end of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool Whether or not it was possible to move the cursor.","title":"back_to_tag_end()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.back_to_tag_start","text":"Move the current cursor position to the beginning of the search tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool Whether or not it was possible to move the cursor.","title":"back_to_tag_start()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.backward_contains","text":"Whether or not the content contains the tag starting from the beginning until the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool True in case the tag is found, False otherwise.","title":"backward_contains()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.get_next_chars","text":"Reads and return the content starting from the current position with the addition of chars more characters. Parameters: Name Type Description Default chars int Number of characters to read. required Returns: Type Description str The sliced content.","title":"get_next_chars()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.goto_next_line","text":"Move the cursor to the next line found starting from the current position. Parameters: Name Type Description Default linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description StringParser this object.","title":"goto_next_line()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.goto_tag_end","text":"Move the parser cursor to the end of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser this object.","title":"goto_tag_end()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.goto_tag_start","text":"Move the parser cursor to the beginning of the tag. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description StringParser this object.","title":"goto_tag_start()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.next_contains","text":"Whether or not the content contains the tag starting from the current cursor position. Parameters: Name Type Description Default tag str The tag to search for. required Returns: Type Description bool True in case the tag is found, False otherwise.","title":"next_contains()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read","text":"Reads the remaining content starting at the current cursor positon. Returns: Type Description str the remaining content.","title":"read()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read_next_lines","text":"Reads the next lines lines from the content starting at the current position. Parameters: Name Type Description Default lines int Number of lines to read required linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description List List of lines found.","title":"read_next_lines()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read_next_lines_until","text":"Reads lines until a tag is found. Parameters: Name Type Description Default tag_end str The tag to search for. required linesep str The line separator. If not specified the system line separator is used. None Returns: Type Description List List of lines found.","title":"read_next_lines_until()"},{"location":"botcity-utils-python/api/parser/#botcity.utils.parser.string.StringParser.read_until","text":"Read the content from the current cursor position until the position given by the end tag. Parameters: Name Type Description Default end str The tag to search for. required Returns: Type Description str The sliced content between current position and end tag location.","title":"read_until()"}]}